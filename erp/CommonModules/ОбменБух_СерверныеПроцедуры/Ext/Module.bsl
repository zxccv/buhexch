#Область Служебные_процедуры_и_функции 

Функция ПолучитьУзлыПланаОбменаСБухгалтерией() Экспорт   
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОбменБух_ВыгрузкаВБухгалтерию.Ссылка КАК Узел
	|ИЗ
	|	ПланОбмена.ОбменБух_ВыгрузкаВБухгалтерию КАК ОбменБух_ВыгрузкаВБухгалтерию
	|ГДЕ
	|	ОбменБух_ВыгрузкаВБухгалтерию.ЭтотУзел = ЛОЖЬ
	|";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Узел");
	
КонецФункции   

Процедура ЗарегистрироватьИзменения(Объект, Узел = Неопределено) Экспорт  
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") 
			И Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо Тогда
		//в этом случае выгружается авансовый отчёт с товарами из такого поступления	
		Возврат;	
	КонецЕсли;		
	
	УзлыРегистрации = ПолучитьУзлыПланаОбменаСБухгалтерией();   
	
	Если Узел <> Неопределено Тогда
		Если УзлыРегистрации.Найти(Узел) <> Неопределено Тогда
			УзлыРегистрации = Новый Массив;
			УзлыРегистрации.Добавить(Узел);
		Иначе
			УзлыРегистрации = Новый Массив;
		КонецЕсли;			
	КонецЕсли;
	
	ПланыОбмена.ЗарегистрироватьИзменения(УзлыРегистрации, Объект.Ссылка);
	
КонецПроцедуры 

Функция СформироватьУИДДляВыгрузки(Ссылка)
	
	Возврат Строка(Ссылка.УникальныйИдентификатор()) + ЗначениеВСтрокуВнутр(Ссылка);
	
КонецФункции

//Самойлов А.С. Начало 2022-09-26 #
Функция КодСчетаРегл(Счет)
	
	Возврат Счет.КодБыстрогоВыбора;	
	
КонецФункции
//Самойлов А.С. Конец  2022-09-26

///////////////////////////////////////////////////////////////////////////////// 
// Функция получения полного имени для объектов метаданных верхнего уровня 
// 
// Параметры: 
//  ОбъектМетаданных - объект описания метаданного, для которого 
//                     необходимо получить полное имя 
//  Коллекция        - признак необходимости формирования вида коллекции объектов 
//                     метаданных 
// 
// Результат: 
//  ВидОбъекта      - строка, вид объекта метаданных, Неопределено - если вид не установлен 
// 
Функция ВидОбъектаМетаданныхОбмена(ОбъектМетаданных, Коллекция = Ложь) Экспорт
	
	ВидОбъекта = Неопределено;
	
	Если Метаданные.Константы.Содержит(ОбъектМетаданных) Тогда
		
		ВидОбъекта = "Константа";
		Если Коллекция Тогда
			ВидОбъекта = "Константы";
		КонецЕсли;
		
	ИначеЕсли Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
		
		ВидОбъекта = "Справочник";
		Если Коллекция Тогда
			ВидОбъекта = "Справочники";
		КонецЕсли;
		
	ИначеЕсли Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
		
		ВидОбъекта = "Документ";
		Если Коллекция Тогда
			ВидОбъекта = "Документы";
		КонецЕсли;
		
	ИначеЕсли Метаданные.Последовательности.Содержит(ОбъектМетаданных) Тогда
		
		ВидОбъекта = "Последовательность";
		Если Коллекция Тогда
			ВидОбъекта = "Последовательности";
		КонецЕсли;
		
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных) Тогда
		
		ВидОбъекта = "ПланВидовХарактеристик";
		Если Коллекция Тогда
			ВидОбъекта = "ПланыВидовХарактеристик";
		КонецЕсли;
		
	ИначеЕсли Метаданные.ПланыСчетов.Содержит(ОбъектМетаданных) Тогда
		
		ВидОбъекта = "ПланСчетов";
		Если Коллекция Тогда
			ВидОбъекта = "ПланыСчетов";			
		КонецЕсли;
		
	ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(ОбъектМетаданных) Тогда
		
		ВидОбъекта = "ПланВидовРасчета";
		Если Коллекция Тогда
			ВидОбъекта = "ПланыВидовРасчета";
		КонецЕсли;
		
	ИначеЕсли Метаданные.БизнесПроцессы.Содержит(ОбъектМетаданных) Тогда
		
		ВидОбъекта = "БизнесПроцесс";
		Если Коллекция Тогда
			ВидОбъекта = "БизнесПроцессы";
		КонецЕсли;
		
	ИначеЕсли Метаданные.Задачи.Содержит(ОбъектМетаданных) Тогда
		
		ВидОбъекта = "Задача";
		Если Коллекция Тогда
			ВидОбъекта = "Задачи";
		КонецЕсли;
		
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных) Тогда
		
		ВидОбъекта = "РегистрСведений";
		Если Коллекция Тогда
			ВидОбъекта = "РегистрыСведений";
		КонецЕсли;
		
	ИначеЕсли Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных) Тогда
		
		ВидОбъекта = "РегистрНакопления";
		Если Коллекция Тогда
			ВидОбъекта = "РегистрыНакопления";
		КонецЕсли;
		
	ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных) Тогда
		
		ВидОбъекта = "РегистрБухгалтерии";
		Если Коллекция Тогда
			ВидОбъекта = "РегистрыБухгалтерии";
		КонецЕсли;
		
	ИначеЕсли Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных) Тогда
		
		ВидОбъекта = "РегистрРасчета";
		Если Коллекция Тогда
			ВидОбъекта = "РегистрыРасчета";
		КонецЕсли;
		
	ИначеЕсли ОбъектМетаданных.Родитель() <> Неопределено Тогда
		
		Родитель = ОбъектМетаданных.Родитель();
		Если ВидОбъектаМетаданныхОбмена(Родитель) = "РегистрРасчета" И Родитель.Перерасчеты.Содержит(ОбъектМетаданных) Тогда  
			ВидОбъекта = "Перерасчет";
			Если Коллекция Тогда
				ВидОбъекта = "Перерасчеты";
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;        
	
	Возврат ВидОбъекта;   
	
КонецФункции    // ВидОбъектаМетаданныхОбмена(ОбъектМетаданных) Экспорт

Функция ВыполнитьЗапросКСервису(Узел, Команда, ТаблицаВыгрузки, ТипЗапроса = "POST", ЛогинПароль = Неопределено, НомерОтправляемого) Экспорт
	
	Если ЛогинПароль = Неопределено Тогда
		ЛогинПароль = Новый Структура;
		ЛогинПароль.Вставить("Логин", Узел.СлужебныйЛогин);
		ЛогинПароль.Вставить("Пароль", Узел.СлужебныйПароль);		
	КонецЕсли; 
	
	//SSL = Новый ЗащищенноеСоединениеOpenSSL(Новый СертификатКлиентаWindows(), Новый СертификатыУдостоверяющихЦентровWindows());
	HTTPСоединение = Новый HTTPСоединение(Узел.УРЛСервиса, , ЛогинПароль.Логин, ЛогинПароль.Пароль, , 120);
	
	HTTPЗапрос = Новый HTTPЗапрос("/" + Узел.ИмяБазы + "/hs/exchange/" + Команда); 
	HTTPЗапрос.Заголовки.Вставить("Accept-Language", "ru");
	HTTPЗапрос.Заголовки.Вставить("Accept-Charset","utf-8");
	HTTPЗапрос.Заголовки.Вставить("Content-Language", "ru");
	HTTPЗапрос.Заголовки.Вставить("Content-Charset", "utf-8");
	HTTPЗапрос.Заголовки.Вставить("Content-type", "application/json; charset=utf-8");
	
	Если ТипЗапроса = "POST" Тогда
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		
		ЗаписатьJSON(ЗаписьJSON, ТаблицаВыгрузки);
		
		ПараметрыПОСТ = ЗаписьJSON.Закрыть();
		
		HTTPЗапрос.УстановитьТелоИзСтроки(ПараметрыПОСТ);
		Ответ = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		
		РегистрыСведений.ОбменБух_ОтправкаДанных.СоздатьЗаписьРегистра(
		Новый Структура(
			"Узел, НомерСообщения, ДатаОтправки, СодержимоеПакета",
			Узел, НомерОтправляемого, ТекущаяДата(), ПараметрыПОСТ
		));
		
	КонецЕсли; 
	
	Если Ответ.КодСостояния = 200 Тогда
		ТекстОтвета = Ответ.ПолучитьТелоКакСтроку("UTF-8");
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ТекстОтвета);
		
		структураОтвет = ПрочитатьJSON(ЧтениеJSON);  
	Иначе
		структураОтвет = Новый Структура("errorCode, errorDescription, errorObj, requestedObj", Ответ.КодСостояния, "Ошибка подключения к бухгалтерской базе", Новый Массив, Новый Массив);	
	КонецЕсли;
	
	Возврат структураОтвет;
	
КонецФункции

Функция ВыгрузитьОбъект(СсылкаНаОбъект = Неопределено, ТаблицаВыгрузки = Неопределено, ОписаниеОшибок = Неопределено)
	
	Если СсылкаНаОбъект.Пустая() Тогда
		Возврат Истина;
	КонецЕсли;	 

	ТипОбъекта = ТипЗнч(СсылкаНаОбъект);	
	
	Если ТипОбъекта = Тип("СправочникСсылка.Валюты") Тогда
		ВыгрузитьВалюту(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок);	
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Организации") Тогда                                                       
		ВыгрузитьОрганизацию(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок);	
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		ВыгрузитьПодразделение(СсылкаНаОбъект, Справочники.Организации.ПустаяСсылка(), ТаблицаВыгрузки, ОписаниеОшибок);	
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда 
		ВыгрузитьПодразделение(СсылкаНаОбъект, СсылкаНаОбъект.ГоловнаяОрганизация, ТаблицаВыгрузки, ОписаниеОшибок);	
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Склады") Тогда
		ВыгрузитьСклад(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок);	
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ВыгрузитьФизЛицо(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок);	
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Пользователи") Тогда
		ВыгрузитьПользователя(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок);	
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Контрагенты") Тогда
		ВыгрузитьКонтрагента(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок);	
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ДоговорыКонтрагентов") 
		ИЛИ ТипОбъекта = Тип("СправочникСсылка.ДоговорыМеждуОрганизациями") 
		ИЛИ ТипОбъекта = Тип("СправочникСсылка.ДоговорыАренды")
		ИЛИ ТипОбъекта = Тип("СправочникСсылка.ДоговорыЭквайринга") Тогда
		ВыгрузитьДоговор(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок);	
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.РегистрацииВНалоговомОргане") Тогда
		ВыгрузитьРегистрациюВНалоговомОргане(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок);
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.УчетныеЗаписиДокументооборота") Тогда
		ВыгрузитьУчетнуюЗаписьДокументооборота(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок);
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.НалоговыеОрганы") Тогда
		ВыгрузитьНалоговыйОрган(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок);
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Номенклатура") Тогда
		ВыгрузитьНоменклатуру(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок);	
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.УпаковкиЕдиницыИзмерения") Тогда
		ВыгрузитьЕдиницуИзмерения(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок);	
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.БанковскиеСчетаКонтрагентов")
		ИЛИ ТипОбъекта = Тип("СправочникСсылка.БанковскиеСчетаОрганизаций") Тогда
		ВыгрузитьБанковскийСчет(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок);
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.КлассификаторБанков") Тогда
		ВыгрузитьКлассификаторБанковКакБанк(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок);
	ИначеЕсли ТипОбъекта = Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов") Тогда
		ВыгрузитьСтатьюРасходов(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок);
	ИначеЕсли ТипОбъекта = Тип("ПланВидовХарактеристикСсылка.СтатьиДоходов") Тогда
		ВыгрузитьСтатьюДоходов(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок);
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Резервы") Тогда
		ВыгрузитьРезервыОценочныеОбязательства(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок);
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ЦенныеБумаги") Тогда
		ВыгрузитьЦенныеБумаги(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок);		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ОбъектыЭксплуатации") Тогда
		ВыгрузитьОбъектЭксплуатации(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок);
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.НематериальныеАктивы") Тогда
		ВыгрузитьНематериальныйАктив(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок);  		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Сотрудники") Тогда
		ВыгрузитьСотрудника(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок);
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств") Тогда
		ВыгрузитьСтатьюДДС(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок);
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.СерверыДокументооборота") Тогда
		ВыгрузитьСерверДокументооборота(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок); 
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ЗарплатныеПроекты") Тогда
		ВыгрузитьЗарплатныйПроект(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок);
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.СпособыВыплатыЗарплаты") Тогда
		ВыгрузитьСпособыВыплатыЗарплаты(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок);
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.СпособыОкругленияПриРасчетеЗарплаты") Тогда
		ВыгрузитьСпособОкругленияПриРасчетеЗарплаты(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок);
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.СтатьиРасходовЗарплата") Тогда
		ВыгрузитьСтатьюРасходовЗарплата(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок);
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Должности") Тогда
		ВыгрузитьДолжность(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок);
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ВидыДоходовНДФЛ") Тогда
		ВыгрузитьВидДоходовНДФЛ(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок); 
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		ВыгрузитьАвансовыйОтчет(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок);
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.ВзаимозачетЗадолженности") Тогда
		ВыгрузитьВзаимозачетЗадолженности(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок);
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.ВнутреннееПотреблениеТоваров") Тогда
		ВыгрузитьВнутреннееПотреблениеТоваров(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок);				
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
		ВыгрузитьВозвратТоваровОтКлиента(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок);  
	//Савина Н. #1 Начало 28.09.2022
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		ВыгрузитьВозвратТоваровПоставщику(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок);
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.КорректировкаПриобретения") Тогда
		ВыгрузитьКорректировкуПриобретения(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок);
	//Савина Н. Конец 28.09.2022
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.ОприходованиеИзлишковТоваров") Тогда
		ВыгрузитьОприходованиеИзлишковТоваров(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок);
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.СписаниеНедостачТоваров") Тогда
		ВыгрузитьСписаниеНедостач(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок);		
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.ОперацияПоПлатежнойКарте") Тогда
		ВыгрузитьОперациюПоПлатежнойКарте(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок);
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.ОтчетБанкаПоОперациямЭквайринга") Тогда
		ВыгрузитьОтчетБанкаПоОперациямЭквайринга(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок);		
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		ВыгрузитьПриходныйКассовыйОрдер(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок);
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств") Тогда
		ВыгрузитьПоступлениеБезналичныхДС(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок);
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		ВыгрузитьРасходныйКассовыйОрдер(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок);
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств") Тогда
		ВыгрузитьСписаниеБезналичныхДенежныхСредств(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок);
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк") Тогда
		ВыгрузитьВедомостьНаВыплатуЗарплатыВБанк(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок);  
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.ПересортицаТоваров") Тогда
		ВыгрузитьПересортицуТоваров(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок);
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.ОперацияБух")
		ИЛИ ТипОбъекта = Тип("ДокументСсылка.МодернизацияОС2_4") 
		ИЛИ ТипОбъекта = Тип("ДокументСсылка.ПринятиеКУчетуОС2_4") 
		ИЛИ ТипОбъекта = Тип("ДокументСсылка.СписаниеОС2_4") 
		ИЛИ ТипОбъекта = Тип("ДокументСсылка.ПриобретениеУслугПрочихАктивов") 
		ИЛИ ТипОбъекта = Тип("ДокументСсылка.ПрочиеДоходыРасходы") 
		//Самойлов А.С. Начало 2022-11-02 #
		ИЛИ ТипОбъекта = Тип("ДокументСсылка.ВыкупПринятыхНаХранениеТоваров")
		ИЛИ ТипОбъекта = Тип("ДокументСсылка.РаспределениеРасходовБудущихПериодов")
		//Самойлов А.С. Конец  2022-11-02
		Тогда
		ВыгрузитьДокументКакОперацию(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок);
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.ОтражениеЗарплатыВФинансовомУчете") Тогда
		ВыгрузитьОтражениеЗарплатыВФинансовомУчете(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок);
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.СтраныМира") Тогда
		ВыгрузитьСтрану(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок);
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
		ВыгрузитьПриобретение(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок);
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.ПоступлениеУслугПоАренде") Тогда
		ВыгрузитьПоступлениеУслугПоАренде(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок);
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ВыгрузитьРеализацию(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок);
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		ВыгрузитьКорректировкуРеализации(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок);
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями") Тогда
		ВыгрузитьПередачуТоваровМеждуОрганизациями(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок);
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		ВыгрузитьПеремещениеТоваров(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок);
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.ПорчаТоваров") Тогда
		ВыгрузитьПорчуТоваров(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок);	
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.СборкаТоваров") Тогда
		ВыгрузитьСборкуТоваров(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок);
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.ОтчетКомиссионера") Тогда
		ВыгрузитьОтчетКомиссионера(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок);
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.НачислениеДивидендов") Тогда
		ВыгрузитьНачислениеДивидендов(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок);
	ИначеЕсли ТипОбъекта = Тип("ПланСчетовСсылка.Хозрасчетный") Тогда
		ВыгрузитьОстаткиПоСчету(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок);
	Иначе
		Сообщить("Для выбранного объекта не предусмотрена выгрузка");
		Сообщить("" + СсылкаНаОбъект + " - " + XMLТипЗнч(СсылкаНаОбъект).ИмяТипа);		
		Возврат Ложь;
	КонецЕсли; 
	
	Возврат Истина;
	
КонецФункции  

//выполняет выгрузку объектов, дополнительно запрошенных бухгалтерией
Процедура ВыгрузитьДопОбъект(СтруктураОбъекта, ДопТаблицаВыгрузки, ОписаниеОшибок)
	
	Если ЗначениеЗаполнено(СтруктураОбъекта.УИДВладельца) Тогда 
		ВладелецСтрока = Сред(СтруктураОбъекта.УИДВладельца, 37);
		ВладелецСсылка = ЗначениеИзСтрокиВнутр(ВладелецСтрока);
	КонецЕсли;
	
	ОбъектСтрока = Сред(СтруктураОбъекта.УИДОбъекта, 37);
	ОбъектСсылка = ЗначениеИзСтрокиВнутр(ОбъектСтрока);
	ТипОбъекта = ТипЗнч(ОбъектСсылка);  
	
	Если ТипОбъекта = Тип("СправочникСсылка.Организации") Тогда
		Если СтрНайти(СтруктураОбъекта.ТипПриемника, "Контрагент") > 0 Тогда
			ВыгрузитьОрганизациюКакКонтрагента(ОбъектСсылка, ДопТаблицаВыгрузки, ОписаниеОшибок);
		Иначе
			ВыгрузитьОрганизацию(ОбъектСсылка, ДопТаблицаВыгрузки, ОписаниеОшибок);
		КонецЕсли;
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.СтруктураПредприятия")	Тогда  
		//Савина Н. #1 Начало 29.09.2022
		//ОрганизацияПодразделенияСтрока = Прав(СтруктураОбъекта.УИДОбъекта, 37);
		//ОрганизацияПодразделенияСсылка = ЗначениеИзСтрокиВнутр(ОрганизацияПодразделенияСтрока);    
		//Если НЕ ОрганизацияПодразделенияСсылка.Пустая() Тогда     
		
		Если НЕ ВладелецСсылка.Пустая() Тогда
			ВыгрузитьПодразделение(ОбъектСсылка, ВладелецСсылка.Организация, ДопТаблицаВыгрузки, ОписаниеОшибок);
		КонецЕсли;	
		//Савина Н. Конец 29.09.2022
	ИначеЕсли (Метаданные.Документы.Содержит(Метаданные.НайтиПоТипу(ТипОбъекта)) И ОбъектСсылка.Дата < Дата(2021,01,01,00,00,00))
		ИЛИ ТипОбъекта = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		ВыгрузитьДокументКакДокументРасчетовСКонтрагентами(ОбъектСсылка, ДопТаблицаВыгрузки, ОписаниеОшибок);
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.КлассификаторБанков") Тогда
		Если СтрНайти(СтруктураОбъекта.ТипПриемника, "КлассификаторБанков") > 0 Тогда
			ВыгрузитьКлассификаторБанковКакКлассификаторБанка(ОбъектСсылка, ДопТаблицаВыгрузки, ОписаниеОшибок);
		Иначе
			ВыгрузитьКлассификаторБанковКакБанк(ОбъектСсылка, ДопТаблицаВыгрузки, ОписаниеОшибок);
		КонецЕсли;
	Иначе     
		ВыгрузитьОбъект(ОбъектСсылка, ДопТаблицаВыгрузки, ОписаниеОшибок);
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ОтправитьПакет(Узел, ТаблицаВыгрузки, НомерСообщения)
		
	РезультатВыгрузки = ВыполнитьЗапросКСервису(Узел, "upload", Новый Структура("Объекты", ТаблицаВыгрузки.ВыгрузитьКолонку("СтруктураВыгрузки")), , , НомерСообщения);
	
	СтатусОтвета = "OK";
	
	//Самойлов А.С. Начало 2022-09-18 #
	МаксПопыток = 5; //!! 5 должно быть задано в реквизите узла обмена КоличествоПовторныхЗапросов
	
	текНомерПопытки = 1;             
	
	Пока РезультатВыгрузки.requestedObj.Количество() > 0 И текНомерПопытки <= МаксПопыток Цикл
		ОписаниеОшибок = Новый Массив;
		
		ИндексДляВставки = 0;
		Для ИндексОбъекта = 0 По РезультатВыгрузки.requestedObj.Количество() - 1 Цикл
			текКоличествоСтрок = ТаблицаВыгрузки.Количество();
			
			ВыгрузитьДопОбъект(РезультатВыгрузки.requestedObj[ИндексОбъекта], ТаблицаВыгрузки, ОписаниеОшибок); 
			                                                  		
			Если текКоличествоСтрок <> ТаблицаВыгрузки.Количество() Тогда
				//Элемент добавлен в конец таблицы, надо переставить его на свое место
				ЗаполнитьЗначенияСвойств(ТаблицаВыгрузки.Вставить(ИндексДляВставки),ТаблицаВыгрузки[ТаблицаВыгрузки.Количество() - 1]);
				ТаблицаВыгрузки.Удалить(ТаблицаВыгрузки.Количество() - 1);
				ИндексДляВставки = ИндексДляВставки + 1;
			КонецЕсли;
		КонецЦикла;	
		
		РезультатВыгрузки = ВыполнитьЗапросКСервису(Узел, "upload", Новый Структура("Объекты", ТаблицаВыгрузки.ВыгрузитьКолонку("СтруктураВыгрузки")), , , НомерСообщения);
		
		текНомерПопытки = текНомерПопытки + 1;
	КонецЦикла;	
	//Самойлов А.С. Конец  2022-09-18	 
		
	Если РезультатВыгрузки.errorCode <> 0 Тогда   
		СообщениеОбОшибке = "errorCode: " + РезультатВыгрузки.errorCode + Символы.ПС +
		"errorDescription: " + РезультатВыгрузки.errorDescription;
		
		ЗаписьЖурналаРегистрации("Выгрузка в бухгалтерию", УровеньЖурналаРегистрации.Ошибка, , Узел, СообщениеОбОшибке);     
		СтатусОтвета = "Ошибка (" + РезультатВыгрузки.errorCode + ")";
	Иначе   
		//Савина Н. #1 Начало 29.09.2022
		Если текНомерПопытки > 6 Тогда
			РезультатВыгрузки.errorCode = 700;
			ЗаписьЖурналаРегистрации("Выгрузка в бухгалтерию", УровеньЖурналаРегистрации.Ошибка, , Узел, "Не удалось выгрузить доп. объекты  к документам в бухгалтерию");     
			СтатусОтвета = "Ошибка (700)";
		КонецЕсли;
		//Савина Н. Конец 29.09.2022
	КонецЕсли;		
	
	Если РезультатВыгрузки.errorCode = 0     
		ИЛИ РезультатВыгрузки.errorCode = 605 Тогда //!!     
		ПланыОбмена.УдалитьРегистрациюИзменений(Узел, НомерСообщения);
	КонецЕсли; 
	
	//Что делать при других ошибках??? 
	//Перерегистрировать или удалять???
	
	//Фиксация ответа в регистре
	ЗаписьРегистра = РегистрыСведений.ОбменБух_ОтправкаДанных.СоздатьМенеджерЗаписи();
	ЗаписьРегистра.Узел = Узел;
	ЗаписьРегистра.НомерСообщения = НомерСообщения;
	ЗаписьРегистра.Прочитать();
	Если ЗаписьРегистра.Выбран() Тогда
		ЗаписьРегистра.ДатаПолученияОтвета = ТекущаяДата();
		ЗаписьРегистра.Статус = СтатусОтвета;
		ЗаписьРегистра.Записать();
	КонецЕсли;
	
	//Самойлов А.С. Начало 2022-09-18 #
	//Пакет не ушел - падаем совсем, не нужно выгружать следующий
	Если СтатусОтвета <> "OK" Тогда 
		ВызватьИсключение СтатусОтвета;
	КонецЕсли;
	//Самойлов А.С. Конец  2022-09-18
	
КонецПроцедуры

Процедура ВыполнитьВыгрузку() Экспорт
	
	Узел = ПолучитьУзлыПланаОбменаСБухгалтерией()[0];  
	
	Если Узел.ВыгружатьЗаПоследниеДней > 0 Тогда
		ДатаОтсечки = КонецДня(ТекущаяДата() - Узел.ВыгружатьЗаПоследниеДней * 3600 * 24) + 1; 
	Иначе
		ДатаОтсечки = '20210101';
	КонецЕсли;
	
	ОписаниеОшибок = Новый Массив;
	ТаблицаВыгрузки = Новый ТаблицаЗначений();
	ТаблицаВыгрузки.Колонки.Добавить("СсылкаНаОбъект");
	ТаблицаВыгрузки.Колонки.Добавить("СтруктураВыгрузки");
	ТаблицаВыгрузки.Колонки.Добавить("ПорядокВыгрузки"); //порядок выгрузки по типу объекта
	ТаблицаВыгрузки.Колонки.Добавить("НомерОбъекта"); //порядок добавления в таблицу
	
	//Самойлов А.С. Начало 2022-09-17 #
	ТаблицаДанных = ПолучитьПорциюИзменений(Узел);
	
	Пока ТаблицаДанных.Количество() > 0 Цикл
		
		НомерОтправляемого = Узел.НомерОтправленного + 1;
	
		УзелОбъект = Узел.ПолучитьОбъект();
		УзелОбъект.НомерОтправленного = НомерОтправляемого;		
		УзелОбъект.Записать();
		
		ПланыОбмена.ВыбратьИзменения(Узел,НомерОтправляемого,ТаблицаДанных.ВыгрузитьКолонку("Объект"));
		
		ТаблицаВыгрузки.Очистить();
		
		Для Каждого СтрокаДанные Из ТаблицаДанных Цикл
			
			Попытка
				//ПланыОбмена.ВыбратьИзменения(Узел, СтрокаДанные.НомерСообщения + 1, СтрокаДанные.Объект);
				//
				Если СтрНайти(СтрокаДанные.ТипОбъекта, "Документ") > 0 
					И СтрокаДанные.Объект.Дата < ДатаОтсечки Тогда  
					
					ЗаписьЖурналаРегистрации("Выгрузка в бухгалтерию", УровеньЖурналаРегистрации.Предупреждение, , СтрокаДанные.Объект,
					"Объект не выгружен, так как попадает в закрытый период");
					ПланыОбмена.УдалитьРегистрациюИзменений(Узел, СтрокаДанные.Объект);  
					
					//УДАЛИТЬ!
					Сообщить("Объект не выгружен, так как попадает в закрытый период " + СтрокаДанные.Объект);
					
					Продолжить; 
					
				КонецЕсли;
				
				Если НЕ ВыгрузитьОбъект(СтрокаДанные.Объект, ТаблицаВыгрузки, ОписаниеОшибок) Тогда 
					ПланыОбмена.УдалитьРегистрациюИзменений(Узел, СтрокаДанные.Объект);
					Продолжить;
				КонецЕсли;		 
				
			Исключение
				ЗаписьЖурналаРегистрации("Выгрузка в бухгалтерию", УровеньЖурналаРегистрации.Ошибка, , СтрокаДанные.Объект, ОписаниеОшибки());
				Возврат;
			КонецПопытки;				
						
		КонецЦикла;
		
		ТаблицаВыгрузки.Сортировать("ПорядокВыгрузки, НомерОбъекта"); //сортируем по порядку выгрузки объектов, сохраняя порядок добавления объектов в таблицу
	
		Если ТаблицаВыгрузки.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;  
		
		Попытка		
			ОтправитьПакет(Узел, ТаблицаВыгрузки,НомерОтправляемого);		
		Исключение	
			ЗаписьЖурналаРегистрации("Выгрузка в бухгалтерию", УровеньЖурналаРегистрации.Ошибка, , СтрокаДанные.Объект, ОписаниеОшибки());
			Прервать;
		КонецПопытки;
		
		//Временно выгружаем по одной порции
		//Прервать;
		ТаблицаДанных = ПолучитьПорциюИзменений(Узел);
		
	КонецЦикла;
	//Самойлов А.С. Конец  2022-09-17
			
КонецПроцедуры 

//Самойлов А.С. Начало 2022-09-17 #
Функция ПолучитьПорциюИзменений(Узел)
	
	ШаблонТекстаЗапроса =
	"ВЫБРАТЬ
	|	{ИмяОбъекта}Изменения.Ссылка КАК Объект,
	|	ЕСТЬNULL({ИмяОбъекта}Изменения.НомерСообщения, 0) КАК НомерСообщения,
	|	""{ТипОбъекта}.{ИмяОбъекта}"" КАК ТипОбъекта,
	//Самойлов А.С. Начало 2022-09-23 #
	|	{ПолеДата} КАК ДатаОбъекта
	//Самойлов А.С. Конец  2022-09-23	
	|{ПоместитьВ}
	|ИЗ
	|	{ТипОбъекта}.{ИмяОбъекта}.Изменения КАК {ИмяОбъекта}Изменения
	|ГДЕ
	|	{ИмяОбъекта}Изменения.Узел = &Узел
	|	{ФильтрОтправленные}";
	
	ЗапросИзменения = Новый Запрос; 
	
	СчЭлемент = 1; 
	
	//ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "{ФильтрОтправленные}", "И {ИмяОбъекта}Изменения.НомерСообщения ЕСТЬ NULL");
	ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "{ФильтрОтправленные}", "");
	
	Для каждого ЭлСостава из Узел.Метаданные().Состав Цикл 
		ВидОбъектаСостава = ВидОбъектаМетаданныхОбмена(ЭлСостава.Метаданные);
		ИмяОбъектаСостава = ЭлСостава.Метаданные.Имя;
		
		Если НЕ ЗначениеЗаполнено(ЗапросИзменения.Текст) Тогда
			ПервыйПодзапрос = Истина;
		Иначе
			ПервыйПодзапрос = Ложь;
		КонецЕсли;	
		
		ЗапросИзменения.Текст = ЗапросИзменения.Текст + ШаблонТекстаЗапроса;
		ЗапросИзменения.Текст = СтрЗаменить(ЗапросИзменения.Текст, "{ТипОбъекта}", ВидОбъектаСостава);
		ЗапросИзменения.Текст = СтрЗаменить(ЗапросИзменения.Текст, "{ИмяОбъекта}", ИмяОбъектаСостава);
		
		//Самойлов А.С. Начало 2022-09-23 #
		Если ВидОбъектаСостава = "Документ" Тогда
			ЗапросИзменения.Текст = СтрЗаменить(ЗапросИзменения.Текст,"{ПолеДата}",ИмяОбъектаСостава + "Изменения.Ссылка.Дата");
		Иначе
			ЗапросИзменения.Текст = СтрЗаменить(ЗапросИзменения.Текст,"{ПолеДата}","ДАТАВРЕМЯ(1,1,1)");
		КонецЕсли;
		//Самойлов А.С. Конец  2022-09-23
		
		Если ПервыйПодзапрос Тогда
			ЗапросИзменения.Текст = СтрЗаменить(ЗапросИзменения.Текст, "{ПоместитьВ}", "ПОМЕСТИТЬ ВТ_ВсеИзменения");
		Иначе
			ЗапросИзменения.Текст = СтрЗаменить(ЗапросИзменения.Текст, "{ПоместитьВ}", "");
		КонецЕсли;
		
		Если СчЭлемент <> Узел.Метаданные().Состав.Количество() Тогда
			ЗапросИзменения.Текст = ЗапросИзменения.Текст + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		Иначе
			ЗапросИзменения.Текст = ЗапросИзменения.Текст + "
			|;
			|";
		КонецЕсли;   
		
		СчЭлемент = СчЭлемент + 1;
		
	КонецЦикла; 
	
	ЗапросИзменения.Текст = ЗапросИзменения.Текст + "
	|ВЫБРАТЬ ПЕРВЫЕ {РазмерПорции}
	|	ВТ_ВсеИзменения.Объект КАК Объект,
	|	ВТ_ВсеИзменения.НомерСообщения КАК НомерСообщения,
	|	ВТ_ВсеИзменения.ТипОбъекта КАК ТипОбъекта	
	|ИЗ
	|	ВТ_ВсеИзменения КАК ВТ_ВсеИзменения
	|УПОРЯДОЧИТЬ ПО ДатаОбъекта
	|";
	
	ЗапросИзменения.УстановитьПараметр("Узел", Узел);
	
	ЗапросИзменения.Текст = СтрЗаменить(ЗапросИзменения.Текст, "{РазмерПорции}", Формат(Узел.РазмерПорцииДанных,"ЧДЦ=0; ЧРД=; ЧРГ=; ЧГ="));	
	
	Возврат ЗапросИзменения.Выполнить().Выгрузить();
		
КонецФункции
//Самойлов А.С. Конец  2022-09-19

//Самойлов А.С. Начало 2022-09-19 #
Функция ПолучитьСчетУчетаИзНастроек(ВидСчета, Организация, АналитикаУчета, МестоУчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПорядокОтраженияНаСчетахУчета.Организация КАК Организация,
	|	ПорядокОтраженияНаСчетахУчета.АналитикаУчета КАК АналитикаУчета,
	|	ПорядокОтраженияНаСчетахУчета.МестоУчета КАК МестоУчета,
	|	ПорядокОтраженияНаСчетахУчета.СчетУчета КАК СчетУчета
	|ПОМЕСТИТЬ втСчетаПоВиду
	|ИЗ
	|	РегистрСведений.ПорядокОтраженияНаСчетахУчета КАК ПорядокОтраженияНаСчетахУчета
	|ГДЕ
	|	ПорядокОтраженияНаСчетахУчета.ВидСчета = &ВидСчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСчетаПоВиду.СчетУчета КАК СчетУчета,
	|	1 КАК Приоритет
	|ПОМЕСТИТЬ втСчетаСОтбором
	|ИЗ
	|	втСчетаПоВиду КАК втСчетаПоВиду
	|ГДЕ
	|	втСчетаПоВиду.Организация = &Организация
	|	И втСчетаПоВиду.МестоУчета = &МестоУчета
	|	И втСчетаПоВиду.АналитикаУчета = &АналитикаУчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втСчетаПоВиду.СчетУчета,
	|	2
	|ИЗ
	|	втСчетаПоВиду КАК втСчетаПоВиду
	|ГДЕ
	|	втСчетаПоВиду.Организация = &Организация
	|	И втСчетаПоВиду.МестоУчета = НЕОПРЕДЕЛЕНО
	|	И втСчетаПоВиду.АналитикаУчета = &АналитикаУчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втСчетаПоВиду.СчетУчета,
	|	3
	|ИЗ
	|	втСчетаПоВиду КАК втСчетаПоВиду
	|ГДЕ
	|	втСчетаПоВиду.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	И втСчетаПоВиду.МестоУчета = НЕОПРЕДЕЛЕНО
	|	И втСчетаПоВиду.АналитикаУчета = &АналитикаУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	втСчетаСОтбором.СчетУчета КАК СчетУчета
	|ИЗ
	|	втСчетаСОтбором КАК втСчетаСОтбором
	|
	|УПОРЯДОЧИТЬ ПО
	|	втСчетаСОтбором.Приоритет
	|"; 
	
	Запрос.УстановитьПараметр("ВидСчета", ВидСчета);
	Запрос.УстановитьПараметр("АналитикаУчета", АналитикаУчета);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("МестоУчета", МестоУчета);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СчетУчета;
	Иначе
		Возврат ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	КонецЕсли;
		
КонецФункции
//Самойлов А.С. Конец  2022-09-19 

Процедура ДополнитьСтрукутуруДаннымиСчетФактурыПолученной(СтруктураВыгрузки, ДокументСсылка) 
	
	СтруктураВыгрузки.Вставить("НомерСФ", "");
	СтруктураВыгрузки.Вставить("ДатаСФ", '00010101');
	СтруктураВыгрузки.Вставить("ПроведенСФ", "");
	
	ЗапросСФ = Новый Запрос;
	ЗапросСФ.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетФактураПолученный.Номер КАК НомерСФ,
	|	СчетФактураПолученный.Дата КАК ДатаСФ,
	|	СчетФактураПолученный.Проведен КАК ПроведенСФ
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|ГДЕ
	|	СчетФактураПолученный.ДокументыОснования.ДокументОснование = &ДокументСсылка
	|	И СчетФактураПолученный.Проведен = ИСТИНА
	|";
	
	ЗапросСФ.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	ВыборкаСФ = ЗапросСФ.Выполнить().Выбрать();
	
	Если ВыборкаСФ.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураВыгрузки, ВыборкаСФ);
	КонецЕсли;   
	
КонецПроцедуры

Функция ПоказательПериодаВДату(ПоказательПериода)
	
	СтрПоказательПериода = ПоказательПериода;
	
	СтрПоказательПериода = СтрЗаменить(СтрПоказательПериода, "МС", "01"); 
	СтрПоказательПериода = СтрЗаменить(СтрПоказательПериода, "КВ", "01"); 
	СтрПоказательПериода = СтрЗаменить(СтрПоказательПериода, "ГД.00", "01.01");
	
	Возврат СтрПоказательПериода;  
	
КонецФункции    

Функция ВыгрузитьПроводкиДокумента(СсылкаНаОбъект)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйДвиженияССубконто.Период КАК Период,
	|	ХозрасчетныйДвиженияССубконто.Регистратор КАК Регистратор,
	|	ХозрасчетныйДвиженияССубконто.НомерСтроки КАК НомерСтроки,
	|	ХозрасчетныйДвиженияССубконто.Активность КАК Активность,
	|	ХозрасчетныйДвиженияССубконто.СчетДт КАК СчетДт,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт1 КАК СубконтоДт1,
	|	ХозрасчетныйДвиженияССубконто.ВидСубконтоДт1 КАК ВидСубконтоДт1,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт2 КАК СубконтоДт2,
	|	ХозрасчетныйДвиженияССубконто.ВидСубконтоДт2 КАК ВидСубконтоДт2,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт3 КАК СубконтоДт3,
	|	ХозрасчетныйДвиженияССубконто.ВидСубконтоДт3 КАК ВидСубконтоДт3,
	|	ХозрасчетныйДвиженияССубконто.СчетКт КАК СчетКт,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК СубконтоКт1,
	|	ХозрасчетныйДвиженияССубконто.ВидСубконтоКт1 КАК ВидСубконтоКт1,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт2 КАК СубконтоКт2,
	|	ХозрасчетныйДвиженияССубконто.ВидСубконтоКт2 КАК ВидСубконтоКт2,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт3 КАК СубконтоКт3,
	|	ХозрасчетныйДвиженияССубконто.ВидСубконтоКт3 КАК ВидСубконтоКт3,
	|	ХозрасчетныйДвиженияССубконто.Организация КАК Организация,
	|	ХозрасчетныйДвиженияССубконто.ВалютаДт КАК ВалютаДт,
	|	ХозрасчетныйДвиженияССубконто.ВалютаКт КАК ВалютаКт,
	|	ХозрасчетныйДвиженияССубконто.ПодразделениеДт КАК ПодразделениеДт,
	|	ХозрасчетныйДвиженияССубконто.ПодразделениеКт КАК ПодразделениеКт,
	|	ХозрасчетныйДвиженияССубконто.НаправлениеДеятельностиДт КАК НаправлениеДеятельностиДт,
	|	ХозрасчетныйДвиженияССубконто.НаправлениеДеятельностиКт КАК НаправлениеДеятельностиКт,
	|	ХозрасчетныйДвиженияССубконто.Сумма КАК Сумма,
	|	ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаДт,0) КАК ВалютнаяСуммаДт,
	|	ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаКт,0) КАК ВалютнаяСуммаКт,
	|	ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.КоличествоДт,0) КАК КоличествоДт,
	|	ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.КоличествоКт,0) КАК КоличествоКт,
	|	ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.СуммаНУДт,0) КАК СуммаНУДт,
	|	ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.СуммаНУКт,0) КАК СуммаНУКт,
	|	ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.СуммаПРДт,0) КАК СуммаПРДт,
	|	ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.СуммаПРКт,0) КАК СуммаПРКт,
	|	ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.СуммаВРДт,0) КАК СуммаВРДт,
	|	ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.СуммаВРКт,0) КАК СуммаВРКт,
	|	ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.СуммаУУ,0) КАК СуммаУУ,
	|	ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.СуммаФО,0) КАК СуммаФО,
	|	ХозрасчетныйДвиженияССубконто.Содержание КАК Содержание,
	|	ХозрасчетныйДвиженияССубконто.НеКорректироватьСтоимостьАвтоматически КАК НеКорректироватьСтоимостьАвтоматически,
	|	ХозрасчетныйДвиженияССубконто.Сторно КАК Сторно
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто КАК ХозрасчетныйДвиженияССубконто
	|ГДЕ
	|	ХозрасчетныйДвиженияССубконто.Регистратор = &Регистратор
	|";
	
	Запрос.УстановитьПараметр("Регистратор",СсылкаНаОбъект);

	мсвПроводки = Новый Массив;	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		структураПроводка = Новый Структура;
		
		структураПроводка.Вставить("Период",Выборка.Период); 
		
		структураПроводка.Вставить("Организация",СформироватьУИДДляВыгрузки(Выборка.Организация));
		
		структураПроводка.Вставить("СчетДт",КодСчетаРегл(Выборка.СчетДт));
		структураПроводка.Вставить("СубконтоДт1","");
		структураПроводка.Вставить("ВидСубконтоДт1","");
		структураПроводка.Вставить("СубконтоДт2","");
		структураПроводка.Вставить("ВидСубконтоДт2","");
		структураПроводка.Вставить("СубконтоДт3","");
		структураПроводка.Вставить("ВидСубконтоДт3","");
		
		Если ЗначениеЗаполнено(Выборка.СубконтоДт1) Тогда			
			структураПроводка.ВидСубконтоДт1 = Выборка.СубконтоДт1.Метаданные().ПолноеИмя();			
			Если ОбщегоНазначения.ЭтоПеречисление(Выборка.СубконтоДт1.Метаданные()) Тогда
				структураПроводка.СубконтоДт1 = XMLСтрока(Выборка.СубконтоДт1);
			Иначе
				структураПроводка.СубконтоДт1 = СформироватьУИДДляВыгрузки(Выборка.СубконтоДт1);				
			КонецЕсли; 		
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.СубконтоДт2) Тогда			
			структураПроводка.ВидСубконтоДт2 = Выборка.СубконтоДт2.Метаданные().ПолноеИмя();			
			Если ОбщегоНазначения.ЭтоПеречисление(Выборка.СубконтоДт2.Метаданные()) Тогда
				структураПроводка.СубконтоДт2 = XMLСтрока(Выборка.СубконтоДт2);
			Иначе
				структураПроводка.СубконтоДт2 = СформироватьУИДДляВыгрузки(Выборка.СубконтоДт2);				
			КонецЕсли; 		
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.СубконтоДт3) Тогда			
			структураПроводка.ВидСубконтоДт3 = Выборка.СубконтоДт3.Метаданные().ПолноеИмя();			
			Если ОбщегоНазначения.ЭтоПеречисление(Выборка.СубконтоДт3.Метаданные()) Тогда
				структураПроводка.СубконтоДт3 = XMLСтрока(Выборка.СубконтоДт3);
			Иначе
				структураПроводка.СубконтоДт3 = СформироватьУИДДляВыгрузки(Выборка.СубконтоДт3);				
			КонецЕсли; 		
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(Выборка.ПодразделениеДт) Тогда
			структураПроводка.Вставить("ПодразделениеДт",СформироватьУИДДляВыгрузки(Выборка.ПодразделениеДт));
		Иначе     
			структураПроводка.Вставить("ПодразделениеДт","");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ВалютаДт) Тогда
			структураПроводка.Вставить("ВалютаДт",СформироватьУИДДляВыгрузки(Выборка.ВалютаДт));
		Иначе     
			структураПроводка.Вставить("ВалютаДт","");
		КонецЕсли;
		
		структураПроводка.Вставить("СчетКт",КодСчетаРегл(Выборка.СчетКт));
		структураПроводка.Вставить("СубконтоКт1","");
		структураПроводка.Вставить("ВидСубконтоКт1","");
		структураПроводка.Вставить("СубконтоКт2","");
		структураПроводка.Вставить("ВидСубконтоКт2","");
		структураПроводка.Вставить("СубконтоКт3","");
		структураПроводка.Вставить("ВидСубконтоКт3","");
		
		Если ЗначениеЗаполнено(Выборка.СубконтоКт1) Тогда			
			структураПроводка.ВидСубконтоКт1 = Выборка.СубконтоКт1.Метаданные().ПолноеИмя();			
			Если ОбщегоНазначения.ЭтоПеречисление(Выборка.СубконтоКт1.Метаданные()) Тогда
				структураПроводка.СубконтоКт1 = XMLСтрока(Выборка.СубконтоКт1);
			Иначе
				структураПроводка.СубконтоКт1 = СформироватьУИДДляВыгрузки(Выборка.СубконтоКт1);				
			КонецЕсли; 		
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.СубконтоКт2) Тогда			
			структураПроводка.ВидСубконтоКт2 = Выборка.СубконтоКт2.Метаданные().ПолноеИмя();			
			Если ОбщегоНазначения.ЭтоПеречисление(Выборка.СубконтоКт2.Метаданные()) Тогда
				структураПроводка.СубконтоКт2 = XMLСтрока(Выборка.СубконтоКт2);
			Иначе
				структураПроводка.СубконтоКт2 = СформироватьУИДДляВыгрузки(Выборка.СубконтоКт2);				
			КонецЕсли; 		
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.СубконтоКт3) Тогда			
			структураПроводка.ВидСубконтоКт3 = Выборка.СубконтоКт3.Метаданные().ПолноеИмя();			
			Если ОбщегоНазначения.ЭтоПеречисление(Выборка.СубконтоКт3.Метаданные()) Тогда
				структураПроводка.СубконтоКт3 = XMLСтрока(Выборка.СубконтоКт3);
			Иначе
				структураПроводка.СубконтоКт3 = СформироватьУИДДляВыгрузки(Выборка.СубконтоКт3);				
			КонецЕсли; 		
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(Выборка.ПодразделениеКт) Тогда
			структураПроводка.Вставить("ПодразделениеКт",СформироватьУИДДляВыгрузки(Выборка.ПодразделениеКт));
		Иначе     
			структураПроводка.Вставить("ПодразделениеКт","");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ВалютаКт) Тогда
			структураПроводка.Вставить("ВалютаКт",СформироватьУИДДляВыгрузки(Выборка.ВалютаКт));
		Иначе     
			структураПроводка.Вставить("ВалютаКт","");
		КонецЕсли;
		
		структураПроводка.Вставить("Сумма",Выборка.Сумма);
		структураПроводка.Вставить("ВалютнаяСуммаДт",Выборка.ВалютнаяСуммаДт);
		структураПроводка.Вставить("ВалютнаяСуммаКт",Выборка.ВалютнаяСуммаКт);
		структураПроводка.Вставить("КоличествоДт",Выборка.КоличествоДт);
		структураПроводка.Вставить("КоличествоКт",Выборка.КоличествоКт);
		структураПроводка.Вставить("СуммаНУДт",Выборка.СуммаНУДт);
		структураПроводка.Вставить("СуммаНУКт",Выборка.СуммаНУКт);
		структураПроводка.Вставить("СуммаПРДт",Выборка.СуммаПРДт);
		структураПроводка.Вставить("СуммаПРКт",Выборка.СуммаПРКт);
		структураПроводка.Вставить("СуммаВРДт",Выборка.СуммаВРДт);
		структураПроводка.Вставить("СуммаВРКт",Выборка.СуммаВРКт);
		структураПроводка.Вставить("Содержание",Выборка.Содержание);
		структураПроводка.Вставить("НеКорректироватьСтоимостьАвтоматически",Выборка.НеКорректироватьСтоимостьАвтоматически);
			
		мсвПроводки.Добавить(структураПроводка);
		
	КонецЦикла;
	
	Возврат мсвПроводки;
	
КонецФункции

#КонецОбласти

#Область Подписки_на_события

Процедура ОбменБух_ПриЗаписиДокументаПриЗаписи(Источник, Отказ) Экспорт 
	
	Если Отказ ИЛИ Источник.ОбменДанными.Загрузка Тогда 
		Возврат; 
	КонецЕсли; 
	
	ЗарегистрироватьИзменения(Источник);  
	
КонецПроцедуры   

Процедура ОбменБух_ПриЗаписиСправочникаПриЗаписи(Источник, Отказ) Экспорт 
	
	Если Отказ ИЛИ Источник.ОбменДанными.Загрузка Тогда 
		Возврат; 
	КонецЕсли; 
	
	ЗарегистрироватьИзменения(Источник);   
	
КонецПроцедуры

#КонецОбласти 

#Область ВыгрузкаСправочников     

Процедура ВыгрузитьВалюту(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок)
			
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("УИД", СформироватьУИДДляВыгрузки(СсылкаНаОбъект)); 
	СтруктураВыгрузки.Вставить("Представление", Строка(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("ТипОбъекта", "Валюта");	
	СтруктураВыгрузки.Вставить("Код", СсылкаНаОбъект.Код); 
	СтруктураВыгрузки.Вставить("Наименование", СсылкаНаОбъект.Наименование); 
	СтруктураВыгрузки.Вставить("НаименованиеПолное", СсылкаНаОбъект.НаименованиеПолное);
	СтруктураВыгрузки.Вставить("ПометкаУдаления", СсылкаНаОбъект.ПометкаУдаления);	
	СтруктураВыгрузки.Вставить("ЗагружаетсяИзИнтернета", СсылкаНаОбъект.ЗагружаетсяИзИнтернета);
	СтруктураВыгрузки.Вставить("СпособУстановкиКурса", XMLСтрока(СсылкаНаОбъект.СпособУстановкиКурса));
	СтруктураВыгрузки.Вставить("ПараметрыПрописи", СсылкаНаОбъект.ПараметрыПрописи);
	
	Если СсылкаНаОбъект.СпособУстановкиКурса = Перечисления.СпособыУстановкиКурсаВалюты.НаценкаНаКурсДругойВалюты Тогда
		СтруктураВыгрузки.Вставить("Наценка", СсылкаНаОбъект.Наценка);
		СтруктураВыгрузки.Вставить("ОсновнаяВалюта", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.ОсновнаяВалюта));
	ИначеЕсли СсылкаНаОбъект.СпособУстановкиКурса = Перечисления.СпособыУстановкиКурсаВалюты.РасчетПоФормуле Тогда     
		СтруктураВыгрузки.Вставить("ФормулаРасчетаКурса", СсылкаНаОбъект.ФормулаРасчетаКурса);
	КонецЕсли;	
	
	НовОб = ТаблицаВыгрузки.Добавить();
	НовОб.СсылкаНаОбъект = СсылкаНаОбъект;
	НовОб.СтруктураВыгрузки = СтруктураВыгрузки;
	
КонецПроцедуры

Процедура ВыгрузитьСклад(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок)
			
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("УИД", СформироватьУИДДляВыгрузки(СсылкаНаОбъект)); 
	СтруктураВыгрузки.Вставить("Представление", Строка(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("ТипОбъекта", "Склад");	
	СтруктураВыгрузки.Вставить("Наименование", СсылкаНаОбъект.Наименование); 
	СтруктураВыгрузки.Вставить("ПометкаУдаления", СсылкаНаОбъект.ПометкаУдаления);	
	СтруктураВыгрузки.Вставить("ЭтоГруппа", СсылкаНаОбъект.ЭтоГруппа);	
	
	Если Не СсылкаНаОбъект.ЭтоГруппа Тогда
		СтруктураВыгрузки.Вставить("ТипСклада", XMLСтрока(СсылкаНаОбъект.ТипСклада));	
	КонецЕсли;	
	
	СтруктураВыгрузки.Вставить("Родитель", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Родитель));
	
	НовОб = ТаблицаВыгрузки.Добавить();
	НовОб.СсылкаНаОбъект = СсылкаНаОбъект;
	НовОб.СтруктураВыгрузки = СтруктураВыгрузки;
	
КонецПроцедуры

Процедура ВыгрузитьОрганизацию(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок)
	
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("УИД", СформироватьУИДДляВыгрузки(СсылкаНаОбъект)); 
	СтруктураВыгрузки.Вставить("Представление", Строка(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("ТипОбъекта", "Организация");	
	СтруктураВыгрузки.Вставить("ПометкаУдаления", СсылкаНаОбъект.ПометкаУдаления); 
	СтруктураВыгрузки.Вставить("Наименование", СсылкаНаОбъект.Наименование);
	СтруктураВыгрузки.Вставить("НаименованиеПолное", СсылкаНаОбъект.НаименованиеПолное);
	СтруктураВыгрузки.Вставить("НаименованиеСокращенное", СсылкаНаОбъект.НаименованиеСокращенное);
	Если СсылкаНаОбъект.ГоловнаяОрганизация <> СсылкаНаОбъект Тогда
		СтруктураВыгрузки.Вставить("ГоловнаяОрганизация", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.ГоловнаяОрганизация));
	КонецЕсли;
	
	СтруктураВыгрузки.Вставить("КПП", СсылкаНаОбъект.КПП);
	СтруктураВыгрузки.Вставить("ИНН", СсылкаНаОбъект.ИНН);
	СтруктураВыгрузки.Вставить("КодНалоговогоОргана", СсылкаНаОбъект.КодНалоговогоОргана);
	СтруктураВыгрузки.Вставить("НаименованиеНалоговогоОргана", СсылкаНаОбъект.НаименованиеНалоговогоОргана); 	
	СтруктураВыгрузки.Вставить("ДополнительныйКодФСС", СсылкаНаОбъект.ДополнительныйКодФСС);
	СтруктураВыгрузки.Вставить("ЕстьОбособленныеПодразделения", СсылкаНаОбъект.ЕстьОбособленныеПодразделения);
	СтруктураВыгрузки.Вставить("ИндивидуальныйПредприниматель", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.ИндивидуальныйПредприниматель));
	Если ЗначениеЗаполнено(СсылкаНаОбъект.ИндивидуальныйПредприниматель) Тогда
		ВыгрузитьФизЛицо(СсылкаНаОбъект.ИндивидуальныйПредприниматель, ТаблицаВыгрузки, ОписаниеОшибок);  
	КонецЕсли;
	Если Не СсылкаНаОбъект.ИндивидуальныйПредприниматель.Пустая() Тогда
		СтруктураВыгрузки.Вставить("ФамилияИП", СсылкаНаОбъект.ИндивидуальныйПредприниматель.Фамилия);
		СтруктураВыгрузки.Вставить("ИмяИП", СсылкаНаОбъект.ИндивидуальныйПредприниматель.Имя);
		СтруктураВыгрузки.Вставить("ОтчествоИП", СсылкаНаОбъект.ИндивидуальныйПредприниматель.Отчество);
	КонецЕсли;	
	
	СтруктураВыгрузки.Вставить("ДатаРегистрации", СсылкаНаОбъект.ДатаРегистрации);
	СтруктураВыгрузки.Вставить("КодНалоговогоОрганаПолучателя", СсылкаНаОбъект.КодНалоговогоОрганаПолучателя); 
	СтруктураВыгрузки.Вставить("КодОрганаПФР", СсылкаНаОбъект.КодОрганаПФР);
	СтруктураВыгрузки.Вставить("РегистрационныйНомерПФР", СсылкаНаОбъект.РегистрационныйНомерПФР);
	СтруктураВыгрузки.Вставить("КодОрганаФСГС", СсылкаНаОбъект.КодОрганаФСГС); 
	СтруктураВыгрузки.Вставить("КодПоОКПО", СсылкаНаОбъект.КодПоОКПО);
	СтруктураВыгрузки.Вставить("КодПодчиненностиФСС", СсылкаНаОбъект.КодПодчиненностиФСС);
	
	СтруктураВыгрузки.Вставить("ИПРегистрационныйНомерПФР", СсылкаНаОбъект.ИПРегистрационныйНомерПФР);
	СтруктураВыгрузки.Вставить("КрупнейшийНалогоплательщик", СсылкаНаОбъект.КрупнейшийНалогоплательщик);
	СтруктураВыгрузки.Вставить("РегистрационныйНомерТФОМС", СсылкаНаОбъект.РегистрационныйНомерТФОМС);   
	СтруктураВыгрузки.Вставить("ИПРегистрационныйНомерТФОМС", СсылкаНаОбъект.ИПРегистрационныйНомерТФОМС);
	СтруктураВыгрузки.Вставить("НаименованиеТерриториальногоОрганаПФР", СсылкаНаОбъект.НаименованиеТерриториальногоОрганаПФР);
	СтруктураВыгрузки.Вставить("НаименованиеТерриториальногоОрганаФСС", СсылкаНаОбъект.НаименованиеТерриториальногоОрганаФСС);
	СтруктураВыгрузки.Вставить("РегистрационныйНомерФСС", СсылкаНаОбъект.РегистрационныйНомерФСС);
	СтруктураВыгрузки.Вставить("ИПРегистрационныйНомерФСС", СсылкаНаОбъект.ИПРегистрационныйНомерФСС);
	
	СтруктураВыгрузки.Вставить("ОбменКаталогОтправкиДанныхОтчетности", СсылкаНаОбъект.ОбменКаталогОтправкиДанныхОтчетности);
	СтруктураВыгрузки.Вставить("ОбменКаталогПрограммыЭлектроннойПочты", СсылкаНаОбъект.ОбменКаталогПрограммыЭлектроннойПочты);
	СтруктураВыгрузки.Вставить("КодОКОНХ", СсылкаНаОбъект.КодОКОНХ);
	СтруктураВыгрузки.Вставить("ОбменКодАбонента", СсылкаНаОбъект.ОбменКодАбонента);
	СтруктураВыгрузки.Вставить("ОГРН", СсылкаНаОбъект.ОГРН);
	СтруктураВыгрузки.Вставить("ПрименятьРайонныйКоэффициент", СсылкаНаОбъект.ПрименятьРайонныйКоэффициент);
	СтруктураВыгрузки.Вставить("ПрименятьСевернуюНадбавку", СсылкаНаОбъект.ПрименятьСевернуюНадбавку);
	СтруктураВыгрузки.Вставить("РайонныйКоэффициент", СсылкаНаОбъект.РайонныйКоэффициент);
	
	СтруктураВыгрузки.Вставить("Префикс", СсылкаНаОбъект.Префикс);
	СтруктураВыгрузки.Вставить("РегистрацияВНалоговомОргане", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.РегистрацияВНалоговомОргане)); 
	Если ЗначениеЗаполнено(СсылкаНаОбъект.РегистрацияВНалоговомОргане) Тогда
		ВыгрузитьРегистрациюВНалоговомОргане(СсылкаНаОбъект.РегистрацияВНалоговомОргане, ТаблицаВыгрузки, ОписаниеОшибок); 
	КонецЕсли;
	
	//СтруктураВыгрузки.Вставить("ВариантНаименованияДляПечатныхФорм", ""); //!! задавать при создании нового как сокращенное наименование
	СтруктураВыгрузки.Вставить("СвидетельствоДатаВыдачи", СсылкаНаОбъект.СвидетельствоДатаВыдачи);
	СтруктураВыгрузки.Вставить("СвидетельствоСерияНомер", СсылкаНаОбъект.СвидетельствоСерияНомер);
	СтруктураВыгрузки.Вставить("УчетнаяЗаписьОбмена", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.УчетнаяЗаписьОбмена));
	
	СтруктураВыгрузки.Вставить("ОбособленноеПодразделение", СсылкаНаОбъект.ОбособленноеПодразделение);
	СтруктураВыгрузки.Вставить("ЦифровойИндексОбособленногоПодразделения", СсылкаНаОбъект.ЦифровойИндексОбособленногоПодразделения);
	СтруктураВыгрузки.Вставить("КодОКВЭД", СсылкаНаОбъект.КодОКВЭД);
	СтруктураВыгрузки.Вставить("НаименованиеОКВЭД", СсылкаНаОбъект.НаименованиеОКВЭД);
	СтруктураВыгрузки.Вставить("КодОКВЭД2", СсылкаНаОбъект.КодОКВЭД2);
	СтруктураВыгрузки.Вставить("НаименованиеОКВЭД2", СсылкаНаОбъект.НаименованиеОКВЭД2);
	СтруктураВыгрузки.Вставить("КодОКОПФ", СсылкаНаОбъект.КодОКОПФ);
	СтруктураВыгрузки.Вставить("НаименованиеОКОПФ", СсылкаНаОбъект.НаименованиеОКОПФ);
	СтруктураВыгрузки.Вставить("КодОКВЭД", СсылкаНаОбъект.КодОКВЭД);
	СтруктураВыгрузки.Вставить("РайонныйКоэффициентРФ", СсылкаНаОбъект.РайонныйКоэффициентРФ);
	СтруктураВыгрузки.Вставить("КодОКФС", СсылкаНаОбъект.КодОКФС);
	СтруктураВыгрузки.Вставить("НаименованиеОКФС", СсылкаНаОбъект.НаименованиеОКФС);
	
	СтруктураВыгрузки.Вставить("ЮридическоеФизическоеЛицо", XMLСтрока(СсылкаНаОбъект.ЮридическоеФизическоеЛицо));
	
	КонтактнаяИнформация = Новый Массив;
	Для Каждого Стр Из СсылкаНаОбъект.КонтактнаяИнформация Цикл
		НСтр = Новый Структура;
		НСтр.Вставить("Тип", XMLСтрока(Стр.Тип));
		НСтр.Вставить("Вид", Стр.Вид.ИмяПредопределенныхДанных); 
		НСтр.Вставить("Представление", Стр.Представление);
		НСтр.Вставить("Значение", Стр.Значение);
		НСтр.Вставить("ЗначенияПолей", Стр.ЗначенияПолей);
		НСтр.Вставить("Страна", Стр.Страна);
		НСтр.Вставить("Регион", Стр.Регион);
		НСтр.Вставить("Город", Стр.Город);
		НСтр.Вставить("АдресЭП", Стр.АдресЭП);
		НСтр.Вставить("ДоменноеИмяСервера", Стр.ДоменноеИмяСервера);
		НСтр.Вставить("НомерТелефона", Стр.НомерТелефона);
		НСтр.Вставить("НомерТелефонаБезКодов", Стр.НомерТелефонаБезКодов);
		НСтр.Вставить("ВидДляСписка", Стр.ВидДляСписка.ИмяПредопределенныхДанных);
		//НСтр.Вставить("ДействуетС", Стр.ДействуетС); //!! нужна ли история по юр. адресу, + история по наименованию
		КонтактнаяИнформация.Добавить(НСтр);
	КонецЦикла;
	СтруктураВыгрузки.Вставить("КонтактнаяИнформация", КонтактнаяИнформация);
	
	//!!банковские счета?
	НовОб = ТаблицаВыгрузки.Добавить();
	НовОб.СсылкаНаОбъект = СсылкаНаОбъект;
	НовОб.СтруктураВыгрузки = СтруктураВыгрузки;	
	
КонецПроцедуры

Процедура ВыгрузитьОрганизациюКакКонтрагента(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок)
	
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("УИД", СформироватьУИДДляВыгрузки(СсылкаНаОбъект)); 
	СтруктураВыгрузки.Вставить("Представление", Строка(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("ТипОбъекта", "Контрагент");	
	СтруктураВыгрузки.Вставить("ПометкаУдаления", СсылкаНаОбъект.ПометкаУдаления); 
	СтруктураВыгрузки.Вставить("Наименование", СсылкаНаОбъект.Наименование);
	СтруктураВыгрузки.Вставить("НаименованиеПолное", СсылкаНаОбъект.НаименованиеПолное);
	СтруктураВыгрузки.Вставить("ОбособленноеПодразделение", СсылкаНаОбъект.ОбособленноеПодразделение);
	Если СсылкаНаОбъект.ГоловнаяОрганизация <> СсылкаНаОбъект Тогда 
		СтруктураВыгрузки.Вставить("ГоловнойКонтрагент", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.ГоловнаяОрганизация));
	КонецЕсли;	
	
	СтруктураВыгрузки.Вставить("КПП", СсылкаНаОбъект.КПП);
	СтруктураВыгрузки.Вставить("ИНН", СсылкаНаОбъект.ИНН);
	СтруктураВыгрузки.Вставить("КодПоОКПО", СсылкаНаОбъект.КодПоОКПО);
	//СтруктураВыгрузки.Вставить("ОсновнойБанковскийСчет", БанковскийСчет.УникальныйИдентификатор()); //!! нужно ли определять основной БС организации?
	
	СтруктураВыгрузки.Вставить("РегистрационныйНомер", СсылкаНаОбъект.ОГРН);
	СтруктураВыгрузки.Вставить("СвидетельствоСерияНомер", СсылкаНаОбъект.СвидетельствоСерияНомер);
	СтруктураВыгрузки.Вставить("СвидетельствоДатаВыдачи", СсылкаНаОбъект.СвидетельствоДатаВыдачи);
	СтруктураВыгрузки.Вставить("ЮридическоеФизическоеЛицо", XMLСтрока(СсылкаНаОбъект.ЮридическоеФизическоеЛицо));
	СтруктураВыгрузки.Вставить("СтранаРегистрации", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.СтранаРегистрации));
	
	КонтактнаяИнформация = Новый Массив;
	Для Каждого Стр Из СсылкаНаОбъект.КонтактнаяИнформация Цикл
		НСтр = Новый Структура;
		НСтр.Вставить("Тип", XMLСтрока(Стр.Тип));
		НСтр.Вставить("Вид", Стр.Вид.ИмяПредопределенныхДанных); 
		НСтр.Вставить("Представление", Стр.Представление);
		НСтр.Вставить("Значение", Стр.Значение);
		НСтр.Вставить("ЗначенияПолей", Стр.ЗначенияПолей);
		НСтр.Вставить("Страна", Стр.Страна);
		НСтр.Вставить("Регион", Стр.Регион);
		НСтр.Вставить("Город", Стр.Город);
		НСтр.Вставить("АдресЭП", Стр.АдресЭП);
		НСтр.Вставить("ДоменноеИмяСервера", Стр.ДоменноеИмяСервера);
		НСтр.Вставить("НомерТелефона", Стр.НомерТелефона);
		НСтр.Вставить("НомерТелефонаБезКодов", Стр.НомерТелефонаБезКодов);
		НСтр.Вставить("ВидДляСписка", Стр.ВидДляСписка.ИмяПредопределенныхДанных);
		//НСтр.Вставить("ДействуетС", Стр.ДействуетС); //!! нужна ли история по юр. адресу, + история по наименованию
		КонтактнаяИнформация.Добавить(НСтр);
	КонецЦикла;
	СтруктураВыгрузки.Вставить("КонтактнаяИнформация", КонтактнаяИнформация);
	
	//!!нужна ли история КПП, наименований и КИ
	
	НовОб = ТаблицаВыгрузки.Добавить();
	НовОб.СсылкаНаОбъект = СсылкаНаОбъект;
	НовОб.СтруктураВыгрузки = СтруктураВыгрузки;		
	
КонецПроцедуры

Процедура ВыгрузитьФизЛицо(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок)
			
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("УИД", СформироватьУИДДляВыгрузки(СсылкаНаОбъект)); 
	СтруктураВыгрузки.Вставить("Представление", Строка(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("ТипОбъекта", "ФизическоеЛицо");	
	СтруктураВыгрузки.Вставить("Наименование", СсылкаНаОбъект.Наименование); 
	СтруктураВыгрузки.Вставить("ПометкаУдаления", СсылкаНаОбъект.ПометкаУдаления);	
	СтруктураВыгрузки.Вставить("ЭтоГруппа", СсылкаНаОбъект.ЭтоГруппа);
	
	Если НЕ СсылкаНаОбъект.ЭтоГруппа Тогда
		СтруктураВыгрузки.Вставить("ДатаРождения", СсылкаНаОбъект.ДатаРождения); 
		СтруктураВыгрузки.Вставить("Пол", XMLСтрока(СсылкаНаОбъект.Пол)); 
		СтруктураВыгрузки.Вставить("ИНН", СсылкаНаОбъект.ИНН);	
		СтруктураВыгрузки.Вставить("СтраховойНомерПФР", СсылкаНаОбъект.СтраховойНомерПФР);
		СтруктураВыгрузки.Вставить("МестоРождения", СсылкаНаОбъект.МестоРождения);		
		СтруктураВыгрузки.Вставить("ФИО", СсылкаНаОбъект.ФИО);	
		СтруктураВыгрузки.Вставить("УточнениеНаименования", СсылкаНаОбъект.УточнениеНаименования);
		СтруктураВыгрузки.Вставить("ДатаРегистрации", СсылкаНаОбъект.ДатаРегистрации); 
		СтруктураВыгрузки.Вставить("НаименованиеСлужебное", СсылкаНаОбъект.НаименованиеСлужебное); 
		СтруктураВыгрузки.Вставить("ПостоянноПроживалВКрыму18Марта2014Года", СсылкаНаОбъект.ПостоянноПроживалВКрыму18Марта2014Года);
		СтруктураВыгрузки.Вставить("Фамилия", СсылкаНаОбъект.Фамилия);	
		СтруктураВыгрузки.Вставить("Имя", СсылкаНаОбъект.Имя);	
		СтруктураВыгрузки.Вставить("Отчество", СсылкаНаОбъект.Отчество);	
		СтруктураВыгрузки.Вставить("Инициалы", СсылкаНаОбъект.Инициалы);	
		СтруктураВыгрузки.Вставить("ЛьготаПриНачисленииПособий", XMLСтрока(СсылкаНаОбъект.ЛьготаПриНачисленииПособий));	
	КонецЕсли;	
	
	СтруктураВыгрузки.Вставить("Родитель", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Родитель));
	
	НовОб = ТаблицаВыгрузки.Добавить();
	НовОб.СсылкаНаОбъект = СсылкаНаОбъект;
	НовОб.СтруктураВыгрузки = СтруктураВыгрузки;
	
КонецПроцедуры

Процедура ВыгрузитьПользователя(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок)
			
КонецПроцедуры

//Процедура ВыгрузитьПодразделение 
//на какую организацию выгружать просто зарегистрированное подразделение - на пустую и тогда просто обновим все имеющие подразделения с владельцем,
//а для документов будем дозапрашивать выгрузку по конкретной организации при необходимости
Процедура ВыгрузитьПодразделение(СсылкаНаОбъект, Организация, ТаблицаВыгрузки, ОписаниеОшибок)
			
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("УИД", СформироватьУИДДляВыгрузки(СсылкаНаОбъект)); 
	СтруктураВыгрузки.Вставить("Представление", Строка(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("ТипОбъекта", "Подразделение");	
	СтруктураВыгрузки.Вставить("ПометкаУдаления", СсылкаНаОбъект.ПометкаУдаления); 
	СтруктураВыгрузки.Вставить("Наименование", СсылкаНаОбъект.Наименование);
	СтруктураВыгрузки.Вставить("Родитель", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Родитель));
	СтруктураВыгрузки.Вставить("ЭтоГруппа", СсылкаНаОбъект.ЭтоГруппа);
	
	СтруктураВыгрузки.Вставить("Организация", СформироватьУИДДляВыгрузки(Организация)); //преполагается, что организация уже выгружена раннее или пустая
	
	НовОб = ТаблицаВыгрузки.Добавить();
	НовОб.СсылкаНаОбъект = СсылкаНаОбъект;
	НовОб.СтруктураВыгрузки = СтруктураВыгрузки;
	
КонецПроцедуры

Процедура ВыгрузитьКонтрагента(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок)
			
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("УИД", СформироватьУИДДляВыгрузки(СсылкаНаОбъект)); 
	СтруктураВыгрузки.Вставить("Представление", Строка(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("ТипОбъекта", "Контрагент");	
	СтруктураВыгрузки.Вставить("ПометкаУдаления", СсылкаНаОбъект.ПометкаУдаления); 
	СтруктураВыгрузки.Вставить("Наименование", СсылкаНаОбъект.Наименование);
	СтруктураВыгрузки.Вставить("НаименованиеПолное", СсылкаНаОбъект.НаименованиеПолное);
	СтруктураВыгрузки.Вставить("ОбособленноеПодразделение", СсылкаНаОбъект.ОбособленноеПодразделение);
	Если СсылкаНаОбъект.ГоловнойКонтрагент <> СсылкаНаОбъект Тогда
		СтруктураВыгрузки.Вставить("ГоловнойКонтрагент", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.ГоловнойКонтрагент));
	КонецЕсли;
	СтруктураВыгрузки.Вставить("КПП", СсылкаНаОбъект.КПП);
	СтруктураВыгрузки.Вставить("ИНН", СсылкаНаОбъект.ИНН);
	СтруктураВыгрузки.Вставить("КодПоОКПО", СсылкаНаОбъект.КодПоОКПО);
	СтруктураВыгрузки.Вставить("РегистрационныйНомер", СсылкаНаОбъект.РегистрационныйНомер);
	СтруктураВыгрузки.Вставить("НалоговыйНомер", СсылкаНаОбъект.НалоговыйНомер);
	СтруктураВыгрузки.Вставить("ЮридическоеФизическоеЛицо", XMLСтрока(СсылкаНаОбъект.ЮридическоеФизическоеЛицо));
	СтруктураВыгрузки.Вставить("СтранаРегистрации", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.СтранаРегистрации));
	
	КонтактнаяИнформация = Новый Массив;
	Для Каждого Стр Из СсылкаНаОбъект.КонтактнаяИнформация Цикл
		НСтр = Новый Структура;
		НСтр.Вставить("Тип", XMLСтрока(Стр.Тип));
		НСтр.Вставить("Вид", Стр.Вид.ИмяПредопределенныхДанных); 
		НСтр.Вставить("Представление", Стр.Представление);
		НСтр.Вставить("Значение", Стр.Значение);
		НСтр.Вставить("ЗначенияПолей", Стр.ЗначенияПолей);
		НСтр.Вставить("Страна", Стр.Страна);
		НСтр.Вставить("Регион", Стр.Регион);
		НСтр.Вставить("Город", Стр.Город);
		НСтр.Вставить("АдресЭП", Стр.АдресЭП);
		НСтр.Вставить("ДоменноеИмяСервера", Стр.ДоменноеИмяСервера);
		НСтр.Вставить("НомерТелефона", Стр.НомерТелефона);
		НСтр.Вставить("НомерТелефонаБезКодов", Стр.НомерТелефонаБезКодов);
		НСтр.Вставить("ВидДляСписка", Стр.ВидДляСписка.ИмяПредопределенныхДанных);
		КонтактнаяИнформация.Добавить(НСтр);
	КонецЦикла;
	СтруктураВыгрузки.Вставить("КонтактнаяИнформация", КонтактнаяИнформация);
	
	НовОб = ТаблицаВыгрузки.Добавить();
	НовОб.СсылкаНаОбъект = СсылкаНаОбъект;
	НовОб.СтруктураВыгрузки = СтруктураВыгрузки;			
	
КонецПроцедуры

Процедура ВыгрузитьДоговор(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок)
		
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("УИД", СформироватьУИДДляВыгрузки(СсылкаНаОбъект));                              
	СтруктураВыгрузки.Вставить("ТипОбъекта", "Договор");    
	СтруктураВыгрузки.Вставить("Наименование", СсылкаНаОбъект.Наименование);   
	СтруктураВыгрузки.Вставить("ПометкаУдаления", СсылкаНаОбъект.ПометкаУдаления);  
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.ДоговорыЭквайринга") Тогда  
		СтруктураВыгрузки.Вставить("ВалютаВзаиморасчетов", "");
	Иначе
		СтруктураВыгрузки.Вставить("ВалютаВзаиморасчетов", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.ВалютаВзаиморасчетов));
	КонецЕсли;
	
	СтруктураВыгрузки.Вставить("Организация", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Организация)); 
	
	СтруктураВыгрузки.Вставить("Дата", СсылкаНаОбъект.Дата);   
	СтруктураВыгрузки.Вставить("Номер", СсылкаНаОбъект.Номер);   
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.ДоговорыМеждуОрганизациями") Тогда
		СтруктураВыгрузки.Вставить("ВидДоговора", "СПокупателем");
		СтруктураВыгрузки.Вставить("Контрагент", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.ОрганизацияПолучатель)); 
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.ДоговорыЭквайринга") Тогда  
		СтруктураВыгрузки.Вставить("ВидДоговора", "СПокупателем");
		СтруктураВыгрузки.Вставить("Контрагент", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Контрагент)); 
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.ДоговорыАренды") Тогда
		СтруктураВыгрузки.Вставить("ВидДоговора", "СПоставщиком");
		СтруктураВыгрузки.Вставить("Контрагент", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Контрагент));
	Иначе
		Если СсылкаНаОбъект.ТипДоговора = Перечисления.ТипыДоговоров.СПокупателем
			ИЛИ СсылкаНаОбъект.ТипДоговора = Перечисления.ТипыДоговоров.СПоставщиком
			ИЛИ СсылкаНаОбъект.ТипДоговора = Перечисления.ТипыДоговоров.СКомитентом
			ИЛИ СсылкаНаОбъект.ТипДоговора = Перечисления.ТипыДоговоров.СКомиссионером Тогда
			
			СтруктураВыгрузки.Вставить("ВидДоговора", XMLСтрока(СсылкаНаОбъект.ТипДоговора));
		Иначе     
			СтруктураВыгрузки.Вставить("ВидДоговора", "Прочее");
		КонецЕсли;  
		
		СтруктураВыгрузки.Вставить("Контрагент", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Контрагент)); 
		
		Если ТипЗнч(СсылкаНаОбъект) <> Тип("СправочникСсылка.ДоговорыАренды") Тогда
			СтруктураВыгрузки.Вставить("УчетАгентскогоНДС", СсылкаНаОбъект.УчетАгентскогоНДС); 
			СтруктураВыгрузки.Вставить("ВидАгентскогоДоговора", XMLСтрока(СсылкаНаОбъект.ВидАгентскогоДоговора)); 
		Иначе
			СтруктураВыгрузки.Вставить("УчетАгентскогоНДС", ""); 
			СтруктураВыгрузки.Вставить("ВидАгентскогоДоговора", ""); 
		КонецЕсли;
	КонецЕсли;  
	
	НовОб = ТаблицаВыгрузки.Добавить();
	НовОб.СсылкаНаОбъект = СсылкаНаОбъект;
	НовОб.СтруктураВыгрузки = СтруктураВыгрузки;      
	
КонецПроцедуры

Процедура ВыгрузитьРегистрациюВНалоговомОргане(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок)
		
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("УИД", СформироватьУИДДляВыгрузки(СсылкаНаОбъект)); 
	СтруктураВыгрузки.Вставить("Представление", Строка(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("ТипОбъекта", "РегистрацияВНалоговомОргане");		
	СтруктураВыгрузки.Вставить("Код", СсылкаНаОбъект.Код); 	
	СтруктураВыгрузки.Вставить("Наименование", СсылкаНаОбъект.Наименование); 	
	СтруктураВыгрузки.Вставить("ПометкаУдаления", СсылкаНаОбъект.ПометкаУдаления); 
	СтруктураВыгрузки.Вставить("Владелец", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Владелец));
	СтруктураВыгрузки.Вставить("ДокументПредставителя", СсылкаНаОбъект.ДокументПредставителя);
	СтруктураВыгрузки.Вставить("КодПоОКАТО", СсылкаНаОбъект.КодПоОКАТО);
	СтруктураВыгрузки.Вставить("КодПоОКТМО", СсылкаНаОбъект.КодПоОКТМО);
	СтруктураВыгрузки.Вставить("КПП", СсылкаНаОбъект.КПП);
	СтруктураВыгрузки.Вставить("КодРегиона", Лев(СсылкаНаОбъект.Код,2));
	СтруктураВыгрузки.Вставить("НаименованиеИФНС", СсылкаНаОбъект.НаименованиеИФНС);
	СтруктураВыгрузки.Вставить("НаименованиеОбособленногоПодразделения", СсылкаНаОбъект.НаименованиеОбособленногоПодразделения);
	СтруктураВыгрузки.Вставить("УполномоченноеЛицоПредставителя", СсылкаНаОбъект.УполномоченноеЛицоПредставителя);
	
	НовОб = ТаблицаВыгрузки.Добавить();
	НовОб.СсылкаНаОбъект = СсылкаНаОбъект;
	НовОб.СтруктураВыгрузки = СтруктураВыгрузки;				
	
КонецПроцедуры

Процедура ВыгрузитьУчетнуюЗаписьДокументооборота(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок)
			
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("УИД", СформироватьУИДДляВыгрузки(СсылкаНаОбъект)); 
	СтруктураВыгрузки.Вставить("Представление", Строка(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("ТипОбъекта", "УчетнаяЗаписьДокументооборота");		
	СтруктураВыгрузки.Вставить("Наименование", СсылкаНаОбъект.Наименование); 	
	СтруктураВыгрузки.Вставить("ПометкаУдаления", СсылкаНаОбъект.ПометкаУдаления); 
	
	СтруктураВыгрузки.Вставить("АдресЭлектроннойПочты", СсылкаНаОбъект.АдресЭлектроннойПочты); 	
	СтруктураВыгрузки.Вставить("ДатаПодключения", СсылкаНаОбъект.ДатаПодключения); 	
	СтруктураВыгрузки.Вставить("ИдентификаторАбонента", СсылкаНаОбъект.ИдентификаторАбонента); 	
	СтруктураВыгрузки.Вставить("ИдентификаторДокументооборота", СсылкаНаОбъект.ИдентификаторДокументооборота); 	
	СтруктураВыгрузки.Вставить("ИдентификаторСистемыОтправителяПФР", СсылкаНаОбъект.ИдентификаторСистемыОтправителяПФР); 	
	СтруктураВыгрузки.Вставить("ИдентификаторСистемыОтправителяФСГС", СсылкаНаОбъект.ИдентификаторСистемыОтправителяФСГС); 	
	СтруктураВыгрузки.Вставить("ИдентификаторСпецоператора", СсылкаНаОбъект.ИдентификаторСпецоператора); 	
	СтруктураВыгрузки.Вставить("ИмяПользователяPOP3", СсылкаНаОбъект.ИмяПользователяPOP3); 	
	СтруктураВыгрузки.Вставить("ИмяПользователяSMTP", СсылкаНаОбъект.ИмяПользователяSMTP); 	
	СтруктураВыгрузки.Вставить("ИННУполномоченногоПредставителя", СсылкаНаОбъект.ИННУполномоченногоПредставителя); 	
	СтруктураВыгрузки.Вставить("ИспользоватьСервисОнлайнПроверкиОтчетов", СсылкаНаОбъект.ИспользоватьСервисОнлайнПроверкиОтчетов); 	
	СтруктураВыгрузки.Вставить("ИспользуютсяСъемныеКлючевыеНосители", СсылкаНаОбъект.ИспользуютсяСъемныеКлючевыеНосители); 	
	СтруктураВыгрузки.Вставить("КППУполномоченногоПредставителя", СсылкаНаОбъект.КППУполномоченногоПредставителя); 	
	СтруктураВыгрузки.Вставить("ЛицензияДатаНачала", СсылкаНаОбъект.ЛицензияДатаНачала); 	
	СтруктураВыгрузки.Вставить("ЛицензияДатаОкончания", СсылкаНаОбъект.ЛицензияДатаОкончания); 	
	СтруктураВыгрузки.Вставить("ЛицензияНаименование", СсылкаНаОбъект.ЛицензияНаименование); 	
	СтруктураВыгрузки.Вставить("ЛицензияТребуетсяНапоминаниеОбОкончанииСрокаДействия", СсылкаНаОбъект.ЛицензияТребуетсяНапоминаниеОбОкончанииСрокаДействия); 	
	СтруктураВыгрузки.Вставить("НалоговыйОрган", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.НалоговыйОрган)); 	
	
	СтруктураВыгрузки.Вставить("ЕстьОшибкиСменыМоделиХраненияКлючей", СсылкаНаОбъект.ЕстьОшибкиСменыМоделиХраненияКлючей); 	
	СтруктураВыгрузки.Вставить("НеФормироватьПодтвержденияАвтоматически", СсылкаНаОбъект.НеФормироватьПодтвержденияАвтоматически); 	
	СтруктураВыгрузки.Вставить("ОбменНапрямую", СсылкаНаОбъект.ОбменНапрямую); 	
	СтруктураВыгрузки.Вставить("ОтключитьАвтообмен", СсылкаНаОбъект.ОтключитьАвтообмен); 	
	СтруктураВыгрузки.Вставить("ПарольPOP3", СсылкаНаОбъект.ПарольPOP3); 	
	СтруктураВыгрузки.Вставить("ПарольSMTP", СсылкаНаОбъект.ПарольSMTP); 	
	СтруктураВыгрузки.Вставить("ПолноеНаименованиеУполномоченногоПредставителя", СсылкаНаОбъект.ПолноеНаименованиеУполномоченногоПредставителя); 	
	СтруктураВыгрузки.Вставить("ПортPOP3", СсылкаНаОбъект.ПортPOP3); 	
	СтруктураВыгрузки.Вставить("ПортSMTP", СсылкаНаОбъект.ПортSMTP); 	
	СтруктураВыгрузки.Вставить("ПредназначенаДляДокументооборотаСПФР", СсылкаНаОбъект.ПредназначенаДляДокументооборотаСПФР); 	
	СтруктураВыгрузки.Вставить("ПредназначенаДляДокументооборотаСФНС", СсылкаНаОбъект.ПредназначенаДляДокументооборотаСФНС); 	
	СтруктураВыгрузки.Вставить("ПредназначенаДляДокументооборотаСФСГС", СсылкаНаОбъект.ПредназначенаДляДокументооборотаСФСГС); 	
	СтруктураВыгрузки.Вставить("РежимАвтонастройки", XMLСтрока(СсылкаНаОбъект.РежимАвтонастройки)); //!! проверить перечисления 	
	СтруктураВыгрузки.Вставить("СерверPOP3", СсылкаНаОбъект.СерверPOP3); 	
	СтруктураВыгрузки.Вставить("СерверSMTP", СсылкаНаОбъект.СерверSMTP); 	
	
	СтруктураВыгрузки.Вставить("СерверДокументооборота", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.СерверДокументооборота)); 	
	
	СтруктураВыгрузки.Вставить("СертификатГлавногоБухгалтера", СсылкаНаОбъект.СертификатГлавногоБухгалтера); 	
	СтруктураВыгрузки.Вставить("СертификатДляШифрования", СсылкаНаОбъект.СертификатДляШифрования); 	
	СтруктураВыгрузки.Вставить("СертификатРуководителя", СсылкаНаОбъект.СертификатРуководителя); 	
	СтруктураВыгрузки.Вставить("СпецоператорСвязи", XMLСтрока(СсылкаНаОбъект.СпецоператорСвязи)); //!! проверить перечисления
	СтруктураВыгрузки.Вставить("СтатусУчетнойЗаписи", XMLСтрока(СсылкаНаОбъект.СтатусУчетнойЗаписи)); //!! проверить перечисления	
	СтруктураВыгрузки.Вставить("ТелефонМобильныйДляАвторизации", СсылкаНаОбъект.ТелефонМобильныйДляАвторизации); 	
	СтруктураВыгрузки.Вставить("ТребуетсяSMTPАутентификация", СсылкаНаОбъект.ТребуетсяSMTPАутентификация); 	
	СтруктураВыгрузки.Вставить("ЭлектроннаяПодписьВМоделиСервиса", СсылкаНаОбъект.ЭлектроннаяПодписьВМоделиСервиса); 	
	СтруктураВыгрузки.Вставить("ЯвляетсяУчетнойЗаписьюУполномоченногоПредставителя", СсылкаНаОбъект.ЯвляетсяУчетнойЗаписьюУполномоченногоПредставителя); 	
	СтруктураВыгрузки.Вставить("ЛицензияДатаБлокировки", СсылкаНаОбъект.ЛицензияДатаБлокировки); 	
	СтруктураВыгрузки.Вставить("ОператорРегНомерПФР", СсылкаНаОбъект.ОператорРегНомерПФР); 	
	СтруктураВыгрузки.Вставить("ОператорНаименованиеПолное", СсылкаНаОбъект.ОператорНаименованиеПолное); 	
	СтруктураВыгрузки.Вставить("ОператорНаименованиеКраткое", СсылкаНаОбъект.ОператорНаименованиеКраткое); 	
	СтруктураВыгрузки.Вставить("ОператорИНН", СсылкаНаОбъект.ОператорИНН); 	
	СтруктураВыгрузки.Вставить("ОператорКПП", СсылкаНаОбъект.ОператорКПП); 	
	СтруктураВыгрузки.Вставить("МодельХраненияЗакрытогоКлюча", XMLСтрока(СсылкаНаОбъект.МодельХраненияЗакрытогоКлюча)); //!! проверить перечисления	
	
	СертификатыЛичные = Новый Массив;
	Для Каждого Стр Из СсылкаНаОбъект.СертификатыЛичные Цикл
		НСтр = Новый Структура;
		НСтр.Вставить("СерийныйНомер", Стр.СерийныйНомер);
		НСтр.Вставить("ПоставщикCN", Стр.ПоставщикCN);
		НСтр.Вставить("Отпечаток", Стр.Отпечаток);
		НСтр.Вставить("Содержимое", Base64Строка(Стр.Содержимое.Получить()));
		НСтр.Вставить("Текущий", Стр.Текущий);
		НСтр.Вставить("Криптопровайдер", XMLСтрока(Стр.Криптопровайдер)); //!! проверить перечисления
		
		СертификатыЛичные.Добавить(НСтр);		
	КонецЦикла;
	СтруктураВыгрузки.Вставить("СертификатыЛичные", СертификатыЛичные);
	
	СертификатыПрочие = Новый Массив;
	Для Каждого Стр Из СсылкаНаОбъект.СертификатыПрочие Цикл
		НСтр = Новый Структура;
		НСтр.Вставить("СерийныйНомер", Стр.СерийныйНомер);
		НСтр.Вставить("ПоставщикCN", Стр.ПоставщикCN);
		НСтр.Вставить("Отпечаток", Стр.Отпечаток);
		НСтр.Вставить("Содержимое", Base64Строка(Стр.Содержимое.Получить()));
		
		СертификатыПрочие.Добавить(НСтр);
	КонецЦикла;
	СтруктураВыгрузки.Вставить("СертификатыПрочие", СертификатыПрочие);
	
	СертификатыПФР = Новый Массив;
	Для Каждого Стр Из СсылкаНаОбъект.СертификатыПФР Цикл
		НСтр = Новый Структура;
		НСтр.Вставить("Сертификат", Стр.Сертификат); 
		СертификатыПФР.Добавить(НСтр);
	КонецЦикла;
	СтруктураВыгрузки.Вставить("СертификатыПФР", СертификатыПФР);	
	
	НовОб = ТаблицаВыгрузки.Добавить();
	НовОб.СсылкаНаОбъект = СсылкаНаОбъект;
	НовОб.СтруктураВыгрузки = СтруктураВыгрузки;			
	
КонецПроцедуры

Процедура ВыгрузитьСерверДокументооборота(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок)  
			
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("УИД", СформироватьУИДДляВыгрузки(СсылкаНаОбъект)); 
	СтруктураВыгрузки.Вставить("Представление", Строка(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("ТипОбъекта", "СерверДокументооборота");		
	СтруктураВыгрузки.Вставить("Наименование", СсылкаНаОбъект.Наименование); 	
	СтруктураВыгрузки.Вставить("ПометкаУдаления", СсылкаНаОбъект.ПометкаУдаления); 
	
	СтруктураВыгрузки.Вставить("АдресЭлектроннойПочтыФНС", СсылкаНаОбъект.АдресЭлектроннойПочтыФНС); 	
	СтруктураВыгрузки.Вставить("ДлительностьОжиданияСервера", СсылкаНаОбъект.ДлительностьОжиданияСервера); 	
	СтруктураВыгрузки.Вставить("Сертификат", СсылкаНаОбъект.Сертификат); 	
	СтруктураВыгрузки.Вставить("АдресЭлектроннойПочтыПФР", СсылкаНаОбъект.АдресЭлектроннойПочтыПФР); 	
	СтруктураВыгрузки.Вставить("АдресЭлектроннойПочтыФСГС", СсылкаНаОбъект.АдресЭлектроннойПочтыФСГС); 
	
	НовОб = ТаблицаВыгрузки.Добавить();
	НовОб.СсылкаНаОбъект = СсылкаНаОбъект;
	НовОб.СтруктураВыгрузки = СтруктураВыгрузки;
	
КонецПроцедуры	

Процедура ВыгрузитьНалоговыйОрган(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок)
			
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("УИД", СформироватьУИДДляВыгрузки(СсылкаНаОбъект)); 
	СтруктураВыгрузки.Вставить("Представление", Строка(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("ТипОбъекта", "НалоговыйОрган");		
	СтруктураВыгрузки.Вставить("Код", СсылкаНаОбъект.Код); 	
	СтруктураВыгрузки.Вставить("Наименование", СсылкаНаОбъект.Наименование); 	
	СтруктураВыгрузки.Вставить("ПометкаУдаления", СсылкаНаОбъект.ПометкаУдаления); 
	СтруктураВыгрузки.Вставить("Родитель", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Родитель));
	
	СтруктураВыгрузки.Вставить("ПолноеНаименование", СсылкаНаОбъект.ПолноеНаименование);
	СтруктураВыгрузки.Вставить("УчетНалогоплательщиков", СсылкаНаОбъект.УчетНалогоплательщиков);
	СтруктураВыгрузки.Вставить("ПриемНалоговойОтчетности", СсылкаНаОбъект.ПриемНалоговойОтчетности);
	СтруктураВыгрузки.Вставить("ИНН", СсылкаНаОбъект.ИНН);
	СтруктураВыгрузки.Вставить("КПП", СсылкаНаОбъект.КПП);
	СтруктураВыгрузки.Вставить("Адрес", СсылкаНаОбъект.Адрес);
	СтруктураВыгрузки.Вставить("Телефон", СсылкаНаОбъект.Телефон);
	СтруктураВыгрузки.Вставить("АдресЭлектроннойПочты", СсылкаНаОбъект.АдресЭлектроннойПочты);
	СтруктураВыгрузки.Вставить("АдресСайта", СсылкаНаОбъект.АдресСайта);
	СтруктураВыгрузки.Вставить("Комментарий", СсылкаНаОбъект.Комментарий);
	СтруктураВыгрузки.Вставить("АдресЭлектроннойПочтыДляЦелейДокументооборотаСНалогоплательщиками", СсылкаНаОбъект.АдресЭлектроннойПочтыДляЦелейДокументооборотаСНалогоплательщиками);
	
	Сертификаты = Новый Массив;
	Для Каждого Стр Из СсылкаНаОбъект.Сертификаты Цикл
		НСтр = Новый Структура;
		НСтр.Вставить("Сертификат", Стр.Сертификат);
		Сертификаты.Добавить(НСтр);
	КонецЦикла;
	СтруктураВыгрузки.Вставить("Сертификаты", Сертификаты);
	
	НовОб = ТаблицаВыгрузки.Добавить();
	НовОб.СсылкаНаОбъект = СсылкаНаОбъект;
	НовОб.СтруктураВыгрузки = СтруктураВыгрузки;				
	
КонецПроцедуры	

Процедура ВыгрузитьСтрану(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок)
			
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("УИД", СформироватьУИДДляВыгрузки(СсылкаНаОбъект)); 
	СтруктураВыгрузки.Вставить("Представление", Строка(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("ТипОбъекта", "Страна");		
	СтруктураВыгрузки.Вставить("Код", СсылкаНаОбъект.Код); 
	СтруктураВыгрузки.Вставить("Наименование", СсылкаНаОбъект.Наименование); 
	СтруктураВыгрузки.Вставить("ПометкаУдаления", СсылкаНаОбъект.ПометкаУдаления);	
	СтруктураВыгрузки.Вставить("НаименованиеПолное", СсылкаНаОбъект.НаименованиеПолное);
	СтруктураВыгрузки.Вставить("КодАльфа2", СсылкаНаОбъект.КодАльфа2);
	СтруктураВыгрузки.Вставить("КодАльфа3", СсылкаНаОбъект.КодАльфа3);
	СтруктураВыгрузки.Вставить("УчастникЕАЭС", СсылкаНаОбъект.УчастникЕАЭС);
	СтруктураВыгрузки.Вставить("МеждународноеНаименование", СсылкаНаОбъект.МеждународноеНаименование);
	
	НовОб = ТаблицаВыгрузки.Добавить();
	НовОб.СсылкаНаОбъект = СсылкаНаОбъект;
	НовОб.СтруктураВыгрузки = СтруктураВыгрузки;			
	
КонецПроцедуры

Процедура ВыгрузитьБанковскийСчет(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок, ВыгружатьКакБСКонтрагента = Ложь)
	
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("УИД", СформироватьУИДДляВыгрузки(СсылкаНаОбъект)); 		
	СтруктураВыгрузки.Вставить("ТипОбъекта", "БанковскийСчет");		
	СтруктураВыгрузки.Вставить("Наименование", СсылкаНаОбъект.Наименование);
	СтруктураВыгрузки.Вставить("Владелец", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Владелец));
	СтруктураВыгрузки.Вставить("ПометкаУдаления", СсылкаНаОбъект.ПометкаУдаления);	
	Если ТипЗнч(СсылкаНаОбъект.Владелец) = Тип("СправочникСсылка.Организации") И НЕ ВыгружатьКакБСКонтрагента Тогда //!! надо определять при запросе доп.объекта
		СтруктураВыгрузки.Вставить("ТипВладельца", "Организация");
		СчетаУчета = Новый Массив;
		СчетаУчета.Добавить("ДенежныеСредства");
		АналитикаУчета = СсылкаНаОбъект;		
		СтруктураСчета = РегистрыСведений.ПорядокОтраженияНаСчетахУчета.СтруктураЗначенийПоАналитикеУчета(АналитикаУчета, СчетаУчета);	
		СтруктураВыгрузки.Вставить("СчетБанк", СтруктураСчета.СчетУчета_ДенежныеСредства.КодБыстрогоВыбора);
	Иначе	  
		СтруктураВыгрузки.Вставить("ТипВладельца", "Контрагент");
		СтруктураВыгрузки.Вставить("ГосударственныйКонтракт", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.ГосударственныйКонтракт));
	КонецЕсли;	
	
	СтруктураВыгрузки.Вставить("НомерСчета", СсылкаНаОбъект.НомерСчета);
	СтруктураВыгрузки.Вставить("Банк", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Банк));
	СтруктураВыгрузки.Вставить("ВалютаДенежныхСредств", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.ВалютаДенежныхСредств));
	СтруктураВыгрузки.Вставить("БанкДляРасчетов", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.БанкДляРасчетов));
	СтруктураВыгрузки.Вставить("ТекстКорреспондента", СсылкаНаОбъект.ТекстКорреспондента);
	СтруктураВыгрузки.Вставить("ТекстНазначения", СсылкаНаОбъект.ТекстНазначения);
	
	НовОб = ТаблицаВыгрузки.Добавить();
	НовОб.СсылкаНаОбъект = СсылкаНаОбъект;
	НовОб.СтруктураВыгрузки = СтруктураВыгрузки;			
	
КонецПроцедуры   

Процедура ВыгрузитьКлассификаторБанковКакБанк(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок)
			
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("УИД", СформироватьУИДДляВыгрузки(СсылкаНаОбъект)); 
	СтруктураВыгрузки.Вставить("Представление", Строка(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("ТипОбъекта", "Банк");		
	СтруктураВыгрузки.Вставить("Код", СсылкаНаОбъект.Код); 
	СтруктураВыгрузки.Вставить("Наименование", СсылкаНаОбъект.Наименование); 
	СтруктураВыгрузки.Вставить("ПометкаУдаления", СсылкаНаОбъект.ПометкаУдаления);	
	СтруктураВыгрузки.Вставить("Родитель", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Родитель));
	СтруктураВыгрузки.Вставить("ЭтоГруппа", СсылкаНаОбъект.ЭтоГруппа);
	Если Не СсылкаНаОбъект.ЭтоГруппа Тогда
		СтруктураВыгрузки.Вставить("КоррСчет", СсылкаНаОбъект.КоррСчет);
		СтруктураВыгрузки.Вставить("Город", СсылкаНаОбъект.Город);
		СтруктураВыгрузки.Вставить("Адрес", СсылкаНаОбъект.Адрес);
		СтруктураВыгрузки.Вставить("Телефоны", СсылкаНаОбъект.Телефоны);
		СтруктураВыгрузки.Вставить("СВИФТБИК", СсылкаНаОбъект.СВИФТБИК);
		СтруктураВыгрузки.Вставить("Страна", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Страна));
		
		Если СсылкаНаОбъект.ДеятельностьПрекращена Тогда
			СтруктураВыгрузки.Вставить("РучноеИзменение", 3);
		Иначе 
			СтруктураВыгрузки.Вставить("РучноеИзменение", 0); //!! при загрузке ставить 0, только если раньше было 3 или элемент новый, иначе брать предыдущее значение
		КонецЕсли;
	КонецЕсли;
	
	НовОб = ТаблицаВыгрузки.Добавить();
	НовОб.СсылкаНаОбъект = СсылкаНаОбъект;
	НовОб.СтруктураВыгрузки = СтруктураВыгрузки;			
	
КонецПроцедуры   

Процедура ВыгрузитьКлассификаторБанковКакКлассификаторБанка(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок)
			
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("УИД", СформироватьУИДДляВыгрузки(СсылкаНаОбъект)); 
	СтруктураВыгрузки.Вставить("Представление", Строка(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("ТипОбъекта", "КлассификаторБанка");		
	СтруктураВыгрузки.Вставить("Код", СсылкаНаОбъект.Код); 
	СтруктураВыгрузки.Вставить("Наименование", СсылкаНаОбъект.Наименование); 
	СтруктураВыгрузки.Вставить("ПометкаУдаления", СсылкаНаОбъект.ПометкаУдаления);	
	СтруктураВыгрузки.Вставить("Родитель", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Родитель));
	СтруктураВыгрузки.Вставить("ЭтоГруппа", СсылкаНаОбъект.ЭтоГруппа);
	Если Не СсылкаНаОбъект.ЭтоГруппа Тогда
		СтруктураВыгрузки.Вставить("КоррСчет", СсылкаНаОбъект.КоррСчет);
		СтруктураВыгрузки.Вставить("Город", СсылкаНаОбъект.Город);
		СтруктураВыгрузки.Вставить("Адрес", СсылкаНаОбъект.Адрес);
		СтруктураВыгрузки.Вставить("Телефоны", СсылкаНаОбъект.Телефоны);
		СтруктураВыгрузки.Вставить("СВИФТБИК", СсылкаНаОбъект.СВИФТБИК);
		СтруктураВыгрузки.Вставить("Страна", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Страна));
		
		Если СсылкаНаОбъект.ДеятельностьПрекращена Тогда
			СтруктураВыгрузки.Вставить("РучноеИзменение", 3);
		Иначе 
			СтруктураВыгрузки.Вставить("РучноеИзменение", 0); //!! при загрузке ставить 0, только если раньше было 3 или элемент новый, иначе брать предыдущее значение
		КонецЕсли;
	КонецЕсли;
	
	НовОб = ТаблицаВыгрузки.Добавить();
	НовОб.СсылкаНаОбъект = СсылкаНаОбъект;
	НовОб.СтруктураВыгрузки = СтруктураВыгрузки;			
	
КонецПроцедуры

Процедура ВыгрузитьНоменклатуру(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок)
		
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("УИД", СформироватьУИДДляВыгрузки(СсылкаНаОбъект)); 
	СтруктураВыгрузки.Вставить("Представление", Строка(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("ТипОбъекта", "Номенклатура");		
	СтруктураВыгрузки.Вставить("Код", СсылкаНаОбъект.Код); 
	СтруктураВыгрузки.Вставить("Наименование", СсылкаНаОбъект.Наименование); 
	СтруктураВыгрузки.Вставить("ПометкаУдаления", СсылкаНаОбъект.ПометкаУдаления);	
	СтруктураВыгрузки.Вставить("Родитель", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Родитель));
	
	СтруктураВыгрузки.Вставить("ЭтоГруппа", СсылкаНаОбъект.ЭтоГруппа);
	
	Если Не СсылкаНаОбъект.ЭтоГруппа Тогда
		СтруктураВыгрузки.Вставить("ТипНоменклатуры", XMLСтрока(СсылкаНаОбъект.ТипНоменклатуры));
		СтруктураВыгрузки.Вставить("ЕдиницаИзмерения", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.ЕдиницаИзмерения));
		
		СтруктураВыгрузки.Вставить("Артикул", СсылкаНаОбъект.Артикул);
		СтруктураВыгрузки.Вставить("НаименованиеПолное", СсылкаНаОбъект.НаименованиеПолное);
		СтруктураВыгрузки.Вставить("КодВидаНоменклатурнойКлассификации", СсылкаНаОбъект.КодВидаНоменклатурнойКлассификации);
		СтруктураВыгрузки.Вставить("ПрослеживаемыйТовар", СсылкаНаОбъект.ПрослеживаемыйТовар);
		
		СтруктураВыгрузки.Вставить("СтавкаНДС",XMLСтрока(СсылкаНаОбъект.СтавкаНДС.ПеречислениеСтавкаНДС));
	КонецЕсли;	
	
	НовОб = ТаблицаВыгрузки.Добавить();
	НовОб.СсылкаНаОбъект = СсылкаНаОбъект;
	НовОб.СтруктураВыгрузки = СтруктураВыгрузки;			
	
КонецПроцедуры
 
Процедура ВыгрузитьЕдиницуИзмерения(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок)
//(пока) только для единиц базового набора 
			
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("УИД", СформироватьУИДДляВыгрузки(СсылкаНаОбъект)); 
	СтруктураВыгрузки.Вставить("Представление", Строка(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("ТипОбъекта", "ЕдиницаИзмерения");		
	СтруктураВыгрузки.Вставить("Код", СсылкаНаОбъект.Код); 
	СтруктураВыгрузки.Вставить("Наименование", СсылкаНаОбъект.Наименование); 
	СтруктураВыгрузки.Вставить("НаименованиеПолное", СсылкаНаОбъект.НаименованиеПолное); 
	СтруктураВыгрузки.Вставить("ПометкаУдаления", СсылкаНаОбъект.ПометкаУдаления);	
	
	НовОб = ТаблицаВыгрузки.Добавить();
	НовОб.СсылкаНаОбъект = СсылкаНаОбъект;
	НовОб.СтруктураВыгрузки = СтруктураВыгрузки;
	
КонецПроцедуры	

Процедура ВыгрузитьСтатьюРасходов(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок)
	//!! пока только для выгрузки остатков по субконто Расходы будущих периодов
			
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("УИД", СформироватьУИДДляВыгрузки(СсылкаНаОбъект)); 
	СтруктураВыгрузки.Вставить("Представление", Строка(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("Наименование", СсылкаНаОбъект.Наименование); 
	СтруктураВыгрузки.Вставить("ПометкаУдаления", СсылкаНаОбъект.ПометкаУдаления);	
	
	ГруппаФинУчетаРегл = СсылкаНаОбъект.ГруппаФинансовогоУчетаРегл;
	Если ЗначениеЗаполнено(ГруппаФинУчетаРегл) Тогда
		СчетУчета = ПолучитьСчетУчетаИзНастроек(Перечисления.ВидыСчетовРеглУчета.Расходы, Неопределено, ГруппаФинУчетаРегл, Неопределено);
	Иначе
		СчетУчета = Неопределено;
	КонецЕсли;
	
	Если СсылкаНаОбъект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов Тогда 
		СтруктураВыгрузки.Вставить("ТипОбъекта", "РасходыБудущихПериодов");
		СтруктураВыгрузки.Вставить("ВидРБП", XMLСтрока(СсылкаНаОбъект.ВидРБП));
		СтруктураВыгрузки.Вставить("СпособПризнанияРасходов", "ПоМесяцам");
		СтруктураВыгрузки.Вставить("СчетЗатрат", "4401");
		СтруктураВыгрузки.Вставить("ВидАктива", XMLСтрока(СсылкаНаОбъект.ВидАктива));
	//Самойлов А.С. Начало 2022-09-27 #	
	ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.ИздержкиОбращения
	ИЛИ СчетУчета = ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы
	ИЛИ СчетУчета = ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств Тогда 
		СтруктураВыгрузки.Вставить("ТипОбъекта", "СтатьяЗатрат");
		Если ЗначениеЗаполнено(СсылкаНаОбъект.ВидРасходов) Тогда
			СтруктураВыгрузки.Вставить("ВидРасходовНУ", XMLСтрока(СсылкаНаОбъект.ВидРасходов));		
		КонецЕсли;
	//Самойлов А.С. Конец  2022-09-27	
	//Самойлов А.С. Начало 2022-10-11 #
	ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.ПрочиеРасходы Тогда
		СтруктураВыгрузки.Вставить("ТипОбъекта", "ПрочиеДоходыИРасходы"); 	
		СтруктураВыгрузки.Вставить("ПринятиеКНалоговомуУчету", СсылкаНаОбъект.ПринятиеКНалоговомуУчету);	
		СтруктураВыгрузки.Вставить("ВидПрочихДоходовИРасходов", XMLСтрока(СсылкаНаОбъект.ВидПрочихДоходовИРасходов));
		СтруктураВыгрузки.Вставить("ВидДеятельностиДляНалоговогоУчетаЗатрат", XMLСтрока(СсылкаНаОбъект.ВидДеятельностиДляНалоговогоУчетаЗатрат));
	//Самойлов А.С. Конец  2022-10-11
	Иначе	
	КонецЕсли;	
	
	НовОб = ТаблицаВыгрузки.Добавить();
	НовОб.СсылкаНаОбъект = СсылкаНаОбъект;
	НовОб.СтруктураВыгрузки = СтруктураВыгрузки;
	
КонецПроцедуры

Процедура ВыгрузитьСтатьюДоходов(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок)
	
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("УИД", СформироватьУИДДляВыгрузки(СсылкаНаОбъект)); 
	СтруктураВыгрузки.Вставить("ТипОбъекта", "ПрочиеДоходыИРасходы"); //!!	
	СтруктураВыгрузки.Вставить("Представление", Строка(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("Наименование", СсылкаНаОбъект.Наименование); 
	СтруктураВыгрузки.Вставить("ПометкаУдаления", СсылкаНаОбъект.ПометкаУдаления);	
	СтруктураВыгрузки.Вставить("ПринятиеКНалоговомуУчету", СсылкаНаОбъект.ПринятиеКНалоговомуУчету);	
	СтруктураВыгрузки.Вставить("ВидПрочихДоходовИРасходов", XMLСтрока(СсылкаНаОбъект.ВидПрочихДоходовИРасходов));
	СтруктураВыгрузки.Вставить("ВидДеятельностиДляНалоговогоУчетаЗатрат", XMLСтрока(СсылкаНаОбъект.ВидДеятельностиДляНалоговогоУчетаЗатрат));
	
	НовОб = ТаблицаВыгрузки.Добавить();
	НовОб.СсылкаНаОбъект = СсылкаНаОбъект;
	НовОб.СтруктураВыгрузки = СтруктураВыгрузки;
	
КонецПроцедуры

Процедура ВыгрузитьРезервыОценочныеОбязательства(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок)
		
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("УИД", СформироватьУИДДляВыгрузки(СсылкаНаОбъект)); 
	СтруктураВыгрузки.Вставить("Представление", Строка(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("ТипОбъекта", "Резервы");	
	СтруктураВыгрузки.Вставить("Наименование", СсылкаНаОбъект.Наименование); 
	СтруктураВыгрузки.Вставить("ПометкаУдаления", СсылкаНаОбъект.ПометкаУдаления);	
	
	НовОб = ТаблицаВыгрузки.Добавить();
	НовОб.СсылкаНаОбъект = СсылкаНаОбъект;
	НовОб.СтруктураВыгрузки = СтруктураВыгрузки;				
	
КонецПроцедуры	

Процедура ВыгрузитьЦенныеБумаги(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок)
			
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("УИД", СформироватьУИДДляВыгрузки(СсылкаНаОбъект)); 
	СтруктураВыгрузки.Вставить("Представление", Строка(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("ТипОбъекта", "ЦенныеБумаги");	
	СтруктураВыгрузки.Вставить("Наименование", СсылкаНаОбъект.Наименование); 
	СтруктураВыгрузки.Вставить("ПометкаУдаления", СсылкаНаОбъект.ПометкаУдаления);	
	СтруктураВыгрузки.Вставить("ЭтоГруппа", СсылкаНаОбъект.ЭтоГруппа);
	СтруктураВыгрузки.Вставить("Родитель", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Родитель));
	
	НовОб = ТаблицаВыгрузки.Добавить();
	НовОб.СсылкаНаОбъект = СсылкаНаОбъект;
	НовОб.СтруктураВыгрузки = СтруктураВыгрузки;				
	
КонецПроцедуры	

Процедура ВыгрузитьСтатьюДДС(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок)
			
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("УИД", СформироватьУИДДляВыгрузки(СсылкаНаОбъект)); 
	СтруктураВыгрузки.Вставить("Представление", Строка(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("ТипОбъекта", "СтатьяДДС");		
	СтруктураВыгрузки.Вставить("Наименование", СсылкаНаОбъект.Наименование); 
	СтруктураВыгрузки.Вставить("ИмяПредопределенныхДанных", СсылкаНаОбъект.ИмяПредопределенныхДанных);
	СтруктураВыгрузки.Вставить("ЭтоГруппа", СсылкаНаОбъект.ЭтоГруппа); 
	СтруктураВыгрузки.Вставить("ПометкаУдаления", СсылкаНаОбъект.ПометкаУдаления);	
	СтруктураВыгрузки.Вставить("Родитель", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Родитель));
	
	Если Не СсылкаНаОбъект.ЭтоГруппа Тогда
		СтруктураВыгрузки.Вставить("ВидДвиженияДенежныхСредств", XMLСтрока(СсылкаНаОбъект.ВидДвиженияДенежныхСредств));
	КонецЕсли;	
	
	НовОб = ТаблицаВыгрузки.Добавить();
	НовОб.СсылкаНаОбъект = СсылкаНаОбъект;
	НовОб.СтруктураВыгрузки = СтруктураВыгрузки;			
	
КонецПроцедуры

Процедура ВыгрузитьОбъектЭксплуатации(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок)
			
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("УИД", СформироватьУИДДляВыгрузки(СсылкаНаОбъект));  
	СтруктураВыгрузки.Вставить("Представление", Строка(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("ТипОбъекта", "ОбъектЭксплуатации");	
	СтруктураВыгрузки.Вставить("ПометкаУдаления", СсылкаНаОбъект.ПометкаУдаления);  
	СтруктураВыгрузки.Вставить("ЭтоГруппа", СсылкаНаОбъект.ЭтоГруппа); 
	СтруктураВыгрузки.Вставить("Родитель", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Родитель));   
	
	СтруктураВыгрузки.Вставить("Наименование", СсылкаНаОбъект.Наименование);  
	СтруктураВыгрузки.Вставить("Код", СсылкаНаОбъект.Код);  
	СтруктураВыгрузки.Вставить("ТипОС", XMLСтрока(СсылкаНаОбъект.ТипОС));  
	СтруктураВыгрузки.Вставить("ГруппаОС", XMLСтрока(СсылкаНаОбъект.ГруппаОС));  
	СтруктураВыгрузки.Вставить("ДатаВыпуска", СсылкаНаОбъект.ДатаВыпуска);  
	СтруктураВыгрузки.Вставить("ЗаводскойНомер", СсылкаНаОбъект.ЗаводскойНомер);  
	СтруктураВыгрузки.Вставить("Изготовитель", СсылкаНаОбъект.Изготовитель);  
	СтруктураВыгрузки.Вставить("ИнвентарныйНомер", СсылкаНаОбъект.ИнвентарныйНомер);  
	СтруктураВыгрузки.Вставить("КодПоОКОФ", СсылкаНаОбъект.КодПоОКОФ.Код);  
	СтруктураВыгрузки.Вставить("Комментарий", СсылкаНаОбъект.Комментарий);  
	СтруктураВыгрузки.Вставить("НаименованиеПолное", СсылкаНаОбъект.НаименованиеПолное);  
	СтруктураВыгрузки.Вставить("НомерПаспорта", СсылкаНаОбъект.НомерПаспорта);  
	СтруктураВыгрузки.Вставить("СтатьяРасходов", XMLСтрока(СсылкаНаОбъект.СтатьяРасходов)); //ПланВидовХарактеристикСсылка.СтатьиРасходов	
	СтруктураВыгрузки.Вставить("УдалитьАмортизационнаяГруппа", XMLСтрока(СсылкаНаОбъект.УдалитьАмортизационнаяГруппа)); //ПланВидовХарактеристикСсылка.СтатьиРасходов	
	//
	НовОб = ТаблицаВыгрузки.Добавить();
	НовОб.СсылкаНаОбъект = СсылкаНаОбъект;
	НовОб.СтруктураВыгрузки = СтруктураВыгрузки;				
	
КонецПроцедуры

Процедура ВыгрузитьОбъектСтроительства(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок)
			
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("УИД", СформироватьУИДДляВыгрузки(СсылкаНаОбъект));  
	СтруктураВыгрузки.Вставить("Представление", Строка(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("ТипОбъекта", "ОбъектСтроительства");	
	СтруктураВыгрузки.Вставить("Код", СсылкаНаОбъект.Код);  
	СтруктураВыгрузки.Вставить("Наименование", СсылкаНаОбъект.Наименование);  
	СтруктураВыгрузки.Вставить("ПометкаУдаления", СсылкаНаОбъект.ПометкаУдаления);  
	СтруктураВыгрузки.Вставить("ЭтоГруппа", СсылкаНаОбъект.ЭтоГруппа);  
	СтруктураВыгрузки.Вставить("Родитель", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Родитель));   

	НовОб = ТаблицаВыгрузки.Добавить();
	НовОб.СсылкаНаОбъект = СсылкаНаОбъект;
	НовОб.СтруктураВыгрузки = СтруктураВыгрузки;				
	
КонецПроцедуры  

Процедура ВыгрузитьНематериальныйАктив(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок)
			
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("УИД", СформироватьУИДДляВыгрузки(СсылкаНаОбъект));  
	СтруктураВыгрузки.Вставить("Представление", Строка(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("ТипОбъекта", "НематериальныйАктив");	
	СтруктураВыгрузки.Вставить("Код", СсылкаНаОбъект.Код);  
	СтруктураВыгрузки.Вставить("Наименование", СсылкаНаОбъект.Наименование);  
	СтруктураВыгрузки.Вставить("НаименованиеПолное", СсылкаНаОбъект.НаименованиеПолное);  
	СтруктураВыгрузки.Вставить("ПометкаУдаления", СсылкаНаОбъект.ПометкаУдаления);  
	СтруктураВыгрузки.Вставить("ЭтоГруппа", СсылкаНаОбъект.ЭтоГруппа);  
	СтруктураВыгрузки.Вставить("ВидНМА", XMLСтрока(СсылкаНаОбъект.ВидНМА));  
	СтруктураВыгрузки.Вставить("Родитель", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Родитель));   

	НовОб = ТаблицаВыгрузки.Добавить();
	НовОб.СсылкаНаОбъект = СсылкаНаОбъект;
	НовОб.СтруктураВыгрузки = СтруктураВыгрузки;				
	
КонецПроцедуры

Процедура ВыгрузитьСотрудника(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок)
	
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("УИД", СформироватьУИДДляВыгрузки(СсылкаНаОбъект)); 
	СтруктураВыгрузки.Вставить("Представление", Строка(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("ТипОбъекта", "Сотрудник");	
	СтруктураВыгрузки.Вставить("Код", СсылкаНаОбъект.Код); 
	СтруктураВыгрузки.Вставить("Наименование", СсылкаНаОбъект.Наименование); 
	СтруктураВыгрузки.Вставить("ПометкаУдаления", СсылкаНаОбъект.ПометкаУдаления);	
	СтруктураВыгрузки.Вставить("ТекущийПроцентСевернойНадбавки", СсылкаНаОбъект.ТекущийПроцентСевернойНадбавки);
	СтруктураВыгрузки.Вставить("ВАрхиве", СсылкаНаОбъект.ВАрхиве);
	СтруктураВыгрузки.Вставить("УточнениеНаименования", СсылкаНаОбъект.УточнениеНаименования);
	СтруктураВыгрузки.Вставить("ФизическоеЛицо", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.ФизическоеЛицо));
	СтруктураВыгрузки.Вставить("ГоловнаяОрганизация", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.ГоловнаяОрганизация));
	
	Если СсылкаНаОбъект.ГоловнойСотрудник <> СсылкаНаОбъект Тогда
		СтруктураВыгрузки.Вставить("ГоловнойСотрудник", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.ГоловнойСотрудник));
	КонецЕсли;	
	
	НовОб = ТаблицаВыгрузки.Добавить();
	НовОб.СсылкаНаОбъект = СсылкаНаОбъект;
	НовОб.СтруктураВыгрузки = СтруктураВыгрузки;
	
КонецПроцедуры	 

Процедура ВыгрузитьЗарплатныйПроект(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок)
	
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("УИД", СформироватьУИДДляВыгрузки(СсылкаНаОбъект)); 
	СтруктураВыгрузки.Вставить("Представление", Строка(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("ТипОбъекта", "ЗарплатныйПроект");
	СтруктураВыгрузки.Вставить("Код", СсылкаНаОбъект.Код); 
	СтруктураВыгрузки.Вставить("Наименование", СсылкаНаОбъект.Наименование); 
	СтруктураВыгрузки.Вставить("ПометкаУдаления", СсылкаНаОбъект.ПометкаУдаления);
	СтруктураВыгрузки.Вставить("ЭтоГруппа", СсылкаНаОбъект.ЭтоГруппа);

	СтруктураВыгрузки.Вставить("Валюта", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Валюта));
	СтруктураВыгрузки.Вставить("ИспользоватьЭлектронныйДокументооборотСБанком", СсылкаНаОбъект.ИспользоватьЭлектронныйДокументооборотСБанком);
	//Банк
	СтруктураВыгрузки.Вставить("Банк", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Банк));  
	//Договор
	СтруктураВыгрузки.Вставить("НомерДоговора", СсылкаНаОбъект.НомерДоговора);
	СтруктураВыгрузки.Вставить("ДатаДоговора", СсылкаНаОбъект.ДатаДоговора); 
	
	СтруктураВыгрузки.Вставить("Организация", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Организация));
	СтруктураВыгрузки.Вставить("ОтделениеБанка", СсылкаНаОбъект.ОтделениеБанка);
	СтруктураВыгрузки.Вставить("РасчетныйСчет", СсылкаНаОбъект.РасчетныйСчет);
	СтруктураВыгрузки.Вставить("ФилиалОтделенияБанка", СсылкаНаОбъект.ФилиалОтделенияБанка); 
	СтруктураВыгрузки.Вставить("ФорматФайла", XMLСтрока(СсылкаНаОбъект.ФорматФайла)); 
	СтруктураВыгрузки.Вставить("МаксимальнаяДлинаИмениДержателяКарты", СсылкаНаОбъект.МаксимальнаяДлинаИмениДержателяКарты);
	
	//ТЧ: СистемыРасчетовПоБанковскимКартам   
	СистемыРасчетовПоБанковскимКартам = Новый Массив; 
	
	Для каждого СистемаРасчетов из СсылкаНаОбъект.СистемыРасчетовПоБанковскимКартам Цикл    
		НСтр = Новый Структура;
		НСтр.Вставить("СистемаРасчетовПоБанковскимКартам", СистемаРасчетов.СистемаРасчетовПоБанковскимКартам);
				
		СистемыРасчетовПоБанковскимКартам.Добавить(НСтр);  
	КонецЦикла;
	
	СтруктураВыгрузки.Вставить("СистемыРасчетовПоБанковскимКартам", СистемыРасчетовПоБанковскимКартам);   
	
	НовОб = ТаблицаВыгрузки.Добавить();
	НовОб.СсылкаНаОбъект = СсылкаНаОбъект;
	НовОб.СтруктураВыгрузки = СтруктураВыгрузки;  
	
КонецПроцедуры 

Процедура ВыгрузитьСпособыВыплатыЗарплаты(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок) 
	
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("УИД", СформироватьУИДДляВыгрузки(СсылкаНаОбъект)); 
	СтруктураВыгрузки.Вставить("Представление", Строка(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("ТипОбъекта", "СпособВыплатыЗарплаты");
	СтруктураВыгрузки.Вставить("Код", СсылкаНаОбъект.Код); 
	СтруктураВыгрузки.Вставить("Наименование", СсылкаНаОбъект.Наименование); 
	СтруктураВыгрузки.Вставить("ПометкаУдаления", СсылкаНаОбъект.ПометкаУдаления);
	СтруктураВыгрузки.Вставить("ЭтоГруппа", СсылкаНаОбъект.ЭтоГруппа);	
	//
	СтруктураВыгрузки.Вставить("Поставляемый", СсылкаНаОбъект.Поставляемый);
	СтруктураВыгрузки.Вставить("ХарактерВыплаты", XMLСтрока(СсылкаНаОбъект.ХарактерВыплаты));
	СтруктураВыгрузки.Вставить("СпособПолучения", XMLСтрока(СсылкаНаОбъект.СпособПолучения));
	СтруктураВыгрузки.Вставить("СтатьяРасходов", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.СтатьяРасходов));
	СтруктураВыгрузки.Вставить("ОкончательныйРасчетНДФЛ", СсылкаНаОбъект.ОкончательныйРасчетНДФЛ);
	СтруктураВыгрузки.Вставить("Округление", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Округление)); 
	
	НовОб = ТаблицаВыгрузки.Добавить();
	НовОб.СсылкаНаОбъект = СсылкаНаОбъект;
	НовОб.СтруктураВыгрузки = СтруктураВыгрузки;  
		
КонецПроцедуры  

Процедура ВыгрузитьСпособОкругленияПриРасчетеЗарплаты(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок)
	
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("УИД", СформироватьУИДДляВыгрузки(СсылкаНаОбъект)); 
	СтруктураВыгрузки.Вставить("Представление", Строка(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("ТипОбъекта", "СпособОкругленияПриРасчетеЗарплаты");
	СтруктураВыгрузки.Вставить("Код", СсылкаНаОбъект.Код); 
	СтруктураВыгрузки.Вставить("Наименование", СсылкаНаОбъект.Наименование); 
	СтруктураВыгрузки.Вставить("ПометкаУдаления", СсылкаНаОбъект.ПометкаУдаления);  
	СтруктураВыгрузки.Вставить("ЭтоГруппа", СсылкаНаОбъект.ЭтоГруппа);
	
	СтруктураВыгрузки.Вставить("Точность", СсылкаНаОбъект.Точность);
	СтруктураВыгрузки.Вставить("ПравилоОкругления", XMLСтрока(СсылкаНаОбъект.ПравилоОкругления)); 
	
	НовОб = ТаблицаВыгрузки.Добавить();
	НовОб.СсылкаНаОбъект = СсылкаНаОбъект;
	НовОб.СтруктураВыгрузки = СтруктураВыгрузки;  

КонецПроцедуры 

Процедура ВыгрузитьСтатьюРасходовЗарплата(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок)
	
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("УИД", СформироватьУИДДляВыгрузки(СсылкаНаОбъект)); 
	СтруктураВыгрузки.Вставить("Представление", Строка(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("ТипОбъекта", "СтатьяРасходовЗарплата");
	СтруктураВыгрузки.Вставить("Код", СсылкаНаОбъект.Код); 
	СтруктураВыгрузки.Вставить("Наименование", СсылкаНаОбъект.Наименование); 
	СтруктураВыгрузки.Вставить("ПометкаУдаления", СсылкаНаОбъект.ПометкаУдаления); 
	СтруктураВыгрузки.Вставить("Родитель", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Родитель));
	СтруктураВыгрузки.Вставить("ЭтоГруппа", СсылкаНаОбъект.ЭтоГруппа);
	
	СтруктураВыгрузки.Вставить("СпособРасчетовСФизическимиЛицами", XMLСтрока(СсылкаНаОбъект.СпособРасчетовСФизическимиЛицами));  
	
	НовОб = ТаблицаВыгрузки.Добавить();
	НовОб.СсылкаНаОбъект = СсылкаНаОбъект;
	НовОб.СтруктураВыгрузки = СтруктураВыгрузки;  
	
КонецПроцедуры 

Процедура ВыгрузитьДолжность(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок)
	
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("УИД", СформироватьУИДДляВыгрузки(СсылкаНаОбъект)); 
	СтруктураВыгрузки.Вставить("Представление", Строка(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("ТипОбъекта", "Должность");
	СтруктураВыгрузки.Вставить("Код", СсылкаНаОбъект.Код); 
	СтруктураВыгрузки.Вставить("Наименование", СсылкаНаОбъект.Наименование); 
	СтруктураВыгрузки.Вставить("ПометкаУдаления", СсылкаНаОбъект.ПометкаУдаления); 
	СтруктураВыгрузки.Вставить("ЭтоГруппа", СсылкаНаОбъект.ЭтоГруппа);   
	
	НовОб = ТаблицаВыгрузки.Добавить();
	НовОб.СсылкаНаОбъект = СсылкаНаОбъект;
	НовОб.СтруктураВыгрузки = СтруктураВыгрузки;  
	
КонецПроцедуры

Процедура ВыгрузитьВидДоходовНДФЛ(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок)
	
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("УИД", СформироватьУИДДляВыгрузки(СсылкаНаОбъект)); 
	СтруктураВыгрузки.Вставить("Представление", Строка(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("ТипОбъекта", "ВидДоходовНДФЛ");
	СтруктураВыгрузки.Вставить("Код", СсылкаНаОбъект.Код); 
	СтруктураВыгрузки.Вставить("Наименование", СсылкаНаОбъект.Наименование); 
	СтруктураВыгрузки.Вставить("ПометкаУдаления", СсылкаНаОбъект.ПометкаУдаления);  
	СтруктураВыгрузки.Вставить("ЭтоГруппа", СсылкаНаОбъект.ЭтоГруппа);
	
	СтруктураВыгрузки.Вставить("СтавкаНалогообложенияРезидента", XMLСтрока(СсылкаНаОбъект.СтавкаНалогообложенияРезидента));
	СтруктураВыгрузки.Вставить("НеОблагаетсяУНалоговогоАгента", СсылкаНаОбъект.НеОблагаетсяУНалоговогоАгента);      
	
	СтруктураВыгрузки.Вставить("КодПрименяемыйВНалоговойОтчетностиС2010Года", СсылкаНаОбъект.КодПрименяемыйВНалоговойОтчетностиС2010Года);
	СтруктураВыгрузки.Вставить("КодПрименяемыйВНалоговойОтчетностиС2021Года", СсылкаНаОбъект.КодПрименяемыйВНалоговойОтчетностиС2021Года);
	
	СтруктураВыгрузки.Вставить("ВычетРассчитываетсяАвтоматически", СсылкаНаОбъект.ВычетРассчитываетсяАвтоматически);
	СтруктураВыгрузки.Вставить("ВычетПоУмолчанию", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.ВычетПоУмолчанию)); 
	СтруктураВыгрузки.Вставить("ИмеетЕдинственныйВычет", СсылкаНаОбъект.ИмеетЕдинственныйВычет);
	СтруктураВыгрузки.Вставить("СоответствуетОплатеТруда", СсылкаНаОбъект.СоответствуетОплатеТруда); 
	
	НовОб = ТаблицаВыгрузки.Добавить();
	НовОб.СсылкаНаОбъект = СсылкаНаОбъект;
	НовОб.СтруктураВыгрузки = СтруктураВыгрузки;  
		
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаДокументов

Процедура ВыгрузитьАвансовыйОтчет(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок)
	
	Если СсылкаНаОбъект.СуммаИзрасходовано = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("УИД", СформироватьУИДДляВыгрузки(СсылкаНаОбъект)); 
	СтруктураВыгрузки.Вставить("ТипОбъекта", "АвансовыйОтчет");
	СтруктураВыгрузки.Вставить("Номер", СсылкаНаОбъект.Номер); 
	СтруктураВыгрузки.Вставить("Дата", СсылкаНаОбъект.Дата);
	СтруктураВыгрузки.Вставить("Проведен", СсылкаНаОбъект.Проведен);
	СтруктураВыгрузки.Вставить("Представление", Строка(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("ПометкаУдаления", СсылкаНаОбъект.ПометкаУдаления);
	СтруктураВыгрузки.Вставить("ВидОперации", "ПокупкаОплатаПрочее");
	СтруктураВыгрузки.Вставить("Склад", "");
	СтруктураВыгрузки.Вставить("Организация", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Организация));
	СтруктураВыгрузки.Вставить("ПодразделениеОрганизации", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Подразделение));
	СтруктураВыгрузки.Вставить("ФизЛицо", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.ПодотчетноеЛицо));
	СтруктураВыгрузки.Вставить("ВалютаДокумента", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Валюта));
	СтруктураВыгрузки.Вставить("КурсЧислитель", 1);
	СтруктураВыгрузки.Вставить("КурсЗнаменатель", 1);
	СтруктураВыгрузки.Вставить("ЦенаВключаетНДС", СсылкаНаОбъект.ЦенаВключаетНДС);
	СтруктураВыгрузки.Вставить("Комментарий", СсылкаНаОбъект.Комментарий);  
	СтруктураВыгрузки.Вставить("НазначениеАванса", "");
	СтруктураВыгрузки.Вставить("КоличествоДокументов", "");
	СтруктураВыгрузки.Вставить("КоличествоЛистов", "");
				
	мсвТЧОплатаПоставщикам = Новый Массив;
	мсвТЧПрочее = Новый Массив;
	
	Для Каждого стрОплатаПоставщикам Из СсылкаНаОбъект.ОплатаПоставщикам Цикл
		
		структураСтрока = Новый Структура;
		структураСтрока.Вставить("Контрагент", СформироватьУИДДляВыгрузки(стрОплатаПоставщикам.Контрагент));
		Если ЗначениеЗаполнено(стрОплатаПоставщикам.ОбъектРасчетов.Договор) Тогда
			структураСтрока.Вставить("ДоговорКонтрагента", СформироватьУИДДляВыгрузки(стрОплатаПоставщикам.ОбъектРасчетов.Договор));
		Иначе
			структураСтрока.Вставить("ДоговорКонтрагента", "");
		КонецЕсли;
		структураСтрока.Вставить("Сумма",стрОплатаПоставщикам.Сумма);
		структураСтрока.Вставить("СуммаВзаиморасчетов",стрОплатаПоставщикам.СуммаВзаиморасчетов);		
				
		мсвТЧОплатаПоставщикам.Добавить(структураСтрока);
				
	КонецЦикла;
	
	Для Каждого стрПрочиеРасходы Из СсылкаНаОбъект.ПрочиеРасходы Цикл
		
		структураСтрока = Новый Структура;  
		
		структураСтрока.Вставить("Сумма",стрПрочиеРасходы.Сумма);
		структураСтрока.Вставить("СтавкаНДС",XMLСтрока(стрПрочиеРасходы.СтавкаНДС.ПеречислениеСтавкаНДС)); 
		структураСтрока.Вставить("СуммаНДС",стрПрочиеРасходы.СуммаНДС);
		структураСтрока.Вставить("СуммаСНДС",стрПрочиеРасходы.СуммаСНДС); 
		
		СчетУчета = ПолучитьСчетУчетаИзНастроек(Перечисления.ВидыСчетовРеглУчета.Расходы,СсылкаНаОбъект.Организация,стрПрочиеРасходы.СтатьяРасходов.ГруппаФинансовогоУчетаРегл,Неопределено);
		структураСтрока.Вставить("СчетУчета",КодСчетаРегл(СчетУчета));		
		структураСтрока.Вставить("СтатьяРасходов",СформироватьУИДДляВыгрузки(стрПрочиеРасходы.СтатьяРасходов));
		структураСтрока.Вставить("ПодразделениеЗатрат","");
		Если ТипЗнч(стрПрочиеРасходы.АналитикаРасходов) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
			структураСтрока.ПодразделениеЗатрат = СформироватьУИДДляВыгрузки(стрПрочиеРасходы.АналитикаРасходов);		
		КонецЕсли; 		
		
		мсвТЧПрочее.Добавить(структураСтрока);
		
	КонецЦикла;
	
	СтруктураВыгрузки.Вставить("Прочее",мсвТЧПрочее);
	СтруктураВыгрузки.Вставить("ОплатаПоставщикам",мсвТЧОплатаПоставщикам);
	
	НовОб = ТаблицаВыгрузки.Добавить();
	НовОб.СсылкаНаОбъект = СсылкаНаОбъект;
	НовОб.СтруктураВыгрузки = СтруктураВыгрузки;
	
КонецПроцедуры	

Процедура ВыгрузитьВнутреннееПотреблениеТоваров(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок) 
			
	Если СсылкаНаОбъект.Пустая() Тогда
		Возврат;
	КонецЕсли;	
	
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("УИД", СформироватьУИДДляВыгрузки(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("Представление", Строка(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("ТипОбъекта", "ТребованиеНакладная");		
	СтруктураВыгрузки.Вставить("ПометкаУдаления", СсылкаНаОбъект.ПометкаУдаления);	
	СтруктураВыгрузки.Вставить("Проведен", СсылкаНаОбъект.Проведен);	
		
	СтруктураВыгрузки.Вставить("Номер", СсылкаНаОбъект.Номер); 
	СтруктураВыгрузки.Вставить("Дата", СсылкаНаОбъект.Дата);
	
	СтруктураВыгрузки.Вставить("Организация", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Организация));
	СтруктураВыгрузки.Вставить("Склад", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Склад));
	СтруктураВыгрузки.Вставить("Подразделение", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Подразделение));
	СтруктураВыгрузки.Вставить("Комментарий", СсылкаНаОбъект.Комментарий);  
	
	СтруктураВыгрузки.Вставить("СчетаУчетаЗатратВТаблице",Истина);
	
	СтруктураВыгрузки.Вставить("СчетУчета","");
	СтруктураВыгрузки.Вставить("Субконто1","");
			
	//Заглушка по старым арендным товарам
	ЗапросАрендаСч41 = Новый Запрос;
	ЗапросАрендаСч41.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК Номенклатура
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			,
	|			,
	|			Регистратор = &Документ
	|			И СчетКт = Значение(ПланСчетов.Хозрасчетный.ТоварыНаСкладах)
	|			И СубконтоКт1.ГруппаФинансовогоУчета = &ГруппаФинансовогоУчета
	|			,
	|			,
	|			) КАК ХозрасчетныйДвиженияССубконто
	|";        
	
	ЗапросАрендаСч41.УстановитьПараметр("Документ",СсылкаНаОбъект); 
	ЗапросАрендаСч41.УстановитьПараметр("ГруппаФинансовогоУчета",Справочники.ГруппыФинансовогоУчетаНоменклатуры.НайтиПоНаименованию("Аренда инструмента"));
	мсвНоменклатураАрендыСч41 = ЗапросАрендаСч41.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВнутреннееПотреблениеТоваровТовары.Ссылка КАК Ссылка,
	|	ВнутреннееПотреблениеТоваровТовары.Номенклатура КАК Номенклатура,
	|	ВнутреннееПотреблениеТоваровТовары.СтатьяРасходов КАК СтатьяРасходов,
	|	ВнутреннееПотреблениеТоваровТовары.АналитикаРасходов КАК АналитикаРасходов,
	|	ВнутреннееПотреблениеТоваровТовары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	МИНИМУМ(ВнутреннееПотреблениеТоваровТовары.НомерСтроки) КАК НомерСтроки,
	|	СУММА(ВнутреннееПотреблениеТоваровТовары.Количество) КАК Количество
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	Документ.ВнутреннееПотреблениеТоваров.Товары КАК ВнутреннееПотреблениеТоваровТовары
	|ГДЕ
	|	ВнутреннееПотреблениеТоваровТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВнутреннееПотреблениеТоваровТовары.Ссылка,
	|	ВнутреннееПотреблениеТоваровТовары.Номенклатура,
	|	ВнутреннееПотреблениеТоваровТовары.СтатьяРасходов,
	|	ВнутреннееПотреблениеТоваровТовары.АналитикаРасходов,
	|	ВнутреннееПотреблениеТоваровТовары.АналитикаУчетаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВнутреннееПотреблениеТоваровТовары.Номенклатура КАК Номенклатура,
	|	ВнутреннееПотреблениеТоваровТовары.СтатьяРасходов КАК СтатьяРасходов,
	|	ВнутреннееПотреблениеТоваровТовары.АналитикаРасходов КАК АналитикаРасходов,
	|	ЕСТЬNULL(ТоварыОрганизаций.НомерГТД, Значение(Справочник.НомераГТД.ПустаяСсылка)) КАК НомерГТД,
	|	ЕСТЬNULL(ТоварыОрганизаций.Количество, ВнутреннееПотреблениеТоваровТовары.Количество) КАК Количество
	|ИЗ
	|	втТовары КАК ВнутреннееПотреблениеТоваровТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыОрганизаций КАК ТоварыОрганизаций
	|		ПО (ВнутреннееПотреблениеТоваровТовары.Ссылка = ТоварыОрганизаций.Регистратор)
	|			И (ВнутреннееПотреблениеТоваровТовары.АналитикаУчетаНоменклатуры = ТоварыОрганизаций.АналитикаУчетаНоменклатуры)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВнутреннееПотреблениеТоваровТовары.НомерСтроки
	|";
	
	Запрос.УстановитьПараметр("Ссылка",СсылкаНаОбъект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	мсвТовары = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		структураСтрокаТовары = Новый Структура;
		структураСтрокаТовары.Вставить("Номенклатура",СформироватьУИДДляВыгрузки(Выборка.Номенклатура));
		структураСтрокаТовары.Вставить("Количество",Выборка.Количество);
			
		структураНомерГТД = Новый Структура("СтранаПроисхождения, Код, ПометкаУдаления, РегистрационныйНомер, СтранаВвозаНеРФ");
		ЗаполнитьЗначенияСвойств(структураНомерГТД, Выборка.НомерГТД);
		структураНомерГТД.СтранаПроисхождения = СформироватьУИДДляВыгрузки(Выборка.НомерГТД.СтранаПроисхождения);
		структураСтрокаТовары.Вставить("НомерГТД", структураНомерГТД);
		
		структураСтрокаТовары.Вставить("СчетУчета","");
		структураСтрокаТовары.Вставить("СчетУчетаНДС",""); 
		
		Если мсвНоменклатураАрендыСч41.Найти(Выборка.Номенклатура) <> Неопределено Тогда
			структураСтрокаТовары.СчетУчета = КодСчетаРегл(ПланыСчетов.Хозрасчетный.ТоварыНаСкладах);		
		КонецЕсли;
		
		ГруппаФинУчета = Выборка.СтатьяРасходов.ГруппаФинансовогоУчетаРегл;
		СчетЗатрат = ПолучитьСчетУчетаИзНастроек(Перечисления.ВидыСчетовРеглУчета.Расходы,СсылкаНаОбъект.Организация,ГруппаФинУчета,СсылкаНаОбъект.Склад);	
		
		структураСтрокаТовары.Вставить("СчетЗатрат", КодСчетаРегл(СчетЗатрат));
		структураСтрокаТовары.Вставить("СтатьяЗатрат", СформироватьУИДДляВыгрузки(Выборка.СтатьяРасходов));
				
		мсвТовары.Добавить(структураСтрокаТовары);
		
	КонецЦикла;
	
	СтруктураВыгрузки.Вставить("Материалы",мсвТовары);
	
	НовОб = ТаблицаВыгрузки.Добавить();
	НовОб.СсылкаНаОбъект = СсылкаНаОбъект;
	НовОб.СтруктураВыгрузки = СтруктураВыгрузки;	
	
КонецПроцедуры	

Процедура ВыгрузитьВзаимозачетЗадолженности(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок)
	
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("УИД", СформироватьУИДДляВыгрузки(СсылкаНаОбъект)); 
	СтруктураВыгрузки.Вставить("Представление", Строка(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("ТипОбъекта", "ВзаимозачетЗадолженности");
	СтруктураВыгрузки.Вставить("Номер", СсылкаНаОбъект.Номер); 
	СтруктураВыгрузки.Вставить("Дата", СсылкаНаОбъект.Дата);
	СтруктураВыгрузки.Вставить("Проведен", СсылкаНаОбъект.Проведен);	
	СтруктураВыгрузки.Вставить("ПометкаУдаления", СсылкаНаОбъект.ПометкаУдаления); 
	
	СтруктураВыгрузки.Вставить("Организация", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Организация));
	СтруктураВыгрузки.Вставить("Подразделение", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Подразделение));
	СтруктураВыгрузки.Вставить("Валюта", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Валюта));
	СтруктураВыгрузки.Вставить("КонтрагентДебитор", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.КонтрагентДебитор));
	СтруктураВыгрузки.Вставить("КонтрагентКредитор", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.КонтрагентКредитор));
	СтруктураВыгрузки.Вставить("Комментарий", СсылкаНаОбъект.Комментарий);
	СтруктураВыгрузки.Вставить("ВидОперации", XMLСтрока(СсылкаНаОбъект.ВидОперации)); 	
	//
	ДебиторскаяЗадолженность = Новый Массив; 
	Для каждого Стр Из СсылкаНаОбъект.ДебиторскаяЗадолженность Цикл  
		НСтр = Новый Структура;
		НСтр.Вставить("ОбъектРасчетов", СформироватьУИДДляВыгрузки(Стр.ОбъектРасчетов.Объект));
		НСтр.Вставить("Сумма", Стр.Сумма);
		НСтр.Вставить("СуммаВзаиморасчетов", Стр.СуммаВзаиморасчетов);  
		НСтр.Вставить("ТипРасчетов", XMLСтрока(Стр.ТипРасчетов));  
		
		Если Стр.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком Тогда
			НСтр.Вставить("СчетУчетаРасчетов", КодСчетаРегл(ПолучитьСчетУчетаИзНастроек(Перечисления.ВидыСчетовРеглУчета.РасчетыСПоставщиками, СсылкаНаОбъект.Организация, Стр.ОбъектРасчетов.Объект.ГруппаФинансовогоУчета, Стр.ОбъектРасчетов.Объект.Склад)));
		ИначеЕсли Стр.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом Тогда
			НСтр.Вставить("СчетУчетаРасчетов", КодСчетаРегл(ПолучитьСчетУчетаИзНастроек(Перечисления.ВидыСчетовРеглУчета.РасчетыСКлиентами, СсылкаНаОбъект.Организация, Стр.ОбъектРасчетов.Объект.ГруппаФинансовогоУчета, Стр.ОбъектРасчетов.Объект.Склад)));
		КонецЕсли;
		НСтр.Вставить("СчетУчетаАвансов", КодСчетаРегл(ПолучитьСчетУчетаИзНастроек(Перечисления.ВидыСчетовРеглУчета.АвансыПолученные, СсылкаНаОбъект.Организация, Стр.ОбъектРасчетов.Объект.ГруппаФинансовогоУчета, Стр.ОбъектРасчетов.Объект.Склад)));
		
		ДебиторскаяЗадолженность.Добавить(НСтр);
	КонецЦикла;   
	СтруктураВыгрузки.Вставить("ДебиторскаяЗадолженность", ДебиторскаяЗадолженность); 
	//
	КредиторскаяЗадолженность = Новый Массив; 
	Для каждого Стр Из СсылкаНаОбъект.КредиторскаяЗадолженность Цикл  
		НСтр = Новый Структура;
		НСтр.Вставить("ОбъектРасчетов", СформироватьУИДДляВыгрузки(Стр.ОбъектРасчетов.Объект));
		НСтр.Вставить("Сумма", Стр.Сумма);
		НСтр.Вставить("СуммаВзаиморасчетов", Стр.СуммаВзаиморасчетов);
		НСтр.Вставить("ТипРасчетов", XMLСтрока(Стр.ТипРасчетов));  
		
		Если Стр.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком Тогда
			НСтр.Вставить("СчетУчетаРасчетов", КодСчетаРегл(ПолучитьСчетУчетаИзНастроек(Перечисления.ВидыСчетовРеглУчета.РасчетыСПоставщиками, СсылкаНаОбъект.Организация, Стр.ОбъектРасчетов.Объект.ГруппаФинансовогоУчета, Стр.ОбъектРасчетов.Объект.Склад)));
		ИначеЕсли Стр.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом Тогда
			НСтр.Вставить("СчетУчетаРасчетов", КодСчетаРегл(ПолучитьСчетУчетаИзНастроек(Перечисления.ВидыСчетовРеглУчета.РасчетыСКлиентами, СсылкаНаОбъект.Организация, Стр.ОбъектРасчетов.Объект.ГруппаФинансовогоУчета, Стр.ОбъектРасчетов.Объект.Склад)));
		КонецЕсли;
		НСтр.Вставить("СчетУчетаАвансов", КодСчетаРегл(ПолучитьСчетУчетаИзНастроек(Перечисления.ВидыСчетовРеглУчета.АвансыПолученные, СсылкаНаОбъект.Организация, Стр.ОбъектРасчетов.Объект.ГруппаФинансовогоУчета, Стр.ОбъектРасчетов.Объект.Склад)));
		
		КредиторскаяЗадолженность.Добавить(НСтр);
	КонецЦикла;   
	СтруктураВыгрузки.Вставить("КредиторскаяЗадолженность", КредиторскаяЗадолженность); 
	
	НовОб = ТаблицаВыгрузки.Добавить();
	НовОб.СсылкаНаОбъект = СсылкаНаОбъект;
	НовОб.СтруктураВыгрузки = СтруктураВыгрузки;			
	
КонецПроцедуры	

Процедура ВыгрузитьВозвратТоваровПоставщику(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок) 
	
	Если СсылкаНаОбъект.Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда 
		ВыгрузитьВозвратТоваровПоставщикуКакВозвратТоваровПоставщику(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок);	
	Иначе     
		ВыгрузитьВозвратТоваровПоставщикуКакКорректировкуПриобретения(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок)	
	КонецЕсли;
	
КонецПроцедуры
	
Процедура ВыгрузитьВозвратТоваровПоставщикуКакВозвратТоваровПоставщику(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок)
		
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("УИД", СформироватьУИДДляВыгрузки(СсылкаНаОбъект)); 	
	СтруктураВыгрузки.Вставить("ТипОбъекта", "ВозвратТоваровПоставщику");
	СтруктураВыгрузки.Вставить("Номер", СсылкаНаОбъект.Номер); 
	СтруктураВыгрузки.Вставить("Дата", СсылкаНаОбъект.Дата);
	СтруктураВыгрузки.Вставить("Проведен", СсылкаНаОбъект.Проведен);
	СтруктураВыгрузки.Вставить("Представление", Строка(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("ПометкаУдаления", СсылкаНаОбъект.ПометкаУдаления);
	СтруктураВыгрузки.Вставить("ХозяйственнаяОперация", XMLстрока(СсылкаНаОбъект.ХозяйственнаяОперация));
	СтруктураВыгрузки.Вставить("ДокументПоступления", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.ДокументПоступления));
	СтруктураВыгрузки.Вставить("Организация", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Организация));
	СтруктураВыгрузки.Вставить("Склад", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Склад));
	СтруктураВыгрузки.Вставить("СуммаДокумента", СсылкаНаОбъект.СуммаДокумента);
	СтруктураВыгрузки.Вставить("Подразделение", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Подразделение));
	СтруктураВыгрузки.Вставить("Контрагент", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Контрагент));
	СтруктураВыгрузки.Вставить("Валюта", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Валюта));
	СтруктураВыгрузки.Вставить("ЦенаВключаетНДС", СсылкаНаОбъект.ЦенаВключаетНДС);
	СтруктураВыгрузки.Вставить("Комментарий", СсылкаНаОбъект.Комментарий);
	СтруктураВыгрузки.Вставить("Договор", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Договор));  

	СтруктураВыгрузки.Вставить("СчетУчетаРасчетов", КодСчетаРегл(ПолучитьСчетУчетаИзНастроек(Перечисления.ВидыСчетовРеглУчета.РасчетыСПоставщиками, СсылкаНаОбъект.Организация, СсылкаНаОбъект.ГруппаФинансовогоУчета, СсылкаНаОбъект.Склад)));
	
	//СФ
	СтруктураВыгрузки.Вставить("НомерСФ", "");
	СтруктураВыгрузки.Вставить("ДатаСФ", '00010101');
	СтруктураВыгрузки.Вставить("ПроведенСФ", "");
	
	ЗапросСФ = Новый Запрос;
	ЗапросСФ.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетФактураПолученный.Номер КАК НомерСФ,
	|	СчетФактураПолученный.Дата КАК ДатаСФ,
	|	СчетФактураПолученный.Проведен КАК ПроведенСФ
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|ГДЕ
	|	СчетФактураПолученный.ДокументыОснования.ДокументОснование = &Приобретение
	|	И СчетФактураПолученный.Проведен = ИСТИНА
	|";
	
	ЗапросСФ.УстановитьПараметр("Приобретение", СсылкаНаОбъект.ДокументПоступления);
	
	ВыборкаСФ = ЗапросСФ.Выполнить().Выбрать();
	
	Если ВыборкаСФ.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураВыгрузки, ВыборкаСФ);
	КонецЕсли;
	
	мсвТЧТовары = Новый Массив;
	
	Для Каждого стрТовары Из СсылкаНаОбъект.Товары Цикл
		
		структураСтрокаТовары = Новый Структура;
		структураСтрокаТовары.Вставить("Номенклатура", СформироватьУИДДляВыгрузки(стрТовары.Номенклатура));
		структураСтрокаТовары.Вставить("Количество", стрТовары.Количество);
		структураСтрокаТовары.Вставить("Цена", стрТовары.Цена);
		структураСтрокаТовары.Вставить("Сумма", стрТовары.Сумма);
		структураСтрокаТовары.Вставить("СтавкаНДС", XMLСтрока(стрТовары.СтавкаНДС.ПеречислениеСтавкаНДС));
		структураСтрокаТовары.Вставить("СуммаНДС", стрТовары.СуммаНДС);
		структураСтрокаТовары.Вставить("СуммаСНДС", стрТовары.СуммаСНДС);		
		
		СчетУчета = ПолучитьСчетУчетаИзНастроек(Перечисления.ВидыСчетовРеглУчета.НаСкладе, СсылкаНаОбъект.Организация, стрТовары.АналитикаУчетаНоменклатуры, стрТовары.АналитикаУчетаНоменклатуры.МестоХранения);		
		структураСтрокаТовары.Вставить("СчетУчета", КодСчетаРегл(СчетУчета));
		
		СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ;
		структураСтрокаТовары.Вставить("СчетУчетаНДС", КодСчетаРегл(СчетУчетаНДС));
		
		мсвТЧТовары.Добавить(структураСтрокаТовары);
		
	КонецЦикла; 
	
	СтруктураВыгрузки.Вставить("Товары", мсвТЧТовары);
	
	НовОб = ТаблицаВыгрузки.Добавить();
	НовОб.СсылкаНаОбъект = СсылкаНаОбъект;
	НовОб.СтруктураВыгрузки = СтруктураВыгрузки;			
	
КонецПроцедуры	

Процедура ВыгрузитьВозвратТоваровПоставщикуКакКорректировкуПриобретения(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок)
		
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("УИД", СформироватьУИДДляВыгрузки(СсылкаНаОбъект)); 	
	СтруктураВыгрузки.Вставить("ТипОбъекта", "ВозвратТоваровПоставщикуКакКорректировкаПриобретения");
	СтруктураВыгрузки.Вставить("Номер", СтрЗаменить(СсылкаНаОбъект.Номер, "Т", "T")); //с русского на латиницу
	СтруктураВыгрузки.Вставить("Дата", СсылкаНаОбъект.Дата);
	СтруктураВыгрузки.Вставить("Проведен", СсылкаНаОбъект.Проведен);
	СтруктураВыгрузки.Вставить("Представление", Строка(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("ПометкаУдаления", СсылкаНаОбъект.ПометкаУдаления);
	СтруктураВыгрузки.Вставить("ХозяйственнаяОперация", XMLстрока(СсылкаНаОбъект.ХозяйственнаяОперация));
	СтруктураВыгрузки.Вставить("ДокументПоступления", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.ДокументПоступления));
	СтруктураВыгрузки.Вставить("Организация", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Организация));
	СтруктураВыгрузки.Вставить("Склад", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Склад));
	СтруктураВыгрузки.Вставить("Подразделение", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Подразделение));
	СтруктураВыгрузки.Вставить("Контрагент", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Контрагент));
	СтруктураВыгрузки.Вставить("Валюта", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Валюта));
	СтруктураВыгрузки.Вставить("ЦенаВключаетНДС", СсылкаНаОбъект.ЦенаВключаетНДС);
	СтруктураВыгрузки.Вставить("Комментарий", СсылкаНаОбъект.Комментарий);  
		
	//СФ  
	ДополнитьСтрукутуруДаннымиСчетФактурыПолученной(СтруктураВыгрузки, СсылкаНаОбъект);
		
	//Запрос для таблицы Товары
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПриобретениеТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|	ПриобретениеТоваровУслугТовары.Склад КАК Склад,
	|	ПриобретениеТоваровУслугТовары.Количество КАК Количество,
	|	ПриобретениеТоваровУслугТовары.Цена КАК Цена,
	|	ПриобретениеТоваровУслугТовары.Сумма КАК Сумма,
	|	ПриобретениеТоваровУслугТовары.СтавкаНДС КАК СтавкаНДС,
	|	ПриобретениеТоваровУслугТовары.СуммаНДС КАК СуммаНДС,
	|	ПриобретениеТоваровУслугТовары.НомерГТД КАК НомерГТД,
	|	ПриобретениеТоваровУслугТовары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслугТовары
	|ГДЕ
	|	ПриобретениеТоваровУслугТовары.Ссылка = &СсылкаДокументаОснования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВозвратТоваровПоставщикуТовары.Номенклатура,
	|	ВозвратТоваровПоставщикуТовары.Количество,
	|	ВозвратТоваровПоставщикуТовары.Цена,
	|	ВозвратТоваровПоставщикуТовары.Сумма,
	|	ВозвратТоваровПоставщикуТовары.СуммаНДС,
	|	ВозвратТоваровПоставщикуТовары.НомерСтроки
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	|ГДЕ
	|	ВозвратТоваровПоставщикуТовары.Ссылка = &ВозвратТоваровПоставщику 
	|";
	
	Запрос.УстановитьПараметр("ВозвратТоваровПоставщику", СсылкаНаОбъект);
	Запрос.УстановитьПараметр("СсылкаДокументаОснования", СсылкаНаОбъект.ДокументПоступления); 
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	РезультатЗапроса = Запрос.ВыполнитьПакет(); 
	
	ТаблицаПоступления = РезультатЗапроса[0].Выгрузить();
	ТаблицаВозврата = РезультатЗапроса[1].Выгрузить();  
	
	мсвТЧТовары = Новый Массив;          
	
	Для каждого СтрокаПоступления из ТаблицаПоступления Цикл
		
		структураСтрокаТовары = Новый Структура;
		структураСтрокаТовары.Вставить("Номенклатура", СформироватьУИДДляВыгрузки(СтрокаПоступления.Номенклатура));
		структураСтрокаТовары.Вставить("НомерГТД", СформироватьУИДДляВыгрузки(СтрокаПоступления.НомерГТД));
		структураСтрокаТовары.Вставить("КоличествоДоИзменения", СтрокаПоступления.Количество);
		структураСтрокаТовары.Вставить("ЦенаДоИзменения", СтрокаПоступления.Цена);
		структураСтрокаТовары.Вставить("СуммаДоИзменения", СтрокаПоступления.Сумма);
		структураСтрокаТовары.Вставить("СтавкаНДСДоИзменения", XMLСтрока(СтрокаПоступления.СтавкаНДС.ПеречислениеСтавкаНДС));
		структураСтрокаТовары.Вставить("СуммаНДСДоИзменения", СтрокаПоступления.СуммаНДС);
		структураСтрокаТовары.Вставить("Количество", 0);
		структураСтрокаТовары.Вставить("Цена", СтрокаПоступления.Цена); //считаем что сумма в возврате не меняется
		структураСтрокаТовары.Вставить("Сумма", 0);
		структураСтрокаТовары.Вставить("СтавкаНДС", XMLСтрока(СтрокаПоступления.СтавкаНДС.ПеречислениеСтавкаНДС)); //считаем что ставка в возврате не меняется
		структураСтрокаТовары.Вставить("СуммаНДС", 0);
		структураСтрокаТовары.Вставить("ЭтоУслуга", ?(СтрокаПоступления.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга, Истина, Ложь));
		
		ЕстьИзменения = Ложь;   
			
		МассивСтрокВозврата = ТаблицаВозврата.НайтиСтроки(Новый Структура("Номенклатура, Цена", СтрокаПоступления.Номенклатура, СтрокаПоступления.Цена));
		Для каждого СтрокаВозврата из МассивСтрокВозврата Цикл
			Если СтрокаВозврата.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;   
			
			КоличествоПослеИзменения = СтрокаПоступления.Количество - СтрокаВозврата.Количество;
			СуммаПослеИзменения = СтрокаПоступления.Сумма - СтрокаВозврата.Сумма;
			СуммаНДСПослеИзменения = СтрокаПоступления.СуммаНДС - СтрокаВозврата.СуммаНДС;
			
			Если СтрокаПоступления.Количество >= структураСтрокаТовары.Количество + КоличествоПослеИзменения Тогда 
				структураСтрокаТовары.Количество = структураСтрокаТовары.Количество + КоличествоПослеИзменения;
				структураСтрокаТовары.Сумма = структураСтрокаТовары.Сумма + СуммаПослеИзменения;
				структураСтрокаТовары.СуммаНДС = структураСтрокаТовары.СуммаНДС + СуммаНДСПослеИзменения; 
				
				СтрокаВозврата.Количество = 0;  
				ЕстьИзменения = Истина;
			Иначе
				структураСтрокаТовары.Количество = СтрокаПоступления.Количество;
				структураСтрокаТовары.Сумма = структураСтрокаТовары.СуммаДоИзменения - (СтрокаВозврата.Сумма/СтрокаВозврата.Количество * СтрокаПоступления.Количество);
				структураСтрокаТовары.СуммаНДС = структураСтрокаТовары.СуммаНДСДоИзменения - (СтрокаВозврата.СуммаНДС/СтрокаВозврата.Количество * СтрокаПоступления.Количество);
				
				СтрокаВозврата.Количество = СтрокаВозврата.Количество - СтрокаПоступления.Количество; 
				ЕстьИзменения = Истина;
			КонецЕсли;
		КонецЦикла; 
		
		//корректировки небыло
		Если структураСтрокаТовары.Количество = 0 И НЕ ЕстьИзменения Тогда
			структураСтрокаТовары.Количество = структураСтрокаТовары.КоличествоДоИзменения;
			структураСтрокаТовары.Сумма = структураСтрокаТовары.СуммаДоИзменения;
			структураСтрокаТовары.СуммаНДС = структураСтрокаТовары.СуммаНДСДоИзменения;   
		КонецЕсли;

		структураНомерГТД = Новый Структура("СтранаПроисхождения, Код, ПометкаУдаления, РегистрационныйНомер, СтранаВвозаНеРФ");
		ЗаполнитьЗначенияСвойств(структураНомерГТД, СтрокаПоступления.НомерГТД);
		структураНомерГТД.СтранаПроисхождения = СформироватьУИДДляВыгрузки(СтрокаПоступления.НомерГТД.СтранаПроисхождения);
		структураСтрокаТовары.Вставить("НомерГТД", структураНомерГТД);
		
		СчетУчета = ПолучитьСчетУчетаИзНастроек(Перечисления.ВидыСчетовРеглУчета.НаСкладе, СсылкаНаОбъект.Организация, СтрокаПоступления.Номенклатура.ГруппаФинансовогоУчета, СтрокаПоступления.Склад);		
		структураСтрокаТовары.Вставить("СчетУчета", КодСчетаРегл(СчетУчета));
		
		СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ;
		структураСтрокаТовары.Вставить("СчетУчетаНДС", КодСчетаРегл(СчетУчетаНДС)); 
		
		СчетРасчетов = ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками;
		структураСтрокаТовары.Вставить("СчетРасчетов", КодСчетаРегл(СчетРасчетов));
		
		мсвТЧТовары.Добавить(структураСтрокаТовары);
	КонецЦикла;  
	
	Если ТаблицаВозврата.Итог("Количество") > 0 Тогда
		Сообщить("Ошибка при выгрузке возврата. Осталось нераспределенное количество!");
	КонецЕсли;
	
	СтруктураВыгрузки.Вставить("Товары", мсвТЧТовары);
	
	НовОб = ТаблицаВыгрузки.Добавить();
	НовОб.СсылкаНаОбъект = СсылкаНаОбъект;
	НовОб.СтруктураВыгрузки = СтруктураВыгрузки;			
	
КонецПроцедуры	

Процедура ВыгрузитьНачислениеДивидендов(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок)
	
	//считаем, что дивиденд всегда на 1 физ.лицо
	//иначе для каждой строк табличных частей физические лици и юридические лица нужно формировать отдельную структуру выгрузки (или разбирать на несколько документов на стороне БП)
			
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("УИД", СформироватьУИДДляВыгрузки(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("Представление", Строка(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("ТипОбъекта", "НачислениеДивидендов");
	СтруктураВыгрузки.Вставить("Номер", СсылкаНаОбъект.Номер); 
	СтруктураВыгрузки.Вставить("Дата", СсылкаНаОбъект.Дата);
	СтруктураВыгрузки.Вставить("ПометкаУдаления", СсылкаНаОбъект.ПометкаУдаления); 
	СтруктураВыгрузки.Вставить("Комментарий", СсылкаНаОбъект.Комментарий);
	СтруктураВыгрузки.Вставить("Организация", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Организация)); 
	СтруктураВыгрузки.Вставить("Ответственный", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Ответственный));
	СтруктураВыгрузки.Вставить("ДатаВыплаты", СсылкаНаОбъект.ДатаВыплаты);
	
	ФизическиеЛица = Новый Массив;
	Для Каждого Стр Из СсылкаНаОбъект.ФизическиеЛица Цикл
		НСтр = Новый Структура;
		НСтр.Вставить("Учредитель", СформироватьУИДДляВыгрузки(Стр.ФизическоеЛицо));
		НСтр.Вставить("СуммаДохода", Стр.Начислено);
		НСтр.Вставить("СуммаНалога", Стр.НДФЛ);
		НСтр.Вставить("СуммаНалогаСПревышения", Стр.НДФЛСПревышения);
		ФизическиеЛица.Добавить(НСтр);
	КонецЦикла;
	СтруктураВыгрузки.Вставить("ФизическиеЛица", ФизическиеЛица);
	
	НовОб = ТаблицаВыгрузки.Добавить();
	НовОб.СсылкаНаОбъект = СсылкаНаОбъект;
	НовОб.СтруктураВыгрузки = СтруктураВыгрузки;
	
КонецПроцедуры		

Процедура ВыгрузитьОприходованиеИзлишковТоваров(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок)
			
	СтруктураВыгрузки = Новый Структура;     
	
	СтруктураВыгрузки.Вставить("УИД", СформироватьУИДДляВыгрузки(СсылкаНаОбъект)); 
	СтруктураВыгрузки.Вставить("Представление", Строка(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("ТипОбъекта", "ОприходованиеИзлишковТоваров");
	СтруктураВыгрузки.Вставить("Номер", СсылкаНаОбъект.Номер); 
	СтруктураВыгрузки.Вставить("Дата", СсылкаНаОбъект.Дата);
	СтруктураВыгрузки.Вставить("Проведен", СсылкаНаОбъект.Проведен);	
	СтруктураВыгрузки.Вставить("ПометкаУдаления", СсылкаНаОбъект.ПометкаУдаления);
	СтруктураВыгрузки.Вставить("Комментарий", СсылкаНаОбъект.Комментарий);                                       	
	СтруктураВыгрузки.Вставить("Организация", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Организация));
	СтруктураВыгрузки.Вставить("Подразделение", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Подразделение));
	СтруктураВыгрузки.Вставить("Склад", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Склад));
	СтруктураВыгрузки.Вставить("СтатьяДоходов", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.СтатьяДоходов)); 
	
	Если ЗначениеЗаполнено(СсылкаНаОбъект.Основание) Тогда
		СтруктураВыгрузки.Вставить("Основание", Строка(СсылкаНаОбъект.Основание)); 
	Иначе
		СтруктураВыгрузки.Вставить("Основание", "");	
	КонецЕсли;	
	
	СчетТовары = ПолучитьСчетУчетаИзНастроек(Перечисления.ВидыСчетовРеглУчета.НаСкладе, СсылкаНаОбъект.Организация, , СсылкаНаОбъект.Склад);
	
	Товары = Новый Массив;
	Для Каждого Стр Из СсылкаНаОбъект.Товары Цикл
		Нстр = Новый Структура;
		Нстр.Вставить("Номенклатура", СформироватьУИДДляВыгрузки(Стр.Номенклатура));
		Нстр.Вставить("Количество", Стр.Количество);
		Нстр.Вставить("Цена", Стр.Цена);
		Нстр.Вставить("Сумма", Стр.Сумма);

		НомерГТД = Новый Структура("СтранаПроисхождения, Код, ПометкаУдаления, РегистрационныйНомер, СтранаВвозаНеРФ");
		ЗаполнитьЗначенияСвойств(НомерГТД, Стр.НомерГТД);
		НомерГТД.СтранаПроисхождения = СформироватьУИДДляВыгрузки(Стр.НомерГТД.СтранаПроисхождения);
		НСтр.Вставить("НомерГТД", НомерГТД);
		
		Если ЗначениеЗаполнено(СчетТовары) Тогда
			Нстр.Вставить("СчетУчета", КодСчетаРегл(СчетТовары.КодБыстрогоВыбора)); 
		КонецЕсли;
		Товары.Добавить(Нстр);	
	КонецЦикла;	
	
	СтруктураВыгрузки.Вставить("Товары", Товары);
		
	НовОб = ТаблицаВыгрузки.Добавить();
	НовОб.СсылкаНаОбъект = СсылкаНаОбъект;
	НовОб.СтруктураВыгрузки = СтруктураВыгрузки;			
	
КонецПроцедуры	

Процедура ВыгрузитьСписаниеНедостач(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок)
	
    Если СсылкаНаОбъект.Пустая() Тогда
		Возврат;
	КонецЕсли;	
	
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("УИД", СформироватьУИДДляВыгрузки(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("Представление", Строка(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("ТипОбъекта", "ТребованиеНакладная");		
	СтруктураВыгрузки.Вставить("ПометкаУдаления", СсылкаНаОбъект.ПометкаУдаления);	
	СтруктураВыгрузки.Вставить("Проведен", СсылкаНаОбъект.Проведен);	
		
	СтруктураВыгрузки.Вставить("Номер", СсылкаНаОбъект.Номер); 
	СтруктураВыгрузки.Вставить("Дата", СсылкаНаОбъект.Дата);
	
	СтруктураВыгрузки.Вставить("Префикс", "СН");  
	
	СтруктураВыгрузки.Вставить("СчетаУчетаЗатратВТаблице",Ложь);
		
	СтруктураВыгрузки.Вставить("Организация", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Организация));
	СтруктураВыгрузки.Вставить("Склад", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Склад));
	СтруктураВыгрузки.Вставить("Подразделение", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Подразделение));
	СтруктураВыгрузки.Вставить("Комментарий", СсылкаНаОбъект.Комментарий);  
	
	ГруппаФинУчета = СсылкаНаОбъект.СтатьяРасходов.ГруппаФинансовогоУчетаРегл;
	СчетУчета = ПолучитьСчетУчетаИзНастроек(Перечисления.ВидыСчетовРеглУчета.Расходы,СсылкаНаОбъект.Организация,ГруппаФинУчета,СсылкаНаОбъект.Склад);	

	СтруктураВыгрузки.Вставить("СчетУчета",КодСчетаРегл(СчетУчета));
	СтруктураВыгрузки.Вставить("Субконто1","");
	
	Если СчетУчета = ПланыСчетов.Хозрасчетный.ИздержкиОбращения
		ИЛИ СчетУчета = ПланыСчетов.Хозрасчетный.ПрочиеРасходы Тогда
		СтруктураВыгрузки.Субконто1 = СформироватьУИДДляВыгрузки(СсылкаНаОбъект.СтатьяРасходов);
	КонецЕсли;
	
	//Заглушка по старым арендным товарам
	ЗапросАрендаСч41 = Новый Запрос;
	ЗапросАрендаСч41.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК Номенклатура
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			,
	|			,
	|			Регистратор = &Документ
	|			И СчетКт = Значение(ПланСчетов.Хозрасчетный.ТоварыНаСкладах)
	|			И СубконтоКт1.ГруппаФинансовогоУчета = &ГруппаФинансовогоУчета
	|			,
	|			,
	|			) КАК ХозрасчетныйДвиженияССубконто
	|";        
	
	ЗапросАрендаСч41.УстановитьПараметр("Документ",СсылкаНаОбъект); 
	ЗапросАрендаСч41.УстановитьПараметр("ГруппаФинансовогоУчета",Справочники.ГруппыФинансовогоУчетаНоменклатуры.НайтиПоНаименованию("Аренда инструмента"));
	мсвНоменклатураАрендыСч41 = ЗапросАрендаСч41.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписаниеНедостачТоваровТовары.Ссылка КАК Ссылка,
	|	СписаниеНедостачТоваровТовары.Номенклатура КАК Номенклатура,
	|	СписаниеНедостачТоваровТовары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	МИНИМУМ(СписаниеНедостачТоваровТовары.НомерСтроки) КАК НомерСтроки,
	|	СУММА(СписаниеНедостачТоваровТовары.Количество) КАК Количество
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	Документ.СписаниеНедостачТоваров.Товары КАК СписаниеНедостачТоваровТовары
	|ГДЕ
	|	СписаниеНедостачТоваровТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СписаниеНедостачТоваровТовары.Ссылка,
	|	СписаниеНедостачТоваровТовары.Номенклатура,
	|	СписаниеНедостачТоваровТовары.АналитикаУчетаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписаниеНедостачТоваровТовары.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(ТоварыОрганизаций.НомерГТД, Значение(Справочник.НомераГТД.ПустаяСсылка)) КАК НомерГТД,
	|	ЕСТЬNULL(ТоварыОрганизаций.Количество, СписаниеНедостачТоваровТовары.Количество) КАК Количество
	|ИЗ
	|	втТовары КАК СписаниеНедостачТоваровТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыОрганизаций КАК ТоварыОрганизаций
	|		ПО (СписаниеНедостачТоваровТовары.Ссылка = ТоварыОрганизаций.Регистратор)
	|			И (СписаниеНедостачТоваровТовары.АналитикаУчетаНоменклатуры = ТоварыОрганизаций.АналитикаУчетаНоменклатуры)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СписаниеНедостачТоваровТовары.НомерСтроки
	|";
	
	Запрос.УстановитьПараметр("Ссылка",СсылкаНаОбъект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	мсвТовары = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		структураСтрокаТовары = Новый Структура;
		структураСтрокаТовары.Вставить("Номенклатура",СформироватьУИДДляВыгрузки(Выборка.Номенклатура));
		структураСтрокаТовары.Вставить("Количество",Выборка.Количество);
			
		структураНомерГТД = Новый Структура("СтранаПроисхождения, Код, ПометкаУдаления, РегистрационныйНомер, СтранаВвозаНеРФ");
		ЗаполнитьЗначенияСвойств(структураНомерГТД, Выборка.НомерГТД);
		структураНомерГТД.СтранаПроисхождения = СформироватьУИДДляВыгрузки(Выборка.НомерГТД.СтранаПроисхождения);
		структураСтрокаТовары.Вставить("НомерГТД", структураНомерГТД);
		
		структураСтрокаТовары.Вставить("СчетУчета","");
		структураСтрокаТовары.Вставить("СчетУчетаНДС",""); 
		
		Если мсвНоменклатураАрендыСч41.Найти(Выборка.Номенклатура) <> Неопределено Тогда
			структураСтрокаТовары.СчетУчета = КодСчетаРегл(ПланыСчетов.Хозрасчетный.ТоварыНаСкладах);		
		КонецЕсли;
					
		мсвТовары.Добавить(структураСтрокаТовары);
		
	КонецЦикла;
	
	СтруктураВыгрузки.Вставить("Материалы",мсвТовары);
	
	НовОб = ТаблицаВыгрузки.Добавить();
	НовОб.СсылкаНаОбъект = СсылкаНаОбъект;
	НовОб.СтруктураВыгрузки = СтруктураВыгрузки;			
	
КонецПроцедуры	

Процедура ВыгрузитьОперациюПоПлатежнойКарте(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок)
	
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("УИД", СформироватьУИДДляВыгрузки(СсылкаНаОбъект)); 
	СтруктураВыгрузки.Вставить("Представление", Строка(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("ТипОбъекта", "ОперацияПоПлатежнойКарте");
	СтруктураВыгрузки.Вставить("Номер", СсылкаНаОбъект.Номер); 
	СтруктураВыгрузки.Вставить("Дата", СсылкаНаОбъект.Дата);
	СтруктураВыгрузки.Вставить("Проведен", СсылкаНаОбъект.Проведен);	
	СтруктураВыгрузки.Вставить("ПометкаУдаления", СсылкаНаОбъект.ПометкаУдаления);
	СтруктураВыгрузки.Вставить("Подразделение", ?(ЗначениеЗаполнено(СсылкаНаОбъект.Подразделение), СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Подразделение), ""));
	СтруктураВыгрузки.Вставить("ХозяйственнаяОперация", XMLСтрока(СсылкаНаОбъект.ХозяйственнаяОперация));
	СтруктураВыгрузки.Вставить("Организация", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Организация));
	СтруктураВыгрузки.Вставить("Контрагент", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Контрагент));
	СтруктураВыгрузки.Вставить("Валюта", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Валюта));
	СтруктураВыгрузки.Вставить("СуммаДокумента", СсылкаНаОбъект.СуммаДокумента);
	СтруктураВыгрузки.Вставить("Договор", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Договор));
	СтруктураВыгрузки.Вставить("ДоговорЭквайринга", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.ДоговорЭквайринга));
	
	Комментарий = "";  
		
	РасшифровкаПлатежа = Новый Массив;

	Для Каждого Стр Из СсылкаНаОбъект.РасшифровкаПлатежа Цикл
		Нстр = Новый Структура;
		
		Нстр.Вставить("СуммаПлатежа", Стр.Сумма);
		Нстр.Вставить("СуммаВзаиморасчетов", Стр.СуммаВзаиморасчетов);
		Нстр.Вставить("СтавкаНДС", XMLСтрока(Стр.СтавкаНДС.ПеречислениеСтавкаНДС));
		Нстр.Вставить("СуммаНДС", Стр.СуммаНДС);
		Нстр.Вставить("КурсВзаиморасчетов", Стр.КурсЧислительВзаиморасчетов);
		Нстр.Вставить("КратностьВзаиморасчетов", Стр.КурсЗнаменательВзаиморасчетов);
		
		Нстр.Вставить("СчетНаОплату", "");
		Нстр.Вставить("Сделка", "");
		
		ОбъектРасчетов = Стр.ОбъектРасчетов.Объект;
		Если ЗначениеЗаполнено(ОбъектРасчетов) И ОбъектРасчетов <> СсылкаНаОбъект Тогда
			ТипОбъектаРасчетов = ТипЗнч(ОбъектРасчетов);
			Если ТипОбъектаРасчетов = Тип("ДокументСсылка.ЗаказКлиента") ИЛИ ТипОбъектаРасчетов = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда			
				Нстр.Вставить("СчетНаОплату", СформироватьУИДДляВыгрузки(ОбъектРасчетов));
				Нстр.Вставить("Сделка", "");
			Иначе     
				Нстр.Вставить("СчетНаОплату", "");
				Нстр.Вставить("Сделка", СформироватьУИДДляВыгрузки(ОбъектРасчетов));
			КонецЕсли;
			
			Комментарий = "ERP: " + Стр.ОбъектРасчетов.Наименование;
		КонецЕсли;	  
		
		//возьмем подразделение из основания платежа
		Если ЗначениеЗаполнено(Стр.ОснованиеПлатежа) Тогда  
			Если ТипЗнч(Стр.ОснованиеПлатежа) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
				Комментарий = "ERP: " + Стр.ОснованиеПлатежа.НазначениеПлатежа; 
			ИначеЕсли ТипЗнч(Стр.ОснованиеПлатежа) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
				Комментарий = "ERP: " + Стр.ОснованиеПлатежа.Назначение.Наименование;
			КонецЕсли;  
			
			Если НЕ ЗначениеЗаполнено(СтруктураВыгрузки.Подразделение) Тогда 
				СтруктураВыгрузки.Вставить("Подразделение", СформироватьУИДДляВыгрузки(Стр.ОснованиеПлатежа.Подразделение));  
			КонецЕсли; 
		КонецЕсли;
		
		РасшифровкаПлатежа.Добавить(Нстр);	
	КонецЦикла;	
	
	СтруктураВыгрузки.Вставить("Комментарий", Комментарий);
	
	СтруктураВыгрузки.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
		
	НовОб = ТаблицаВыгрузки.Добавить();
	НовОб.СсылкаНаОбъект = СсылкаНаОбъект;
	НовОб.СтруктураВыгрузки = СтруктураВыгрузки;			
	
КонецПроцедуры	

Процедура ВыгрузитьОтчетБанкаПоОперациямЭквайринга(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок)
	
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("УИД", СформироватьУИДДляВыгрузки(СсылкаНаОбъект)); 
	СтруктураВыгрузки.Вставить("Представление", Строка(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("ТипОбъекта", "ОперацияБух");
	СтруктураВыгрузки.Вставить("Дата", СсылкаНаОбъект.Дата);
	СтруктураВыгрузки.Вставить("Организация", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Организация));
	СтруктураВыгрузки.Вставить("Комментарий", СсылкаНаОбъект.Комментарий);
	СтруктураВыгрузки.Вставить("Проведен", СсылкаНаОбъект.Проведен);	
	СтруктураВыгрузки.Вставить("ПометкаУдаления", СсылкаНаОбъект.ПометкаУдаления);
	
	мсвПроводки = Новый Массив;
	
	структураПроводка = Новый Структура;
		
	структураПроводка.Вставить("Период",СсылкаНаОбъект.Дата); 
	
	структураПроводка.Вставить("Организация",СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Организация));
	
	структураПроводка.Вставить("СчетДт",КодСчетаРегл(ПланыСчетов.Хозрасчетный.ПрочиеРасходы));
	структураПроводка.Вставить("СубконтоДт1",СформироватьУИДДляВыгрузки(СсылкаНаОбъект.СтатьяРасходов));
	структураПроводка.Вставить("ВидСубконтоДт1","");
	структураПроводка.Вставить("СубконтоДт2","");
	структураПроводка.Вставить("ВидСубконтоДт2","");
	структураПроводка.Вставить("СубконтоДт3","");
	структураПроводка.Вставить("ВидСубконтоДт3","");
		
	структураПроводка.Вставить("ПодразделениеДт",СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Подразделение));
	структураПроводка.Вставить("ВалютаДт","");
		
	структураПроводка.Вставить("СчетКт",КодСчетаРегл(ПланыСчетов.Хозрасчетный.ПродажиПоПлатежнымКартам));
	структураПроводка.Вставить("СубконтоКт1","");
	структураПроводка.Вставить("ВидСубконтоКт1","");
	структураПроводка.Вставить("СубконтоКт2","");
	структураПроводка.Вставить("ВидСубконтоКт2","");
	структураПроводка.Вставить("СубконтоКт3","");
	структураПроводка.Вставить("ВидСубконтоКт3","");
		
	структураПроводка.Вставить("ПодразделениеКт",СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Подразделение));
	структураПроводка.Вставить("ВалютаКт","");
		
	структураПроводка.Вставить("Сумма",СсылкаНаОбъект.СуммаКомиссии);
	структураПроводка.Вставить("ВалютнаяСуммаДт",0);
	структураПроводка.Вставить("ВалютнаяСуммаКт",0);
	структураПроводка.Вставить("КоличествоДт",0);
	структураПроводка.Вставить("КоличествоКт",0);
	структураПроводка.Вставить("СуммаНУДт",0);
	структураПроводка.Вставить("СуммаНУКт",0);
	структураПроводка.Вставить("СуммаПРДт",0);
	структураПроводка.Вставить("СуммаПРКт",0);
	структураПроводка.Вставить("СуммаВРДт",0);
	структураПроводка.Вставить("СуммаВРКт",0);
	структураПроводка.Вставить("Содержание","Комиссия по операциям эквайринга");
	структураПроводка.Вставить("НеКорректироватьСтоимостьАвтоматически",Ложь);
		
	мсвПроводки.Добавить(структураПроводка);	
	
	СтруктураВыгрузки.Вставить("Проводки", мсвПроводки);		
	
	НовОб = ТаблицаВыгрузки.Добавить();
	НовОб.СсылкаНаОбъект = СсылкаНаОбъект;
	НовОб.СтруктураВыгрузки = СтруктураВыгрузки;		
	
КонецПроцедуры

Процедура ВыгрузитьПриходныйКассовыйОрдер(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок)
	
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("УИД", СформироватьУИДДляВыгрузки(СсылкаНаОбъект)); 
	СтруктураВыгрузки.Вставить("Представление", Строка(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("ТипОбъекта", "ПриходныйКассовыйОрдер");
	СтруктураВыгрузки.Вставить("Номер", СсылкаНаОбъект.Номер); 
	СтруктураВыгрузки.Вставить("Дата", СсылкаНаОбъект.Дата);
	СтруктураВыгрузки.Вставить("Проведен", СсылкаНаОбъект.Проведен);	
	СтруктураВыгрузки.Вставить("ПометкаУдаления", СсылкаНаОбъект.ПометкаУдаления);
	СтруктураВыгрузки.Вставить("Подразделение", ?(ЗначениеЗаполнено(СсылкаНаОбъект.Подразделение), СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Подразделение), ""));
	СтруктураВыгрузки.Вставить("ХозяйственнаяОперация", XMLСтрока(СсылкаНаОбъект.ХозяйственнаяОперация));
	СтруктураВыгрузки.Вставить("Организация", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Организация));
	СтруктураВыгрузки.Вставить("Контрагент", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Контрагент));
	СтруктураВыгрузки.Вставить("Валюта", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Валюта));
	СтруктураВыгрузки.Вставить("СуммаДокумента", СсылкаНаОбъект.СуммаДокумента);
	СтруктураВыгрузки.Вставить("Договор", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Договор));   
	
	СтруктураВыгрузки.Вставить("СтатьяДвиженияДенежныхСредств", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.СтатьяДвиженияДенежныхСредств));
	
	Комментарий = "";  
		
	РасшифровкаПлатежа = Новый Массив;

	Для Каждого Стр Из СсылкаНаОбъект.РасшифровкаПлатежа Цикл
		Нстр = Новый Структура;
		
		Нстр.Вставить("СуммаПлатежа", Стр.Сумма);
		Нстр.Вставить("СуммаВзаиморасчетов", Стр.СуммаВзаиморасчетов);
		Нстр.Вставить("СтавкаНДС", XMLСтрока(Стр.СтавкаНДС.ПеречислениеСтавкаНДС));
		Нстр.Вставить("СуммаНДС", Стр.СуммаНДС);
		Нстр.Вставить("КурсВзаиморасчетов", Стр.КурсЧислительВзаиморасчетов);
		Нстр.Вставить("КратностьВзаиморасчетов", Стр.КурсЗнаменательВзаиморасчетов);
		Нстр.Вставить("СтатьяДвиженияДенежныхСредств", СформироватьУИДДляВыгрузки(Стр.СтатьяДвиженияДенежныхСредств)); 
		
		//Самойлов А.С. Начало 2022-11-02 #
		Нстр.Вставить("ДоговорКонтрагента", СформироватьУИДДляВыгрузки(Стр.ОбъектРасчетов.Договор));
		//Самойлов А.С. Конец  2022-11-02
		
		Если ЗначениеЗаполнено(Стр.НастройкаСчетовУчета) И ЗначениеЗаполнено(Стр.НастройкаСчетовУчета.СчетУчета) Тогда
			СтруктураВыгрузки.Вставить("СчетУчетаРасчетовСКонтрагентом", КодСчетаРегл(Стр.НастройкаСчетовУчета.СчетУчета));
			
			Если ТипЗнч(Стр.НастройкаСчетовУчета.Субконто1) = Тип("СправочникСсылка.Контрагенты") Тогда
				СтруктураВыгрузки.Вставить("КонтрагентНастройки", СформироватьУИДДляВыгрузки(Стр.НастройкаСчетовУчета.Субконто1)); 
			ИначеЕсли ТипЗнч(Стр.НастройкаСчетовУчета.Субконто1) = Тип("СправочникСсылка.ФизическиеЛица") Тогда  
				СтруктураВыгрузки.Вставить("ФизЛицоНастройки", СформироватьУИДДляВыгрузки(Стр.НастройкаСчетовУчета.Субконто1)); 
			КонецЕсли;    
			
			СтруктураВыгрузки.Вставить("ДоговорНастройки", СформироватьУИДДляВыгрузки(?(ЗначениеЗаполнено(Стр.НастройкаСчетовУчета.Субконто2), Стр.НастройкаСчетовУчета.Субконто2, Справочники.ДоговорыКонтрагентов.ПустаяСсылка()))); 
			СтруктураВыгрузки.Вставить("Подразделение", ?(ЗначениеЗаполнено(Стр.Подразделение), СформироватьУИДДляВыгрузки(Стр.Подразделение), "")); 
		КонецЕсли;
		
		ОбъектРасчетов = Стр.ОбъектРасчетов.Объект;
		Если ЗначениеЗаполнено(ОбъектРасчетов) И ОбъектРасчетов <> СсылкаНаОбъект Тогда
			Комментарий = "ERP: " + Стр.ОбъектРасчетов.Наименование;
		КонецЕсли;	  
		
		//возьмем подразделение из основания платежа
		Если ЗначениеЗаполнено(Стр.ОснованиеПлатежа) Тогда  
			Если ТипЗнч(Стр.ОснованиеПлатежа) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
				Комментарий = "ERP: " + Стр.ОснованиеПлатежа.НазначениеПлатежа; 
				//ИначеЕсли ТипЗнч(Стр.ОснованиеПлатежа) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
			Иначе
				Комментарий = "ERP: " + Стр.ОснованиеПлатежа.Назначение.Наименование;
			КонецЕсли;  
			
			Если НЕ ЗначениеЗаполнено(СтруктураВыгрузки.Подразделение) Тогда 
				СтруктураВыгрузки.Вставить("Подразделение", СформироватьУИДДляВыгрузки(Стр.ОснованиеПлатежа.Подразделение));  
			КонецЕсли; 
		КонецЕсли;
		
		РасшифровкаПлатежа.Добавить(Нстр);	
	КонецЦикла;	
	
	СтруктураВыгрузки.Вставить("Комментарий", Комментарий);
	
	СтруктураВыгрузки.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
		
	НовОб = ТаблицаВыгрузки.Добавить();
	НовОб.СсылкаНаОбъект = СсылкаНаОбъект;
	НовОб.СтруктураВыгрузки = СтруктураВыгрузки;			
	
КонецПроцедуры

Процедура ВыгрузитьПоступлениеБезналичныхДС(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок)
		
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("УИД", СформироватьУИДДляВыгрузки(СсылкаНаОбъект)); 
	СтруктураВыгрузки.Вставить("Представление", Строка(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("ТипОбъекта", "ПоступлениеБезналичныхДенежныхСредств");
	СтруктураВыгрузки.Вставить("Номер", СсылкаНаОбъект.Номер); 
	СтруктураВыгрузки.Вставить("Дата", СсылкаНаОбъект.Дата);
	СтруктураВыгрузки.Вставить("Проведен", СсылкаНаОбъект.Проведен);	
	СтруктураВыгрузки.Вставить("ПометкаУдаления", СсылкаНаОбъект.ПометкаУдаления);
	СтруктураВыгрузки.Вставить("ХозяйственнаяОперация", XMLСтрока(СсылкаНаОбъект.ХозяйственнаяОперация));
	СтруктураВыгрузки.Вставить("СуммаДокумента", СсылкаНаОбъект.СуммаДокумента);
	СтруктураВыгрузки.Вставить("ДатаВходящегоДокумента", СсылкаНаОбъект.ДатаВходящегоДокумента);
	СтруктураВыгрузки.Вставить("НомерВходящегоДокумента", СсылкаНаОбъект.НомерВходящегоДокумента);                                       
	СтруктураВыгрузки.Вставить("СуммаКомиссии", СсылкаНаОбъект.СуммаКомиссии);                                       
	СтруктураВыгрузки.Вставить("Организация", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Организация));
	//СтруктураВыгрузки.Вставить("БанковскийСчет", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.БанковскийСчет));
	СтруктураВыгрузки.Вставить("Валюта", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Валюта));
	СтруктураВыгрузки.Вставить("СтатьяДвиженияДенежныхСредств", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.СтатьяДвиженияДенежныхСредств));
	СтруктураВыгрузки.Вставить("Подразделение", ?(ЗначениеЗаполнено(СсылкаНаОбъект.Подразделение), СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Подразделение), ""));
	
	Контрагент = СсылкаНаОбъект.Контрагент;
	Если ЗначениеЗаполнено(СсылкаНаОбъект.БанковскийСчетОтправитель) Тогда
		Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
			Контрагент = СсылкаНаОбъект.БанковскийСчетОтправитель.Владелец;   
		КонецЕсли;
		СтруктураВыгрузки.Вставить("БанковскийСчетКонтрагента", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.БанковскийСчетОтправитель));
	ИначеЕсли ЗначениеЗаполнено(СсылкаНаОбъект.БанковскийСчетКонтрагента) Тогда
		СтруктураВыгрузки.Вставить("БанковскийСчетКонтрагента", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.БанковскийСчетКонтрагента));
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(СсылкаНаОбъект.БанковскийСчет) Тогда
		СтруктураВыгрузки.Вставить("БанковскийСчетОрганизации", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.БанковскийСчет));
	КонецЕсли;
	
	СтруктураВыгрузки.Вставить("Контрагент", СформироватьУИДДляВыгрузки(Контрагент));
	
	//тип Договора - составной 
	Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	Если ЗначениеЗаполнено(СсылкаНаОбъект.ДоговорЭквайринга) Тогда
		Договор = СсылкаНаОбъект.ДоговорЭквайринга;
	ИначеЕсли ЗначениеЗаполнено(СсылкаНаОбъект.Договор) Тогда
		Договор = СсылкаНаОбъект.Договор; 
	КонецЕсли;
				
	Комментарий = СсылкаНаОбъект.НазначениеПлатежа;  
	РасшифровкаПлатежа = Новый Массив; 

	Для каждого Стр Из СсылкаНаОбъект.РасшифровкаПлатежа Цикл
		НСтр = Новый Структура;
		НСтр.Вставить("Сумма", Стр.Сумма);
		НСтр.Вставить("СуммаВзаиморасчетов", Стр.СуммаВзаиморасчетов); 
		НСтр.Вставить("СтавкаНДС", XMLСтрока(Стр.СтавкаНДС.ПеречислениеСтавкаНДС));
		НСтр.Вставить("СуммаНДС", Стр.СуммаНДС);	
		НСтр.Вставить("СтатьяДвиженияДенежныхСредств", СформироватьУИДДляВыгрузки(Стр.СтатьяДвиженияДенежныхСредств)); 
		Нстр.Вставить("КурсВзаиморасчетов", Стр.КурсЧислительВзаиморасчетов);
		Нстр.Вставить("КратностьВзаиморасчетов", Стр.КурсЗнаменательВзаиморасчетов); 
		Нстр.Вставить("Подразделение", ?(ЗначениеЗаполнено(Стр.Подразделение), СформироватьУИДДляВыгрузки(Стр.Подразделение), ""));  
		
		//кредиты и займы
		Если ЗначениеЗаполнено(Стр.НастройкаСчетовУчета) И ЗначениеЗаполнено(Стр.НастройкаСчетовУчета.СчетУчета) Тогда 
			СтруктураВыгрузки.Вставить("СчетУчетаРасчетовСКонтрагентом", КодСчетаРегл(Стр.НастройкаСчетовУчета.СчетУчета));
			
			Если ТипЗнч(Стр.НастройкаСчетовУчета.Субконто1) = Тип("СправочникСсылка.Контрагенты") Тогда
				СтруктураВыгрузки.Вставить("КонтрагентНастройки", СформироватьУИДДляВыгрузки(Стр.НастройкаСчетовУчета.Субконто1)); 
			ИначеЕсли ТипЗнч(Стр.НастройкаСчетовУчета.Субконто1) = Тип("СправочникСсылка.ФизическиеЛица") Тогда  
				СтруктураВыгрузки.Вставить("ФизЛицоНастройки", СформироватьУИДДляВыгрузки(Стр.НастройкаСчетовУчета.Субконто1)); 
			КонецЕсли;  
			
			СтруктураВыгрузки.Вставить("ДоговорНастройки", СформироватьУИДДляВыгрузки(?(ЗначениеЗаполнено(Стр.НастройкаСчетовУчета.Субконто2), Стр.НастройкаСчетовУчета.Субконто2, Справочники.ДоговорыКонтрагентов.ПустаяСсылка()))); 
		КонецЕсли;
		
		ОбъектРасчетов = Стр.ОбъектРасчетов.Объект;
		Если ЗначениеЗаполнено(ОбъектРасчетов) И НЕ ЗначениеЗаполнено(Комментарий) И ОбъектРасчетов <> СсылкаНаОбъект Тогда
			Комментарий = "ERP: " + Стр.ОбъектРасчетов.Наименование;
		КонецЕсли;	  
		
		//возьмем подразделение из основания платежа
		Если ЗначениеЗаполнено(Стр.ОснованиеПлатежа) Тогда   
			Если НЕ ЗначениеЗаполнено(Комментарий) Тогда
				Если ТипЗнч(Стр.ОснованиеПлатежа) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
					Комментарий = "ERP: " + Стр.ОснованиеПлатежа.НазначениеПлатежа;
				ИначеЕсли ТипЗнч(Стр.ОснованиеПлатежа) = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями") Тогда
					Комментарий = "ERP: " + Стр.ОснованиеПлатежа.ОбъектРасчетов.Наименование;
				Иначе
					Комментарий = "ERP: " + Стр.ОснованиеПлатежа.Назначение.Наименование;
				КонецЕсли;  
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтруктураВыгрузки.Подразделение) Тогда 
				СтруктураВыгрузки.Вставить("Подразделение", СформироватьУИДДляВыгрузки(Стр.ОснованиеПлатежа.Подразделение));  
			КонецЕсли; 
		КонецЕсли;
		
		РасшифровкаПлатежа.Добавить(НСтр);
	КонецЦикла;        
	
	СтруктураВыгрузки.Вставить("Договор", СформироватьУИДДляВыгрузки(Договор));
	СтруктураВыгрузки.Вставить("Комментарий", Комментарий);
	СтруктураВыгрузки.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
	
	НовОб = ТаблицаВыгрузки.Добавить();
	НовОб.СсылкаНаОбъект = СсылкаНаОбъект;
	НовОб.СтруктураВыгрузки = СтруктураВыгрузки;			
	
КонецПроцедуры	

Процедура ВыгрузитьРасходныйКассовыйОрдер(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок)  
	
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("УИД", СформироватьУИДДляВыгрузки(СсылкаНаОбъект)); 
	СтруктураВыгрузки.Вставить("Представление", Строка(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("ТипОбъекта", "РасходныйКассовыйОрдер");
	СтруктураВыгрузки.Вставить("Номер", СсылкаНаОбъект.Номер); 
	СтруктураВыгрузки.Вставить("Дата", СсылкаНаОбъект.Дата);
	СтруктураВыгрузки.Вставить("Проведен", СсылкаНаОбъект.Проведен);	
	СтруктураВыгрузки.Вставить("ПометкаУдаления", СсылкаНаОбъект.ПометкаУдаления);
	СтруктураВыгрузки.Вставить("Подразделение", ?(ЗначениеЗаполнено(СсылкаНаОбъект.Подразделение), СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Подразделение), ""));
	СтруктураВыгрузки.Вставить("ХозяйственнаяОперация", XMLСтрока(СсылкаНаОбъект.ХозяйственнаяОперация));
	СтруктураВыгрузки.Вставить("Организация", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Организация));
	СтруктураВыгрузки.Вставить("Контрагент", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Контрагент));
	СтруктураВыгрузки.Вставить("ПодотчетноеЛицо", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.ПодотчетноеЛицо));
	СтруктураВыгрузки.Вставить("Валюта", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Валюта));
	СтруктураВыгрузки.Вставить("СуммаДокумента", СсылкаНаОбъект.СуммаДокумента);
	
	СтруктураВыгрузки.Вставить("Выдать", СсылкаНаОбъект.Выдать); 
	СтруктураВыгрузки.Вставить("Основание", СсылкаНаОбъект.Основание); 
	СтруктураВыгрузки.Вставить("Приложение", СсылкаНаОбъект.Приложение); 
	СтруктураВыгрузки.Вставить("ПоДокументу", СсылкаНаОбъект.ПоДокументу); 
	
	СтруктураВыгрузки.Вставить("СтатьяДвиженияДенежныхСредств", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.СтатьяДвиженияДенежныхСредств)); 
	
	//что с документом основания???
	//что в ведомостью???    
	
	Если ЗначениеЗаполнено(СсылкаНаОбъект.БанковскийСчет) Тогда
		СтруктураВыгрузки.Вставить("БанковскийСчетОрганизации", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.БанковскийСчет));
	КонецЕсли;
	
	Комментарий = СсылкаНаОбъект.Комментарий;  
	
	РасшифровкаПлатежа = Новый Массив;
	
	Для Каждого Стр Из СсылкаНаОбъект.РасшифровкаПлатежа Цикл
		Нстр = Новый Структура; 
		
		НСтр.Вставить("Сумма", Стр.Сумма);
		НСтр.Вставить("СуммаВзаиморасчетов", Стр.СуммаВзаиморасчетов); 
		НСтр.Вставить("СтавкаНДС", XMLСтрока(Стр.СтавкаНДС.ПеречислениеСтавкаНДС));
		НСтр.Вставить("СуммаНДС", Стр.СуммаНДС);	
		НСтр.Вставить("СтатьяДвиженияДенежныхСредств", СформироватьУИДДляВыгрузки(Стр.СтатьяДвиженияДенежныхСредств)); 
		Нстр.Вставить("КурсВзаиморасчетов", Стр.КурсЧислительВзаиморасчетов);
		Нстр.Вставить("КратностьВзаиморасчетов", Стр.КурсЗнаменательВзаиморасчетов); 
		
		//91.01
		Если ЗначениеЗаполнено(Стр.НастройкаСчетовУчета) И ЗначениеЗаполнено(Стр.НастройкаСчетовУчета.СчетУчета) Тогда 
			СтруктураВыгрузки.Вставить("СчетУчетаРасчетовСКонтрагентом", КодСчетаРегл(Стр.НастройкаСчетовУчета.СчетУчета));
		КонецЕсли;
		
		ОбъектРасчетов = Стр.ОбъектРасчетов.Объект;
		Если ЗначениеЗаполнено(ОбъектРасчетов) И НЕ ЗначениеЗаполнено(Комментарий) И ОбъектРасчетов <> СсылкаНаОбъект Тогда
			Комментарий = "ERP: " + Стр.ОбъектРасчетов.Наименование;
		КонецЕсли;	  
		
		РасшифровкаПлатежа.Добавить(Нстр);	
	КонецЦикла;	                        
	
	СтруктураВыгрузки.Вставить("Комментарий", Комментарий);
	СтруктураВыгрузки.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
	
	НовОб = ТаблицаВыгрузки.Добавить();
	НовОб.СсылкаНаОбъект = СсылкаНаОбъект;
	НовОб.СтруктураВыгрузки = СтруктураВыгрузки;			
	
	
КонецПроцедуры

Процедура ВыгрузитьСписаниеБезналичныхДенежныхСредств(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок)
	
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("УИД", СформироватьУИДДляВыгрузки(СсылкаНаОбъект)); 
	СтруктураВыгрузки.Вставить("Представление", Строка(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("ТипОбъекта", "СписаниеБезналичныхДенежныхСредств");
	СтруктураВыгрузки.Вставить("Номер", СсылкаНаОбъект.Номер); 
	СтруктураВыгрузки.Вставить("Дата", СсылкаНаОбъект.Дата);
	СтруктураВыгрузки.Вставить("Проведен", СсылкаНаОбъект.Проведен);	
	СтруктураВыгрузки.Вставить("ПометкаУдаления", СсылкаНаОбъект.ПометкаУдаления);
	СтруктураВыгрузки.Вставить("ХозяйственнаяОперация", XMLСтрока(СсылкаНаОбъект.ХозяйственнаяОперация));
	//
	СтруктураВыгрузки.Вставить("ДатаВходящегоДокумента", СсылкаНаОбъект.ДатаВходящегоДокумента);
	СтруктураВыгрузки.Вставить("НомерВходящегоДокумента", СсылкаНаОбъект.НомерВходящегоДокумента);  
	//
	СтруктураВыгрузки.Вставить("СуммаДокумента", СсылкаНаОбъект.СуммаДокумента);
	//
	СтруктураВыгрузки.Вставить("Организация", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Организация));
	СтруктураВыгрузки.Вставить("Валюта", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Валюта));
	СтруктураВыгрузки.Вставить("СтатьяДвиженияДенежныхСредств", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.СтатьяДвиженияДенежныхСредств));
	СтруктураВыгрузки.Вставить("Подразделение", ?(ЗначениеЗаполнено(СсылкаНаОбъект.Подразделение), СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Подразделение), ""));
	СтруктураВыгрузки.Вставить("ПодотчетноеЛицо", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.ПодотчетноеЛицо));
	СтруктураВыгрузки.Вставить("РегистрацияВНалоговомОргане", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.РегистрацияВНалоговомОргане));  
	СтруктураВыгрузки.Вставить("ПроведеноБанком", СсылкаНаОбъект.ПроведеноБанком);  
	
	//Налог
	СтруктураВыгрузки.Вставить("ТипНалога", XMLСтрока(СсылкаНаОбъект.ТипНалога)); 
	СтруктураВыгрузки.Вставить("НалоговыйПериод", ПоказательПериодаВДату(СсылкаНаОбъект.ПоказательПериода));
	Если ЗначениеЗаполнено(СсылкаНаОбъект.НастройкаСчетовУчета) И ЗначениеЗаполнено(СсылкаНаОбъект.НастройкаСчетовУчета.СчетУчета) Тогда
		СтруктураВыгрузки.Вставить("СчетУчетаИзНастройкиСчетовУчета", КодСчетаРегл(СсылкаНаОбъект.НастройкаСчетовУчета.СчетУчета));  
	КонецЕсли;          
	
	Контрагент = СсылкаНаОбъект.Контрагент;
	Если ЗначениеЗаполнено(СсылкаНаОбъект.БанковскийСчетПолучатель) Тогда
		Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
			Контрагент = СсылкаНаОбъект.БанковскийСчетПолучатель.Владелец;   
		КонецЕсли;
		СтруктураВыгрузки.Вставить("БанковскийСчетКонтрагента", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.БанковскийСчетПолучатель));
	ИначеЕсли ЗначениеЗаполнено(СсылкаНаОбъект.БанковскийСчетКонтрагента) Тогда
		СтруктураВыгрузки.Вставить("БанковскийСчетКонтрагента", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.БанковскийСчетКонтрагента));
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(СсылкаНаОбъект.БанковскийСчет) Тогда
		СтруктураВыгрузки.Вставить("БанковскийСчетОрганизации", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.БанковскийСчет));
	КонецЕсли;
	
	СтруктураВыгрузки.Вставить("Контрагент", СформироватьУИДДляВыгрузки(Контрагент));
	
	//тип Договора - составной 
	Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	Если ЗначениеЗаполнено(СсылкаНаОбъект.ДоговорЭквайринга) Тогда
		Договор = СсылкаНаОбъект.ДоговорЭквайринга;
	ИначеЕсли ЗначениеЗаполнено(СсылкаНаОбъект.Договор) Тогда
		Договор = СсылкаНаОбъект.Договор; 
	КонецЕсли;
				
	Комментарий = СсылкаНаОбъект.НазначениеПлатежа; 
	
	РасшифровкаПлатежа = Новый Массив; 

	Для каждого Стр Из СсылкаНаОбъект.РасшифровкаПлатежа Цикл
		НСтр = Новый Структура;
		НСтр.Вставить("Сумма", Стр.Сумма);
		НСтр.Вставить("СуммаВзаиморасчетов", Стр.СуммаВзаиморасчетов); 
		НСтр.Вставить("СтавкаНДС", XMLСтрока(Стр.СтавкаНДС.ПеречислениеСтавкаНДС));
		НСтр.Вставить("СуммаНДС", Стр.СуммаНДС);	
		НСтр.Вставить("СтатьяДвиженияДенежныхСредств", СформироватьУИДДляВыгрузки(Стр.СтатьяДвиженияДенежныхСредств)); 
		Нстр.Вставить("КурсВзаиморасчетов", Стр.КурсЧислительВзаиморасчетов);
		Нстр.Вставить("КратностьВзаиморасчетов", Стр.КурсЗнаменательВзаиморасчетов); 
		
		ОбъектРасчетов = Стр.ОбъектРасчетов.Объект;  
		
		Если ЗначениеЗаполнено(Стр.СтатьяРасходов) И ТипЗнч(Стр.СтатьяРасходов) = Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов") Тогда
			СтруктураВыгрузки.Вставить("СчетУчетаРасчетовСКонтрагентом", КодСчетаРегл(ПланыСчетов.Хозрасчетный.ПрочиеРасходы)); 
			СтруктураВыгрузки.Вставить("СтатьяРасходов", Стр.СтатьяРасходов.Наименование);
		ИначеЕсли ЗначениеЗаполнено(Стр.НастройкаСчетовУчета) И ЗначениеЗаполнено(Стр.НастройкаСчетовУчета.СчетУчета) Тогда 
			СтруктураВыгрузки.Вставить("СчетУчетаРасчетовСКонтрагентом", КодСчетаРегл(Стр.НастройкаСчетовУчета.СчетУчета)); 
		ИначеЕсли ЗначениеЗаполнено(ОбъектРасчетов) И ТипЗнч(ОбъектРасчетов) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
			Нстр.Вставить("СчетУчетаРасчетовСКонтрагентом", КодСчетаРегл(ПолучитьСчетУчетаИзНастроек(Перечисления.ВидыСчетовРеглУчета.РасчетыСПоставщиками, ОбъектРасчетов.Организация, ОбъектРасчетов.ГруппаФинансовогоУчета, ОбъектРасчетов.Склад)));
			Нстр.Вставить("СчетУчетаРасчетовПоАвансам", КодСчетаРегл(ПолучитьСчетУчетаИзНастроек(Перечисления.ВидыСчетовРеглУчета.АвансыВыданные, ОбъектРасчетов.Организация, ОбъектРасчетов.ГруппаФинансовогоУчета, ОбъектРасчетов.Склад)));
		КонецЕсли; 
				
		Если ЗначениеЗаполнено(ОбъектРасчетов) И НЕ ЗначениеЗаполнено(Комментарий) И ОбъектРасчетов <> СсылкаНаОбъект Тогда
			Комментарий = "ERP: " + Стр.ОбъектРасчетов.Наименование;
		КонецЕсли;	  
		
		Если НЕ ЗначениеЗаполнено(СтруктураВыгрузки.Подразделение) Тогда 
			СтруктураВыгрузки.Вставить("Подразделение", СформироватьУИДДляВыгрузки(Стр.Подразделение));  
		КонецЕсли;    
		
		СтруктураВыгрузки.Вставить("Ведомость", СформироватьУИДДляВыгрузки(?(ЗначениеЗаполнено(Стр.Ведомость), Стр.Ведомость, Документы.ВедомостьНаВыплатуЗарплатыВБанк.ПустаяСсылка())));
		
		РасшифровкаПлатежа.Добавить(НСтр);
	КонецЦикла;        
	
	СтруктураВыгрузки.Вставить("Договор", СформироватьУИДДляВыгрузки(Договор));
	СтруктураВыгрузки.Вставить("Комментарий", Комментарий);
	СтруктураВыгрузки.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);   
		
	НовОб = ТаблицаВыгрузки.Добавить();
	НовОб.СсылкаНаОбъект = СсылкаНаОбъект;
	НовОб.СтруктураВыгрузки = СтруктураВыгрузки;			
	
КонецПроцедуры   

Процедура ВыгрузитьВедомостьНаВыплатуЗарплатыВБанк(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок)
	
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("УИД", СформироватьУИДДляВыгрузки(СсылкаНаОбъект)); 
	СтруктураВыгрузки.Вставить("Представление", Строка(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("ТипОбъекта", "ВедомостьНаВыплатуЗарплатыВБанк");
	СтруктураВыгрузки.Вставить("Номер", СсылкаНаОбъект.Номер); 
	СтруктураВыгрузки.Вставить("Дата", СсылкаНаОбъект.Дата);
	СтруктураВыгрузки.Вставить("Проведен", СсылкаНаОбъект.Проведен);	
	СтруктураВыгрузки.Вставить("ПометкаУдаления", СсылкаНаОбъект.ПометкаУдаления);
	//
	СтруктураВыгрузки.Вставить("Организация", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Организация));
	СтруктураВыгрузки.Вставить("Подразделение", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Подразделение));

	СтруктураВыгрузки.Вставить("ПериодРегистрации", СсылкаНаОбъект.ПериодРегистрации);
	СтруктураВыгрузки.Вставить("ЗарплатныйПроект", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.ЗарплатныйПроект));
	СтруктураВыгрузки.Вставить("СпособВыплаты", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.СпособВыплаты));
	СтруктураВыгрузки.Вставить("Округление", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Округление));
	СтруктураВыгрузки.Вставить("СуммаПоДокументу", СсылкаНаОбъект.СуммаПоДокументу);
	СтруктураВыгрузки.Вставить("ДатаВыплаты", СсылкаНаОбъект.ДатаВыплаты);
	СтруктураВыгрузки.Вставить("ВидДоходаИсполнительногоПроизводства", XMLСтрока(СсылкаНаОбъект.ВидДоходаИсполнительногоПроизводства));
	СтруктураВыгрузки.Вставить("НомерРеестра", СсылкаНаОбъект.НомерРеестра);
	
	СтруктураВыгрузки.Вставить("Руководитель", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Руководитель));
	СтруктураВыгрузки.Вставить("ДолжностьРуководителя", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.ДолжностьРуководителя)); 
	
	СтруктураВыгрузки.Вставить("ГлавныйБухгалтер", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.ГлавныйБухгалтер));
	СтруктураВыгрузки.Вставить("ДолжностьГлавногоБухгалтера", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.ДолжностьГлавногоБухгалтера));
	
	СтруктураВыгрузки.Вставить("Бухгалтер", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Бухгалтер));    
	СтруктураВыгрузки.Вставить("ДолжностьБухгалтера", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.ДолжностьБухгалтера));    
	
	СтруктураВыгрузки.Вставить("КраткийСоставДокумента", СсылкаНаОбъект.КраткийСоставДокумента);
	СтруктураВыгрузки.Вставить("Комментарий", СсылкаНаОбъект.Комментарий);   
	
	Состав = Новый Массив; 
	Для каждого Стр Из СсылкаНаОбъект.Состав Цикл
		НСтр = Новый Структура;
		НСтр.Вставить("ИдентификаторСтроки", Строка(Стр.ИдентификаторСтроки));
		НСтр.Вставить("ФизическоеЛицо", СформироватьУИДДляВыгрузки(Стр.ФизическоеЛицо));
		НСтр.Вставить("НомерЛицевогоСчета", Стр.НомерЛицевогоСчета);
		НСтр.Вставить("ВзысканнаяСумма", Стр.ВзысканнаяСумма);
		
		Состав.Добавить(НСтр);
	КонецЦикла;   
	СтруктураВыгрузки.Вставить("Состав", Состав);
	
	Зарплата = Новый Массив; 
	Для каждого Стр Из СсылкаНаОбъект.Зарплата Цикл
		НСтр = Новый Структура;
		НСтр.Вставить("ИдентификаторСтроки", Строка(Стр.ИдентификаторСтроки));
		НСтр.Вставить("Сотрудник", СформироватьУИДДляВыгрузки(Стр.Сотрудник));
		НСтр.Вставить("ФизическоеЛицо", СформироватьУИДДляВыгрузки(Стр.ФизическоеЛицо));
		НСтр.Вставить("Подразделение", СформироватьУИДДляВыгрузки(Стр.Подразделение));
		НСтр.Вставить("ПериодВзаиморасчетов", Стр.ПериодВзаиморасчетов);
		НСтр.Вставить("СтатьяРасходов", СформироватьУИДДляВыгрузки(Стр.СтатьяРасходов));
		НСтр.Вставить("КВыплате", Стр.КВыплате);
		НСтр.Вставить("КомпенсацияЗаЗадержкуЗарплаты", Стр.КомпенсацияЗаЗадержкуЗарплаты);
		НСтр.Вставить("НомерЛицевогоСчета", Стр.НомерЛицевогоСчета);
		
		Зарплата.Добавить(НСтр);
	КонецЦикла;   
	СтруктураВыгрузки.Вставить("Зарплата", Зарплата);
			
	НДФЛ = Новый Массив; 
	Для каждого Стр Из СсылкаНаОбъект.НДФЛ Цикл
		НСтр = Новый Структура;
		НСтр.Вставить("ИдентификаторСтроки", Строка(Стр.ИдентификаторСтроки));
		НСтр.Вставить("ФизическоеЛицо", СформироватьУИДДляВыгрузки(Стр.ФизическоеЛицо));
		НСтр.Вставить("СтавкаНалогообложенияРезидента", XMLСтрока(Стр.СтавкаНалогообложенияРезидента)); 
		НСтр.Вставить("МесяцНалоговогоПериода", Стр.МесяцНалоговогоПериода); 
		НСтр.Вставить("КодДохода", СформироватьУИДДляВыгрузки(Стр.КодДохода)); 
		НСтр.Вставить("РегистрацияВНалоговомОргане", СформироватьУИДДляВыгрузки(Стр.РегистрацияВНалоговомОргане)); 
		НСтр.Вставить("Подразделение", СформироватьУИДДляВыгрузки(Стр.Подразделение)); 
		НСтр.Вставить("ВключатьВДекларациюПоНалогуНаПрибыль", Стр.ВключатьВДекларациюПоНалогуНаПрибыль); 
		
		НСтр.Вставить("Сумма", Стр.Сумма);
		НСтр.Вставить("СуммаСПревышения", Стр.СуммаСПревышения);
		НСтр.Вставить("КатегорияДохода", XMLСтрока(Стр.КатегорияДохода));
		НСтр.Вставить("СтатьяРасходов", СформироватьУИДДляВыгрузки(Стр.СтатьяРасходов));
		
		НДФЛ.Добавить(НСтр);
	КонецЦикла;   
	СтруктураВыгрузки.Вставить("НДФЛ", НДФЛ); 
	//
	НовОб = ТаблицаВыгрузки.Добавить();
	НовОб.СсылкаНаОбъект = СсылкаНаОбъект;
	НовОб.СтруктураВыгрузки = СтруктураВыгрузки;			
	
КонецПроцедуры

Процедура ВыгрузитьПриобретение(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок)
	
	Если СсылкаНаОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо Тогда
		ВыгрузитьПриобретениеКакАвансовыйОтчет(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок);	
	Иначе
		ВыгрузитьПриобретениеКакПриобретение(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьПриобретениеКакПриобретение(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок)
	
	Если СсылкаНаОбъект.Пустая() Тогда
		Возврат;
	КонецЕсли;	 
	
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("УИД", СформироватьУИДДляВыгрузки(СсылкаНаОбъект)); 	
	СтруктураВыгрузки.Вставить("ТипОбъекта", "ПриобретениеТоваровУслуг");
	СтруктураВыгрузки.Вставить("Номер", СсылкаНаОбъект.Номер); 
	СтруктураВыгрузки.Вставить("Дата", СсылкаНаОбъект.Дата);
	СтруктураВыгрузки.Вставить("Проведен", СсылкаНаОбъект.Проведен);
	СтруктураВыгрузки.Вставить("Представление", Строка(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("ПометкаУдаления", СсылкаНаОбъект.ПометкаУдаления);
	СтруктураВыгрузки.Вставить("ХозяйственнаяОперация",XMLстрока(СсылкаНаОбъект.ХозяйственнаяОперация));
	СтруктураВыгрузки.Вставить("Организация", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Организация));
	
	Если СсылкаНаОбъект.Склад.ЭтоГруппа И СсылкаНаОбъект.Товары.Количество() > 0 Тогда
		СтруктураВыгрузки.Вставить("Склад", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Товары[0].Склад));
	Иначе
		СтруктураВыгрузки.Вставить("Склад", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Склад));
	КонецЕсли;
	
	СтруктураВыгрузки.Вставить("Подразделение", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Подразделение));
	СтруктураВыгрузки.Вставить("Контрагент", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Контрагент));
	СтруктураВыгрузки.Вставить("Договор", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Договор));
	СтруктураВыгрузки.Вставить("Валюта", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Валюта));
	СтруктураВыгрузки.Вставить("НомерВходящегоДокумента", СсылкаНаОбъект.НомерВходящегоДокумента); 
	СтруктураВыгрузки.Вставить("ДатаВходящегоДокумента", СсылкаНаОбъект.ДатаВходящегоДокумента);
	СтруктураВыгрузки.Вставить("Грузоотправитель", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Грузоотправитель));
	СтруктураВыгрузки.Вставить("КурсЧислитель", СсылкаНаОбъект.КурсЧислитель);
	СтруктураВыгрузки.Вставить("КурсЗнаменатель", СсылкаНаОбъект.КурсЗнаменатель);
	СтруктураВыгрузки.Вставить("ЦенаВключаетНДС", СсылкаНаОбъект.ЦенаВключаетНДС);
	СтруктураВыгрузки.Вставить("Комментарий", СсылкаНаОбъект.Комментарий);  
	
	
	СтруктураВыгрузки.Вставить("СчетУчетаРасчетов",КодСчетаРегл(ПолучитьСчетУчетаИзНастроек(Перечисления.ВидыСчетовРеглУчета.РасчетыСПоставщиками,СсылкаНаОбъект.Организация,СсылкаНаОбъект.ГруппаФинансовогоУчета,СсылкаНаОбъект.Склад)));
	СтруктураВыгрузки.Вставить("СчетУчетаАвансов",КодСчетаРегл(ПолучитьСчетУчетаИзНастроек(Перечисления.ВидыСчетовРеглУчета.АвансыВыданные,СсылкаНаОбъект.Организация,СсылкаНаОбъект.ГруппаФинансовогоУчета,СсылкаНаОбъект.Склад)));
	
	//СФ  
	ДополнитьСтрукутуруДаннымиСчетФактурыПолученной(СтруктураВыгрузки, СсылкаНаОбъект);
	
	
	//Заглушка по старым закупкам по аренде
	ЗапросАрендаСч41 = Новый Запрос;
	ЗапросАрендаСч41.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт1 КАК Номенклатура
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			,
	|			,
	|			Регистратор = &Документ
	|			И СчетДт = Значение(ПланСчетов.Хозрасчетный.ТоварыНаСкладах)
	|			И СубконтоДт1.ГруппаФинансовогоУчета = &ГруппаФинансовогоУчета
	|			,
	|			,
	|			) КАК ХозрасчетныйДвиженияССубконто
	|";
	
	ЗапросАрендаСч41.УстановитьПараметр("Документ",СсылкаНаОбъект); 
	ЗапросАрендаСч41.УстановитьПараметр("ГруппаФинансовогоУчета",Справочники.ГруппыФинансовогоУчетаНоменклатуры.НайтиПоНаименованию("Аренда инструмента"));
	мсвНоменклатураАрендыСч41 = ЗапросАрендаСч41.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура");
	
	мсвТЧТовары = Новый Массив;
	
	Для Каждого стрТовары Из СсылкаНаОбъект.Товары Цикл
		
		структураСтрокаТовары = Новый Структура;
		структураСтрокаТовары.Вставить("Номенклатура",СформироватьУИДДляВыгрузки(стрТовары.Номенклатура));
		структураСтрокаТовары.Вставить("Количество",стрТовары.Количество);
		структураСтрокаТовары.Вставить("Цена",стрТовары.Цена);
		структураСтрокаТовары.Вставить("Сумма",стрТовары.Сумма);
		структураСтрокаТовары.Вставить("СтавкаНДС",XMLСтрока(стрТовары.СтавкаНДС.ПеречислениеСтавкаНДС));
	    структураСтрокаТовары.Вставить("СуммаНДС",стрТовары.СуммаНДС);
		структураСтрокаТовары.Вставить("СуммаСНДС",стрТовары.СуммаСНДС);		
		структураСтрокаТовары.Вставить("Склад",СформироватьУИДДляВыгрузки(стрТовары.Склад)); 
		
		структураСтрокаТовары.Вставить("ЭтоУслуга", ?(стрТовары.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга,Истина,Ложь));
			
		структураНомерГТД = Новый Структура("СтранаПроисхождения, Код, ПометкаУдаления, РегистрационныйНомер, СтранаВвозаНеРФ");
		ЗаполнитьЗначенияСвойств(структураНомерГТД, стрТовары.НомерГТД);
		структураНомерГТД.СтранаПроисхождения = СформироватьУИДДляВыгрузки(стрТовары.НомерГТД.СтранаПроисхождения);
		структураСтрокаТовары.Вставить("НомерГТД", структураНомерГТД);
		
		структураСтрокаТовары.Вставить("СчетУчета","");
		структураСтрокаТовары.Вставить("СчетУчетаНДС","");
		структураСтрокаТовары.Вставить("ДокументДляРаспределенияРасходов","");   
		
		Если мсвНоменклатураАрендыСч41.Найти(стрТовары.Номенклатура) <> Неопределено Тогда
			структураСтрокаТовары.СчетУчета = КодСчетаРегл(ПланыСчетов.Хозрасчетный.ТоварыНаСкладах);		
		КонецЕсли;
		
		структураСтрокаТовары.Вставить("РаспределитьНаСебестоимость",Ложь);
		Если структураСтрокаТовары.ЭтоУслуга 
			И стрТовары.СписатьНаРасходы Тогда
			
			СчетУчета = ПолучитьСчетУчетаИзНастроек(Перечисления.ВидыСчетовРеглУчета.Расходы,СсылкаНаОбъект.Организация,стрТовары.СтатьяРасходов.ГруппаФинансовогоУчетаРегл,стрТовары.Склад);
			структураСтрокаТовары.СчетУчета = КодСчетаРегл(СчетУчета);
			
			структураСтрокаТовары.Вставить("СтатьяРасходов",СформироватьУИДДляВыгрузки(стрТовары.СтатьяРасходов));
			
			Если  стрТовары.СтатьяРасходов.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров Тогда  
				структураСтрокаТовары.РаспределитьНаСебестоимость = Истина; 
				структураСтрокаТовары.СчетУчетаНДС = КодСчетаРегл(ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ);
				Если СсылкаНаОбъект <> стрТовары.АналитикаРасходов Тогда
					структураСтрокаТовары.ДокументДляРаспределенияРасходов = СформироватьУИДДляВыгрузки(стрТовары.АналитикаРасходов);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		мсвТЧТовары.Добавить(структураСтрокаТовары);
				
	КонецЦикла; 
	
	СтруктураВыгрузки.Вставить("Товары",мсвТЧТовары);
	
	НовОб = ТаблицаВыгрузки.Добавить();
	НовОб.СсылкаНаОбъект = СсылкаНаОбъект;
	НовОб.СтруктураВыгрузки = СтруктураВыгрузки;			
	
КонецПроцедуры

Процедура ВыгрузитьПриобретениеКакАвансовыйОтчет(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок)
	
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("УИД", СформироватьУИДДляВыгрузки(СсылкаНаОбъект)); 
	СтруктураВыгрузки.Вставить("ТипОбъекта", "АвансовыйОтчет");
	СтруктураВыгрузки.Вставить("Номер", СсылкаНаОбъект.Номер); 
	СтруктураВыгрузки.Вставить("Дата", СсылкаНаОбъект.Дата);
	СтруктураВыгрузки.Вставить("Префикс", "П");
	СтруктураВыгрузки.Вставить("Проведен", СсылкаНаОбъект.Проведен);
	СтруктураВыгрузки.Вставить("Представление", Строка(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("ПометкаУдаления", СсылкаНаОбъект.ПометкаУдаления);
	СтруктураВыгрузки.Вставить("ХозяйственнаяОперация",XMLстрока(СсылкаНаОбъект.ХозяйственнаяОперация));
	СтруктураВыгрузки.Вставить("ВидОперации", "ПокупкаОплатаПрочее");
	СтруктураВыгрузки.Вставить("Организация", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Организация));
	СтруктураВыгрузки.Вставить("Склад", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Склад));
	СтруктураВыгрузки.Вставить("ПодразделениеОрганизации", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Подразделение));
	СтруктураВыгрузки.Вставить("ФизЛицо", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.ПодотчетноеЛицо));
	СтруктураВыгрузки.Вставить("ВалютаДокумента", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Валюта));
	СтруктураВыгрузки.Вставить("КурсЧислитель", СсылкаНаОбъект.КурсЧислитель);
	СтруктураВыгрузки.Вставить("КурсЗнаменатель", СсылкаНаОбъект.КурсЗнаменатель);
	СтруктураВыгрузки.Вставить("ЦенаВключаетНДС", СсылкаНаОбъект.ЦенаВключаетНДС);
	СтруктураВыгрузки.Вставить("Комментарий", СсылкаНаОбъект.Комментарий);  
	СтруктураВыгрузки.Вставить("НазначениеАванса", "");
	СтруктураВыгрузки.Вставить("КоличествоДокументов", "");
	СтруктураВыгрузки.Вставить("КоличествоЛистов", "");
				
	мсвТЧТовары = Новый Массив;
	мсвТЧПрочее = Новый Массив;
	
	Для Каждого стрТовары Из СсылкаНаОбъект.Товары Цикл
		
		Если НЕ стрТовары.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда 		
			структураСтрока = Новый Структура;
			структураСтрока.Вставить("Номенклатура",СформироватьУИДДляВыгрузки(стрТовары.Номенклатура));
			структураСтрока.Вставить("Количество",стрТовары.Количество);
			структураСтрока.Вставить("Цена",стрТовары.Цена);
			структураСтрока.Вставить("Сумма",стрТовары.Сумма);
			структураСтрока.Вставить("СтавкаНДС",XMLСтрока(стрТовары.СтавкаНДС.ПеречислениеСтавкаНДС));
		    структураСтрока.Вставить("СуммаНДС",стрТовары.СуммаНДС);
			структураСтрока.Вставить("СуммаСНДС",стрТовары.СуммаСНДС);		
				
			структураНомерГТД = Новый Структура("СтранаПроисхождения, Код, ПометкаУдаления, РегистрационныйНомер, СтранаВвозаНеРФ");
			ЗаполнитьЗначенияСвойств(структураНомерГТД, стрТовары.НомерГТД);
			структураНомерГТД.СтранаПроисхождения = СформироватьУИДДляВыгрузки(стрТовары.НомерГТД.СтранаПроисхождения);
			структураСтрока.Вставить("НомерГТД", структураНомерГТД);
						
			структураСтрока.Вставить("СчетУчета","");
			структураСтрока.Вставить("СчетУчетаНДС","");
			
			мсвТЧТовары.Добавить(структураСтрока);	
			
		Иначе

			структураСтрока = Новый Структура;
			структураСтрока.Вставить("Номенклатура",СформироватьУИДДляВыгрузки(стрТовары.Номенклатура));
			структураСтрока.Вставить("Количество",стрТовары.Количество);
			структураСтрока.Вставить("Цена",стрТовары.Цена);
			структураСтрока.Вставить("Сумма",стрТовары.Сумма);
			структураСтрока.Вставить("СтавкаНДС",XMLСтрока(стрТовары.СтавкаНДС.ПеречислениеСтавкаНДС));
		    структураСтрока.Вставить("СуммаНДС",стрТовары.СуммаНДС);
			структураСтрока.Вставить("СуммаСНДС",стрТовары.СуммаСНДС);		

			структураСтрока.Вставить("СчетУчета","");
			структураСтрока.Вставить("СчетУчетаНДС","");
			структураСтрока.Вставить("ДокументДляРаспределенияРасходов","");
			
			структураСтрока.Вставить("РаспределитьНаСебестоимость",Ложь);
			Если стрТовары.СписатьНаРасходы Тогда
				
				СчетУчета = ПолучитьСчетУчетаИзНастроек(Перечисления.ВидыСчетовРеглУчета.Расходы,СсылкаНаОбъект.Организация,стрТовары.СтатьяРасходов.ГруппаФинансовогоУчетаРегл,стрТовары.Склад);
				структураСтрока.СчетУчета = КодСчетаРегл(СчетУчета);
				
				структураСтрока.Вставить("СтатьяРасходов",СформироватьУИДДляВыгрузки(стрТовары.СтатьяРасходов));
				
				Если  стрТовары.СтатьяРасходов.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров Тогда  
					структураСтрока.РаспределитьНаСебестоимость = Истина; 
				КонецЕсли;
				
			КонецЕсли;	
			
			мсвТЧПрочее.Добавить(структураСтрока);			
			
		КонецЕсли;                                	
				
	КонецЦикла; 
	
	СтруктураВыгрузки.Вставить("Товары",мсвТЧТовары);
	СтруктураВыгрузки.Вставить("Прочее",мсвТЧПрочее);
	
	НовОб = ТаблицаВыгрузки.Добавить();
	НовОб.СсылкаНаОбъект = СсылкаНаОбъект;
	НовОб.СтруктураВыгрузки = СтруктураВыгрузки;			
	
КонецПроцедуры

Процедура ВыгрузитьРеализацию(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок)

	Если СсылкаНаОбъект.Пустая() Тогда
		Возврат;
	КонецЕсли;	
	
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("УИД", СформироватьУИДДляВыгрузки(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("Представление", Строка(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("ТипОбъекта", "РеализацияТоваровУслуг");		
	СтруктураВыгрузки.Вставить("ПометкаУдаления", СсылкаНаОбъект.ПометкаУдаления);	
	СтруктураВыгрузки.Вставить("Проведен", СсылкаНаОбъект.Проведен);	
		
	СтруктураВыгрузки.Вставить("Номер", СсылкаНаОбъект.Номер); 
	СтруктураВыгрузки.Вставить("Дата", СсылкаНаОбъект.Дата);
	
	СтруктураВыгрузки.Вставить("ХозяйственнаяОперация",XMLстрока(СсылкаНаОбъект.ХозяйственнаяОперация)); 
	//	ПередачаНаКомиссию - формируем в БП док с видом операция ПродажаКомиссия (или ОтгрузкаБезПереходаПраваСобственности - скорее всего, это про ОХ)
	//	РеализацияКлиенту - формируем по ситуации Товары, Услуги или ПродажаКомиссия
	СтруктураВыгрузки.Вставить("Организация", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Организация));
	СтруктураВыгрузки.Вставить("Склад", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Склад));
	СтруктураВыгрузки.Вставить("Подразделение", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Подразделение));
	СтруктураВыгрузки.Вставить("Контрагент", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Контрагент));
	СтруктураВыгрузки.Вставить("Договор", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Договор));
	СтруктураВыгрузки.Вставить("Валюта", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Валюта));
	СтруктураВыгрузки.Вставить("Грузоотправитель", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Грузоотправитель));
	СтруктураВыгрузки.Вставить("Грузополучатель", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Грузополучатель));
	СтруктураВыгрузки.Вставить("КурсЧислитель", СсылкаНаОбъект.КурсЧислитель);
	СтруктураВыгрузки.Вставить("КурсЗнаменатель", СсылкаНаОбъект.КурсЗнаменатель);
	СтруктураВыгрузки.Вставить("ЦенаВключаетНДС", СсылкаНаОбъект.ЦенаВключаетНДС);
	СтруктураВыгрузки.Вставить("Комментарий", СсылкаНаОбъект.Комментарий); 
	
	
	СтруктураВыгрузки.Вставить("СчетУчетаРасчетов",КодСчетаРегл(ПолучитьСчетУчетаИзНастроек(Перечисления.ВидыСчетовРеглУчета.РасчетыСКлиентами,СсылкаНаОбъект.Организация,СсылкаНаОбъект.ГруппаФинансовогоУчета,СсылкаНаОбъект.Склад)));
	СтруктураВыгрузки.Вставить("СчетУчетаАвансов",КодСчетаРегл(ПолучитьСчетУчетаИзНастроек(Перечисления.ВидыСчетовРеглУчета.АвансыПолученные,СсылкаНаОбъект.Организация,СсылкаНаОбъект.ГруппаФинансовогоУчета,СсылкаНаОбъект.Склад)));
	
	//СФ
	СтруктураВыгрузки.Вставить("НомерСФ", "");
	СтруктураВыгрузки.Вставить("ДатаСФ", '00010101');
	СтруктураВыгрузки.Вставить("ПроведенСФ", "");
	
	ЗапросСФ = Новый Запрос;
	ЗапросСФ.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетФактураВыданный.Номер КАК НомерСФ,
	|	СчетФактураВыданный.Дата КАК ДатаСФ,
	|	СчетФактураВыданный.Проведен КАК ПроведенСФ
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.ДокументыОснования.ДокументОснование = &Реализация
	|	И СчетФактураВыданный.Проведен = ИСТИНА
	|";
	
	ЗапросСФ.УстановитьПараметр("Реализация",СсылкаНаОбъект);
	
    ВыборкаСФ = ЗапросСФ.Выполнить().Выбрать();
	    	
	Если ВыборкаСФ.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураВыгрузки,ВыборкаСФ);
	КонецЕсли;
	
	//Заглушка по старым арендным товарам
	ЗапросАрендаСч41 = Новый Запрос;
	ЗапросАрендаСч41.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК Номенклатура
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			,
	|			,
	|			Регистратор = &Документ
	|			И СчетКт = Значение(ПланСчетов.Хозрасчетный.ТоварыНаСкладах)
	|			И СубконтоКт1.ГруппаФинансовогоУчета = &ГруппаФинансовогоУчета
	|			,
	|			,
	|			) КАК ХозрасчетныйДвиженияССубконто
	|";
	
	ЗапросАрендаСч41.УстановитьПараметр("Документ",СсылкаНаОбъект); 
	ЗапросАрендаСч41.УстановитьПараметр("ГруппаФинансовогоУчета",Справочники.ГруппыФинансовогоУчетаНоменклатуры.НайтиПоНаименованию("Аренда инструмента"));
	мсвНоменклатураАрендыСч41 = ЗапросАрендаСч41.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Ссылка КАК Ссылка,
	|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|	РеализацияТоваровУслугТовары.Склад КАК Склад,
	|	РеализацияТоваровУслугТовары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	МИНИМУМ(РеализацияТоваровУслугТовары.НомерСтроки) КАК НомерСтроки,
	|	СУММА(РеализацияТоваровУслугТовары.Количество) КАК Количество,
	|	РеализацияТоваровУслугТовары.Цена КАК Цена,
	|	СУММА(РеализацияТоваровУслугТовары.Сумма) КАК Сумма,
	|	РеализацияТоваровУслугТовары.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(РеализацияТоваровУслугТовары.СуммаНДС) КАК СуммаНДС,
	|	СУММА(РеализацияТоваровУслугТовары.СуммаСНДС) КАК СуммаСНДС
	|ПОМЕСТИТЬ втТоварыРеализации
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслугТовары.Ссылка,
	|	РеализацияТоваровУслугТовары.Номенклатура,
	|	РеализацияТоваровУслугТовары.Склад,
	|	РеализацияТоваровУслугТовары.АналитикаУчетаНоменклатуры,
	|	РеализацияТоваровУслугТовары.Цена,
	|	РеализацияТоваровУслугТовары.СтавкаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|	РеализацияТоваровУслугТовары.Склад КАК Склад,
	|	РеализацияТоваровУслугТовары.Цена КАК Цена,
	|	РеализацияТоваровУслугТовары.СтавкаНДС КАК СтавкаНДС,
	|	ЕСТЬNULL(ВидыЗапасов.НомерГТД, ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)) КАК НомерГТД,
	|	ЕСТЬNULL(ВидыЗапасов.Количество, РеализацияТоваровУслугТовары.Количество) КАК Количество,
	|	ВЫБОР КОГДА РеализацияТоваровУслугТовары.Ссылка.ЦенаВключаетНДС ТОГДА
	|		ЕСТЬNULL(ВидыЗапасов.СуммаСНДС, РеализацияТоваровУслугТовары.Сумма) 
	|	ИНАЧЕ
	|		ЕСТЬNULL(ВидыЗапасов.СуммаСНДС - ВидыЗапасов.СуммаНДС, РеализацияТоваровУслугТовары.Сумма)
	|	КОНЕЦ КАК Сумма, 
	|	ЕСТЬNULL(ВидыЗапасов.СуммаНДС, РеализацияТоваровУслугТовары.СуммаНДС) КАК СуммаНДС,
	|	ЕСТЬNULL(ВидыЗапасов.СуммаСНДС, РеализацияТоваровУслугТовары.СуммаСНДС) КАК СуммаСНДС
	|ИЗ
	|	втТоварыРеализации КАК РеализацияТоваровУслугТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.ВидыЗапасов КАК ВидыЗапасов
	|		ПО (РеализацияТоваровУслугТовары.Ссылка = ВидыЗапасов.Ссылка)
	|			И РеализацияТоваровУслугТовары.АналитикаУчетаНоменклатуры = ВидыЗапасов.АналитикаУчетаНоменклатуры
	|			И РеализацияТоваровУслугТовары.Цена = ВидыЗапасов.Цена
	|УПОРЯДОЧИТЬ ПО
	|	РеализацияТоваровУслугТовары.НомерСтроки
	|";	
	Запрос.УстановитьПараметр("Ссылка",СсылкаНаОбъект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	мсвТовары = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		структураСтрокаТовары = Новый Структура;
		структураСтрокаТовары.Вставить("Номенклатура",СформироватьУИДДляВыгрузки(Выборка.Номенклатура));
		структураСтрокаТовары.Вставить("Количество",Выборка.Количество);
		структураСтрокаТовары.Вставить("Цена",Выборка.Цена);
		структураСтрокаТовары.Вставить("Сумма",Выборка.Сумма);
		структураСтрокаТовары.Вставить("СтавкаНДС",XMLСтрока(Выборка.СтавкаНДС.ПеречислениеСтавкаНДС));
	    структураСтрокаТовары.Вставить("СуммаНДС",Выборка.СуммаНДС);
		структураСтрокаТовары.Вставить("СуммаСНДС",Выборка.СуммаСНДС);		
		структураСтрокаТовары.Вставить("Склад",СформироватьУИДДляВыгрузки(Выборка.Склад)); 
		
		структураСтрокаТовары.Вставить("ЭтоУслуга", ?(Выборка.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга,Истина,Ложь));
			
		структураНомерГТД = Новый Структура("СтранаПроисхождения, Код, ПометкаУдаления, РегистрационныйНомер, СтранаВвозаНеРФ");
		ЗаполнитьЗначенияСвойств(структураНомерГТД, Выборка.НомерГТД);
		структураНомерГТД.СтранаПроисхождения = СформироватьУИДДляВыгрузки(Выборка.НомерГТД.СтранаПроисхождения);
		структураСтрокаТовары.Вставить("НомерГТД", структураНомерГТД);
		
		структураСтрокаТовары.Вставить("СчетУчета","");
		структураСтрокаТовары.Вставить("СчетУчетаНДСПоРеализации","");
		структураСтрокаТовары.Вставить("СчетДоходов","");
		структураСтрокаТовары.Вставить("СчетРасходов","");
		структураСтрокаТовары.Вставить("ЭтоАренда",Ложь);
		
		Если мсвНоменклатураАрендыСч41.Найти(Выборка.Номенклатура) <> Неопределено Тогда
			структураСтрокаТовары.ЭтоАренда = Истина;
			структураСтрокаТовары.СчетУчета = КодСчетаРегл(ПланыСчетов.Хозрасчетный.ТоварыНаСкладах);
			структураСтрокаТовары.СчетУчетаНДСПоРеализации = КодСчетаРегл(ПланыСчетов.Хозрасчетный.Продажи_НДС);
			структураСтрокаТовары.СчетДоходов = КодСчетаРегл(ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД);
			структураСтрокаТовары.СчетРасходов = КодСчетаРегл(ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД);			
		КонецЕсли;
					
		мсвТовары.Добавить(структураСтрокаТовары);
		
	КонецЦикла;
	
	СтруктураВыгрузки.Вставить("Товары",мсвТовары);
	
	НовОб = ТаблицаВыгрузки.Добавить();
	НовОб.СсылкаНаОбъект = СсылкаНаОбъект;
	НовОб.СтруктураВыгрузки = СтруктураВыгрузки;			
	
КонецПроцедуры

Процедура ВыгрузитьКорректировкуРеализации(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок)
	
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("УИД", СформироватьУИДДляВыгрузки(СсылкаНаОбъект)); 	
	СтруктураВыгрузки.Вставить("ТипОбъекта", "КорректировкаРеализации");
	СтруктураВыгрузки.Вставить("Номер", СсылкаНаОбъект.Номер);
	СтруктураВыгрузки.Вставить("Дата", СсылкаНаОбъект.Дата);
	СтруктураВыгрузки.Вставить("Проведен", СсылкаНаОбъект.Проведен);
	СтруктураВыгрузки.Вставить("Представление", Строка(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("ПометкаУдаления", СсылкаНаОбъект.ПометкаУдаления);
	СтруктураВыгрузки.Вставить("ХозяйственнаяОперация", XMLстрока(СсылкаНаОбъект.ХозяйственнаяОперация)); 
	
	СтруктураВыгрузки.Вставить("ДокументОснование", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.ДокументОснование)); 
	
	СтруктураВыгрузки.Вставить("Организация", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Организация));	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТабличнаяЧастьТовары.Ссылка КАК Ссылка,
	|	ТабличнаяЧастьТовары.Номенклатура КАК Номенклатура,
	|	ТабличнаяЧастьТовары.Склад КАК Склад,
	|	ТабличнаяЧастьТовары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	-СУММА(ТабличнаяЧастьТовары.Количество) КАК Количество,
	|	-СУММА(ТабличнаяЧастьТовары.Сумма) КАК Сумма,
	|	ТабличнаяЧастьТовары.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ТабличнаяЧастьТовары.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ТабличнаяЧастьТовары.СуммаСНДС) КАК СуммаСНДС
	|ПОМЕСТИТЬ втТабличнаяЧастьТовары
	|ИЗ
	|	Документ.КорректировкаРеализации.Расхождения КАК ТабличнаяЧастьТовары
	|ГДЕ
	|	ТабличнаяЧастьТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабличнаяЧастьТовары.Ссылка,
	|	ТабличнаяЧастьТовары.Номенклатура,
	|	ТабличнаяЧастьТовары.Склад,
	|	ТабличнаяЧастьТовары.АналитикаУчетаНоменклатуры,
	|	ТабличнаяЧастьТовары.СтавкаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабличнаяЧастьТовары.Номенклатура КАК Номенклатура,
	|	ТабличнаяЧастьТовары.Склад КАК Склад,
	|	ТабличнаяЧастьТовары.СтавкаНДС КАК СтавкаНДС,
	|	ЕСТЬNULL(ВидыЗапасов.НомерГТД, ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)) КАК НомерГТД,
	|	ЕСТЬNULL(ВидыЗапасов.Количество, ТабличнаяЧастьТовары.Количество) КАК Количество,
	|	ВЫБОР КОГДА ТабличнаяЧастьТовары.Ссылка.ЦенаВключаетНДС ТОГДА
	|		ЕСТЬNULL(ВидыЗапасов.СуммаСНДС, ТабличнаяЧастьТовары.Сумма) 
	|	ИНАЧЕ
	|		ЕСТЬNULL(ВидыЗапасов.СуммаСНДС - ВидыЗапасов.СуммаНДС, ТабличнаяЧастьТовары.Сумма)
	|	КОНЕЦ КАК Сумма,
	|	ЕСТЬNULL(ВидыЗапасов.СуммаНДС, ТабличнаяЧастьТовары.СуммаНДС) КАК СуммаНДС,
	|	ЕСТЬNULL(ВидыЗапасов.СуммаСНДС, ТабличнаяЧастьТовары.СуммаСНДС) КАК СуммаСНДС
	|ИЗ
	|	втТабличнаяЧастьТовары КАК ТабличнаяЧастьТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации.ВидыЗапасовОприходование КАК ВидыЗапасов
	|		ПО (ТабличнаяЧастьТовары.Ссылка = ВидыЗапасов.Ссылка)
	|			И ТабличнаяЧастьТовары.АналитикаУчетаНоменклатуры = ВидыЗапасов.АналитикаУчетаНоменклатуры
	|";
	
	Запрос.УстановитьПараметр("Ссылка",СсылкаНаОбъект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	мсвРасхождения = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		структураСтрокаРасхождения = Новый Структура;
		
		структураСтрокаРасхождения.Вставить("Номенклатура",СформироватьУИДДляВыгрузки(Выборка.Номенклатура));
		структураСтрокаРасхождения.Вставить("Количество",Выборка.Количество);
		структураСтрокаРасхождения.Вставить("Сумма",Выборка.Сумма);
		структураСтрокаРасхождения.Вставить("СтавкаНДС",XMLСтрока(Выборка.СтавкаНДС.ПеречислениеСтавкаНДС));
	    структураСтрокаРасхождения.Вставить("СуммаНДС",Выборка.СуммаНДС);
		структураСтрокаРасхождения.Вставить("СуммаСНДС",Выборка.СуммаСНДС);		
		структураСтрокаРасхождения.Вставить("Склад",СформироватьУИДДляВыгрузки(Выборка.Склад));	
		
		структураНомерГТД = Новый Структура("СтранаПроисхождения, Код, ПометкаУдаления, РегистрационныйНомер, СтранаВвозаНеРФ");
		ЗаполнитьЗначенияСвойств(структураНомерГТД, Выборка.НомерГТД);
		структураНомерГТД.СтранаПроисхождения = СформироватьУИДДляВыгрузки(Выборка.НомерГТД.СтранаПроисхождения);
		структураСтрокаРасхождения.Вставить("НомерГТД", структураНомерГТД);
		
		мсвРасхождения.Добавить(структураСтрокаРасхождения);

	КонецЦикла;
	
	СтруктураВыгрузки.Вставить("Расхождения",мсвРасхождения); 
	
	Если СсылкаНаОбъект.ДокументОснование.Дата < '20210101' Тогда
		СтруктураВыгрузки.Вставить("Проводки",ВыгрузитьПроводкиДокумента(СсылкаНаОбъект));		
	КонецЕсли;
	
	
	НовОб = ТаблицаВыгрузки.Добавить();
	НовОб.СсылкаНаОбъект = СсылкаНаОбъект;
	НовОб.СтруктураВыгрузки = СтруктураВыгрузки;
	
КонецПроцедуры

Процедура ВыгрузитьВозвратТоваровОтКлиента(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок)
			
	Если СсылкаНаОбъект.Пустая() Тогда
		Возврат;
	КонецЕсли;	    
	
	Если СсылкаНаОбъект.ДокументРеализации = Неопределено Тогда
		ВыгрузитьДокументКакОперацию(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок);
		Возврат;
	КонецЕсли;
	
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("УИД", СформироватьУИДДляВыгрузки(СсылкаНаОбъект)); 	
	СтруктураВыгрузки.Вставить("ТипОбъекта", "ВозвратТоваровОтПокупателя");
	СтруктураВыгрузки.Вставить("Номер", СсылкаНаОбъект.Номер); 
	СтруктураВыгрузки.Вставить("Дата", СсылкаНаОбъект.Дата);
	СтруктураВыгрузки.Вставить("Проведен", СсылкаНаОбъект.Проведен);
	СтруктураВыгрузки.Вставить("Представление", Строка(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("ПометкаУдаления", СсылкаНаОбъект.ПометкаУдаления);
	СтруктураВыгрузки.Вставить("ХозяйственнаяОперация",XMLстрока(СсылкаНаОбъект.ХозяйственнаяОперация));
	СтруктураВыгрузки.Вставить("Организация", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Организация));
	СтруктураВыгрузки.Вставить("Склад", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Склад));
	СтруктураВыгрузки.Вставить("Подразделение", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Подразделение));
	СтруктураВыгрузки.Вставить("Контрагент", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Контрагент));
	СтруктураВыгрузки.Вставить("Договор", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Договор));
	СтруктураВыгрузки.Вставить("Валюта", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Валюта));
	СтруктураВыгрузки.Вставить("НомерВходящегоДокумента", СсылкаНаОбъект.НомерВходящегоДокумента); 
	СтруктураВыгрузки.Вставить("ДатаВходящегоДокумента", СсылкаНаОбъект.ДатаВходящегоДокумента);
	СтруктураВыгрузки.Вставить("ЦенаВключаетНДС", СсылкаНаОбъект.ЦенаВключаетНДС);
	СтруктураВыгрузки.Вставить("Комментарий", СсылкаНаОбъект.Комментарий); 
	
	СтруктураВыгрузки.Вставить("ЭтоВозвратИзАренды", СсылкаНаОбъект.ТТ_ВозвратИзАренды);
	
	СтруктураВыгрузки.Вставить("СчетУчетаРасчетов",КодСчетаРегл(ПолучитьСчетУчетаИзНастроек(Перечисления.ВидыСчетовРеглУчета.РасчетыСКлиентами,СсылкаНаОбъект.Организация,СсылкаНаОбъект.ГруппаФинансовогоУчета,СсылкаНаОбъект.Склад)));
	СтруктураВыгрузки.Вставить("СчетУчетаАвансов",КодСчетаРегл(ПолучитьСчетУчетаИзНастроек(Перечисления.ВидыСчетовРеглУчета.АвансыПолученные,СсылкаНаОбъект.Организация,СсылкаНаОбъект.ГруппаФинансовогоУчета,СсылкаНаОбъект.Склад)));
	
	СтруктураВыгрузки.Вставить("ДокументОснование",СформироватьУИДДляВыгрузки(СсылкаНаОбъект.ДокументРеализации));
	
	Если СсылкаНаОбъект.ДокументРеализации.Дата < '20210101' Тогда
		СтруктураВыгрузки.Вставить("Проводки",ВыгрузитьПроводкиДокумента(СсылкаНаОбъект));		
	КонецЕсли;
	
	//Заглушка по старым товарам по аренде
	ЗапросАрендаСч41 = Новый Запрос;
	ЗапросАрендаСч41.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК Номенклатура
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			,
	|			,
	|			Регистратор = &Документ
	|			И СчетКт = Значение(ПланСчетов.Хозрасчетный.ТоварыНаСкладах)
	|			И СубконтоКт1.ГруппаФинансовогоУчета = &ГруппаФинансовогоУчета
	|			,
	|			,
	|			) КАК ХозрасчетныйДвиженияССубконто
	|";        		
	
	ЗапросАрендаСч41.УстановитьПараметр("Документ",СсылкаНаОбъект); 
	ЗапросАрендаСч41.УстановитьПараметр("ГруппаФинансовогоУчета",Справочники.ГруппыФинансовогоУчетаНоменклатуры.НайтиПоНаименованию("Аренда инструмента"));
	мсвНоменклатураАрендыСч41 = ЗапросАрендаСч41.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура");
	
	мсвТЧТовары = Новый Массив;
	
	Для Каждого стрТовары Из СсылкаНаОбъект.Товары Цикл
		
		структураСтрокаТовары = Новый Структура;
		структураСтрокаТовары.Вставить("Номенклатура",СформироватьУИДДляВыгрузки(стрТовары.Номенклатура));
		структураСтрокаТовары.Вставить("Количество",стрТовары.Количество);
		структураСтрокаТовары.Вставить("Цена",стрТовары.Цена);
		структураСтрокаТовары.Вставить("Сумма",стрТовары.Сумма);
		структураСтрокаТовары.Вставить("СтавкаНДС",XMLСтрока(стрТовары.СтавкаНДС.ПеречислениеСтавкаНДС));
	    структураСтрокаТовары.Вставить("СуммаНДС",стрТовары.СуммаНДС);
		структураСтрокаТовары.Вставить("СуммаСНДС",стрТовары.СуммаСНДС);		
			
		структураНомерГТД = Новый Структура("СтранаПроисхождения, Код, ПометкаУдаления, РегистрационныйНомер, СтранаВвозаНеРФ");
		ЗаполнитьЗначенияСвойств(структураНомерГТД, стрТовары.НомерГТД);
		структураНомерГТД.СтранаПроисхождения = СформироватьУИДДляВыгрузки(стрТовары.НомерГТД.СтранаПроисхождения);
		структураСтрокаТовары.Вставить("НомерГТД", структураНомерГТД);
		
		структураСтрокаТовары.Вставить("ДокументДляРаспределенияРасходов","");   
		
		структураСтрокаТовары.Вставить("СчетУчета","");
		структураСтрокаТовары.Вставить("СчетУчетаНДСПоРеализации","");
		структураСтрокаТовары.Вставить("СчетДоходов","");
		структураСтрокаТовары.Вставить("СчетРасходов","");
		структураСтрокаТовары.Вставить("ЭтоАренда",Ложь);
		
		Если мсвНоменклатураАрендыСч41.Найти(стрТовары.Номенклатура) <> Неопределено Тогда
			структураСтрокаТовары.ЭтоАренда = Истина;
			структураСтрокаТовары.СчетУчета = КодСчетаРегл(ПланыСчетов.Хозрасчетный.ТоварыНаСкладах);
			структураСтрокаТовары.СчетУчетаНДСПоРеализации = КодСчетаРегл(ПланыСчетов.Хозрасчетный.Продажи_НДС);
			структураСтрокаТовары.СчетДоходов = КодСчетаРегл(ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД);
			структураСтрокаТовары.СчетРасходов = КодСчетаРегл(ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД);			
		КонецЕсли;
		
		мсвТЧТовары.Добавить(структураСтрокаТовары);
				
	КонецЦикла; 
	
	СтруктураВыгрузки.Вставить("Товары",мсвТЧТовары);
	
	НовОб = ТаблицаВыгрузки.Добавить();
	НовОб.СсылкаНаОбъект = СсылкаНаОбъект;
	НовОб.СтруктураВыгрузки = СтруктураВыгрузки;
	
КонецПроцедуры

Процедура ВыгрузитьПередачуТоваровМеждуОрганизациями(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок)
	
	Если СсылкаНаОбъект.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	//Выгружается как пара документов Реализация-Приобретение
	//Реализация:
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("УИД", СформироватьУИДДляВыгрузки(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("Представление", Строка(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("ТипОбъекта", "РеализацияТоваровУслуг");		
	СтруктураВыгрузки.Вставить("ПометкаУдаления", СсылкаНаОбъект.ПометкаУдаления);	
	СтруктураВыгрузки.Вставить("Проведен", СсылкаНаОбъект.Проведен);	
		
	СтруктураВыгрузки.Вставить("Номер", СсылкаНаОбъект.Номер); 
	СтруктураВыгрузки.Вставить("Дата", КонецДня(СсылкаНаОбъект.Дата));
	
	СтруктураВыгрузки.Вставить("ХозяйственнаяОперация","РеализацияКлиенту"); 
	//	ПередачаНаКомиссию - формируем в БП док с видом операция ПродажаКомиссия (или ОтгрузкаБезПереходаПраваСобственности - скорее всего, это про ОХ)
	//	РеализацияКлиенту - формируем по ситуации Товары, Услуги или ПродажаКомиссия
	СтруктураВыгрузки.Вставить("Организация", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Организация));
	СтруктураВыгрузки.Вставить("Склад", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Склад));
	СтруктураВыгрузки.Вставить("Подразделение", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Подразделение));
	СтруктураВыгрузки.Вставить("Контрагент", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.ОрганизацияПолучатель));
	СтруктураВыгрузки.Вставить("Договор", "");
	СтруктураВыгрузки.Вставить("Валюта", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Валюта));
	СтруктураВыгрузки.Вставить("Грузоотправитель", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Грузоотправитель));
	СтруктураВыгрузки.Вставить("Грузополучатель", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Грузополучатель));
	СтруктураВыгрузки.Вставить("КурсЧислитель", СсылкаНаОбъект.КурсЧислитель);
	СтруктураВыгрузки.Вставить("КурсЗнаменатель", СсылкаНаОбъект.КурсЗнаменатель);
	СтруктураВыгрузки.Вставить("ЦенаВключаетНДС", СсылкаНаОбъект.ЦенаВключаетНДС);
	СтруктураВыгрузки.Вставить("Комментарий", СсылкаНаОбъект.Комментарий); 
	
	
	СтруктураВыгрузки.Вставить("СчетУчетаРасчетов",КодСчетаРегл(ПолучитьСчетУчетаИзНастроек(Перечисления.ВидыСчетовРеглУчета.РасчетыСКлиентами,СсылкаНаОбъект.Организация,СсылкаНаОбъект.ГруппаФинансовогоУчета,СсылкаНаОбъект.Склад)));
	СтруктураВыгрузки.Вставить("СчетУчетаАвансов",КодСчетаРегл(ПолучитьСчетУчетаИзНастроек(Перечисления.ВидыСчетовРеглУчета.АвансыПолученные,СсылкаНаОбъект.Организация,СсылкаНаОбъект.ГруппаФинансовогоУчета,СсылкаНаОбъект.Склад)));

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПередачаТоваровМеждуОрганизациямиТовары.Ссылка КАК Ссылка,
	|	ПередачаТоваровМеждуОрганизациямиТовары.Номенклатура КАК Номенклатура,
	|	ПередачаТоваровМеждуОрганизациямиТовары.Ссылка.Склад КАК Склад,
	|	ПередачаТоваровМеждуОрганизациямиТовары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	МИНИМУМ(ПередачаТоваровМеждуОрганизациямиТовары.НомерСтроки) КАК НомерСтроки,
	|	СУММА(ПередачаТоваровМеждуОрганизациямиТовары.Количество) КАК Количество,
	|	ПередачаТоваровМеждуОрганизациямиТовары.Цена КАК Цена,
	|	СУММА(ПередачаТоваровМеждуОрганизациямиТовары.Сумма) КАК Сумма,
	|	ПередачаТоваровМеждуОрганизациямиТовары.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ПередачаТоваровМеждуОрганизациямиТовары.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ПередачаТоваровМеждуОрганизациямиТовары.СуммаСНДС) КАК СуммаСНДС
	|ПОМЕСТИТЬ втТоварыПередачи
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями.Товары КАК ПередачаТоваровМеждуОрганизациямиТовары
	|ГДЕ
	|	ПередачаТоваровМеждуОрганизациямиТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПередачаТоваровМеждуОрганизациямиТовары.Ссылка,
	|	ПередачаТоваровМеждуОрганизациямиТовары.Номенклатура,
	|	ПередачаТоваровМеждуОрганизациямиТовары.Ссылка.Склад,
	|	ПередачаТоваровМеждуОрганизациямиТовары.АналитикаУчетаНоменклатуры,
	|	ПередачаТоваровМеждуОрганизациямиТовары.Цена,
	|	ПередачаТоваровМеждуОрганизациямиТовары.СтавкаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПередачаТоваровМеждуОрганизациямиТовары.Номенклатура КАК Номенклатура,
	|	ПередачаТоваровМеждуОрганизациямиТовары.Склад КАК Склад,
	|	ПередачаТоваровМеждуОрганизациямиТовары.Цена КАК Цена,
	|	ПередачаТоваровМеждуОрганизациямиТовары.СтавкаНДС КАК СтавкаНДС,
	|	ЕСТЬNULL(ТоварыОрганизаций.НомерГТД, Значение(Справочник.НомераГТД.ПустаяСсылка)) КАК НомерГТД,
	|	ЕСТЬNULL(ТоварыОрганизаций.Количество, ПередачаТоваровМеждуОрганизациямиТовары.Количество) КАК Количество,
	|	ПередачаТоваровМеждуОрганизациямиТовары.Сумма * ЕСТЬNULL(ТоварыОрганизаций.Количество, ПередачаТоваровМеждуОрганизациямиТовары.Количество) / ПередачаТоваровМеждуОрганизациямиТовары.Количество КАК Сумма,
	|	ПередачаТоваровМеждуОрганизациямиТовары.СуммаНДС * ЕСТЬNULL(ТоварыОрганизаций.Количество, ПередачаТоваровМеждуОрганизациямиТовары.Количество) / ПередачаТоваровМеждуОрганизациямиТовары.Количество КАК СуммаНДС,
	|	ПередачаТоваровМеждуОрганизациямиТовары.СуммаСНДС * ЕСТЬNULL(ТоварыОрганизаций.Количество, ПередачаТоваровМеждуОрганизациямиТовары.Количество) / ПередачаТоваровМеждуОрганизациямиТовары.Количество КАК СуммаСНДС
	|ИЗ
	|	втТоварыПередачи КАК ПередачаТоваровМеждуОрганизациямиТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыОрганизаций КАК ТоварыОрганизаций
	|		ПО (ПередачаТоваровМеждуОрганизациямиТовары.Ссылка = ТоварыОрганизаций.Регистратор)
	|			И (ПередачаТоваровМеждуОрганизациямиТовары.АналитикаУчетаНоменклатуры = ТоварыОрганизаций.АналитикаУчетаНоменклатуры)
	|			И ТоварыОрганизаций.ВидДвижения = Значение(ВидДвиженияНакопления.Расход)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПередачаТоваровМеждуОрганизациямиТовары.НомерСтроки
	|";
	
	Запрос.УстановитьПараметр("Ссылка",СсылкаНаОбъект);
	
	Выборка = Запрос.Выполнить().Выбрать();         
	
	//Заглушка по старым арендным товарам
	ЗапросАрендаСч41 = Новый Запрос;
	ЗапросАрендаСч41.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК Номенклатура
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			,
	|			,
	|			Регистратор = &Документ
	|			И СчетКт = Значение(ПланСчетов.Хозрасчетный.ТоварыНаСкладах)
	|			И СубконтоКт1.ГруппаФинансовогоУчета = &ГруппаФинансовогоУчета
	|			,
	|			,
	|			) КАК ХозрасчетныйДвиженияССубконто
	|";
	
	ЗапросАрендаСч41.УстановитьПараметр("Документ",СсылкаНаОбъект); 
	ЗапросАрендаСч41.УстановитьПараметр("ГруппаФинансовогоУчета",Справочники.ГруппыФинансовогоУчетаНоменклатуры.НайтиПоНаименованию("Аренда инструмента"));
	мсвНоменклатураАрендыСч41 = ЗапросАрендаСч41.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура");
	
	мсвТовары = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		структураСтрокаТовары = Новый Структура;
		структураСтрокаТовары.Вставить("Номенклатура",СформироватьУИДДляВыгрузки(Выборка.Номенклатура));
		структураСтрокаТовары.Вставить("Количество",Выборка.Количество);
		структураСтрокаТовары.Вставить("Цена",Выборка.Цена);
		структураСтрокаТовары.Вставить("Сумма",Выборка.Сумма);
		структураСтрокаТовары.Вставить("СтавкаНДС",XMLСтрока(Выборка.СтавкаНДС.ПеречислениеСтавкаНДС));
	    структураСтрокаТовары.Вставить("СуммаНДС",Выборка.СуммаНДС);
		структураСтрокаТовары.Вставить("СуммаСНДС",Выборка.СуммаСНДС);		
		структураСтрокаТовары.Вставить("Склад",СформироватьУИДДляВыгрузки(Выборка.Склад)); 
		
		структураСтрокаТовары.Вставить("ЭтоУслуга", ?(Выборка.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга,Истина,Ложь));
			
		структураНомерГТД = Новый Структура("СтранаПроисхождения, Код, ПометкаУдаления, РегистрационныйНомер, СтранаВвозаНеРФ");
		ЗаполнитьЗначенияСвойств(структураНомерГТД, Выборка.НомерГТД);
		структураНомерГТД.СтранаПроисхождения = СформироватьУИДДляВыгрузки(Выборка.НомерГТД.СтранаПроисхождения);
		структураСтрокаТовары.Вставить("НомерГТД", структураНомерГТД);
		
		структураСтрокаТовары.Вставить("СчетУчета","");
		структураСтрокаТовары.Вставить("СчетУчетаНДСПоРеализации","");
		структураСтрокаТовары.Вставить("СчетДоходов","");
		структураСтрокаТовары.Вставить("СчетРасходов","");
		структураСтрокаТовары.Вставить("ЭтоАренда",Ложь);
		
		Если мсвНоменклатураАрендыСч41.Найти(Выборка.Номенклатура) <> Неопределено Тогда
			структураСтрокаТовары.ЭтоАренда = Истина;
			структураСтрокаТовары.СчетУчета = КодСчетаРегл(ПланыСчетов.Хозрасчетный.ТоварыНаСкладах);
			структураСтрокаТовары.СчетУчетаНДСПоРеализации = КодСчетаРегл(ПланыСчетов.Хозрасчетный.Продажи_НДС);
			структураСтрокаТовары.СчетДоходов = КодСчетаРегл(ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД);
			структураСтрокаТовары.СчетРасходов = КодСчетаРегл(ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД);			
		КонецЕсли;
		
		мсвТовары.Добавить(структураСтрокаТовары);
		
	КонецЦикла;
	
	СтруктураВыгрузки.Вставить("Товары",мсвТовары);
	
	НовОб = ТаблицаВыгрузки.Добавить();
	НовОб.СсылкаНаОбъект = СсылкаНаОбъект;
	НовОб.СтруктураВыгрузки = СтруктураВыгрузки;
	
	//Приобретение:
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("УИД", СформироватьУИДДляВыгрузки(СсылкаНаОбъект)); 	
	СтруктураВыгрузки.Вставить("ТипОбъекта", "ПриобретениеТоваровУслуг");
	СтруктураВыгрузки.Вставить("Номер", СсылкаНаОбъект.Номер); 
	СтруктураВыгрузки.Вставить("Дата", НачалоДня(СсылкаНаОбъект.Дата));
	СтруктураВыгрузки.Вставить("Проведен", СсылкаНаОбъект.Проведен);
	СтруктураВыгрузки.Вставить("Представление", Строка(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("ПометкаУдаления", СсылкаНаОбъект.ПометкаУдаления);
	СтруктураВыгрузки.Вставить("ХозяйственнаяОперация","ЗакупкаУПоставщика");
	СтруктураВыгрузки.Вставить("Организация", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.ОрганизацияПолучатель));
	СтруктураВыгрузки.Вставить("Склад", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Склад));
	СтруктураВыгрузки.Вставить("Подразделение", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Подразделение));
	СтруктураВыгрузки.Вставить("Контрагент", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Организация));
	СтруктураВыгрузки.Вставить("Договор", "");
	СтруктураВыгрузки.Вставить("Валюта", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Валюта));
	СтруктураВыгрузки.Вставить("НомерВходящегоДокумента", ""); 
	СтруктураВыгрузки.Вставить("ДатаВходящегоДокумента", '00010101');
	СтруктураВыгрузки.Вставить("Грузоотправитель", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Грузоотправитель));
	СтруктураВыгрузки.Вставить("КурсЧислитель", СсылкаНаОбъект.КурсЧислитель);
	СтруктураВыгрузки.Вставить("КурсЗнаменатель", СсылкаНаОбъект.КурсЗнаменатель);
	СтруктураВыгрузки.Вставить("ЦенаВключаетНДС", СсылкаНаОбъект.ЦенаВключаетНДС);
	СтруктураВыгрузки.Вставить("Комментарий", СсылкаНаОбъект.Комментарий);  
	
	СтруктураВыгрузки.Вставить("СчетУчетаРасчетов",КодСчетаРегл(ПолучитьСчетУчетаИзНастроек(Перечисления.ВидыСчетовРеглУчета.РасчетыСПоставщиками,СсылкаНаОбъект.Организация,СсылкаНаОбъект.ГруппаФинансовогоУчета,СсылкаНаОбъект.Склад)));
	СтруктураВыгрузки.Вставить("СчетУчетаАвансов",КодСчетаРегл(ПолучитьСчетУчетаИзНастроек(Перечисления.ВидыСчетовРеглУчета.АвансыВыданные,СсылкаНаОбъект.Организация,СсылкаНаОбъект.ГруппаФинансовогоУчета,СсылкаНаОбъект.Склад)));
	
	//СФ
	СтруктураВыгрузки.Вставить("НомерСФ", "");
	СтруктураВыгрузки.Вставить("ДатаСФ", '00010101');
	СтруктураВыгрузки.Вставить("ПроведенСФ", "");
	
	ЗапросСФ = Новый Запрос;
	ЗапросСФ.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетФактураВыданный.Номер КАК НомерСФ,
	|	СчетФактураВыданный.Дата КАК ДатаСФ,
	|	СчетФактураВыданный.Проведен КАК ПроведенСФ
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.ДокументыОснования.ДокументОснование = &Приобретение
	|	И СчетФактураВыданный.Проведен = ИСТИНА
	|";
	
	ЗапросСФ.УстановитьПараметр("Приобретение",СсылкаНаОбъект);
	
    ВыборкаСФ = ЗапросСФ.Выполнить().Выбрать();
	    	
	Если ВыборкаСФ.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураВыгрузки,ВыборкаСФ);
	КонецЕсли;
	
	//Заглушка по старым закупкам по аренде
	ЗапросАрендаСч41 = Новый Запрос;
	ЗапросАрендаСч41.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт1 КАК Номенклатура
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			,
	|			,
	|			Регистратор = &Документ
	|			И СчетДт = Значение(ПланСчетов.Хозрасчетный.ТоварыНаСкладах)
	|			И СубконтоДт1.ГруппаФинансовогоУчета = &ГруппаФинансовогоУчета
	|			,
	|			,
	|			) КАК ХозрасчетныйДвиженияССубконто
	|";
	
	ЗапросАрендаСч41.УстановитьПараметр("Документ",СсылкаНаОбъект); 
	ЗапросАрендаСч41.УстановитьПараметр("ГруппаФинансовогоУчета",Справочники.ГруппыФинансовогоУчетаНоменклатуры.НайтиПоНаименованию("Аренда инструмента"));
	мсвНоменклатураАрендыСч41 = ЗапросАрендаСч41.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура");
	
	мсвТЧТовары = Новый Массив;
	
	Для Каждого стрТовары Из СсылкаНаОбъект.Товары Цикл
		
		структураСтрокаТовары = Новый Структура;
		структураСтрокаТовары.Вставить("Номенклатура",СформироватьУИДДляВыгрузки(стрТовары.Номенклатура));
		структураСтрокаТовары.Вставить("Количество",стрТовары.Количество);
		структураСтрокаТовары.Вставить("Цена",стрТовары.Цена);
		структураСтрокаТовары.Вставить("Сумма",стрТовары.Сумма);
		структураСтрокаТовары.Вставить("СтавкаНДС",XMLСтрока(стрТовары.СтавкаНДС.ПеречислениеСтавкаНДС));
	    структураСтрокаТовары.Вставить("СуммаНДС",стрТовары.СуммаНДС);
		структураСтрокаТовары.Вставить("СуммаСНДС",стрТовары.СуммаСНДС);		
		структураСтрокаТовары.Вставить("Склад",СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Склад)); 
		
		структураСтрокаТовары.Вставить("ЭтоУслуга", ?(стрТовары.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга,Истина,Ложь));
			
		структураНомерГТД = Новый Структура("СтранаПроисхождения, Код, ПометкаУдаления, РегистрационныйНомер, СтранаВвозаНеРФ");
		ЗаполнитьЗначенияСвойств(структураНомерГТД, стрТовары.НомерГТД);
		структураНомерГТД.СтранаПроисхождения = СформироватьУИДДляВыгрузки(стрТовары.НомерГТД.СтранаПроисхождения);
		структураСтрокаТовары.Вставить("НомерГТД", структураНомерГТД);
		
		структураСтрокаТовары.Вставить("СчетУчета","");
		структураСтрокаТовары.Вставить("СчетУчетаНДС","");
		структураСтрокаТовары.Вставить("ДокументДляРаспределенияРасходов","");   
		
		Если мсвНоменклатураАрендыСч41.Найти(стрТовары.Номенклатура) <> Неопределено Тогда
			структураСтрокаТовары.СчетУчета = КодСчетаРегл(ПланыСчетов.Хозрасчетный.ТоварыНаСкладах);		
		КонецЕсли;
		
		структураСтрокаТовары.Вставить("РаспределитьНаСебестоимость",Ложь);
		Если структураСтрокаТовары.ЭтоУслуга 
			И стрТовары.СписатьНаРасходы Тогда
			
			СчетУчета = ПолучитьСчетУчетаИзНастроек(Перечисления.ВидыСчетовРеглУчета.Расходы,СсылкаНаОбъект.Организация,стрТовары.СтатьяРасходов.ГруппаФинансовогоУчетаРегл,СсылкаНаОбъект.Склад);
			структураСтрокаТовары.СчетУчета = КодСчетаРегл(СчетУчета);
			
			структураСтрокаТовары.Вставить("СтатьяРасходов",СформироватьУИДДляВыгрузки(стрТовары.СтатьяРасходов));
			
			Если  стрТовары.СтатьяРасходов.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров Тогда  
				структураСтрокаТовары.РаспределитьНаСебестоимость = Истина; 
				структураСтрокаТовары.СчетУчетаНДС = КодСчетаРегл(ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ);
				Если СсылкаНаОбъект <> стрТовары.АналитикаРасходов Тогда
					структураСтрокаТовары.ДокументДляРаспределенияРасходов = СформироватьУИДДляВыгрузки(стрТовары.АналитикаРасходов);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
				
		мсвТЧТовары.Добавить(структураСтрокаТовары);
				
	КонецЦикла; 
	
	СтруктураВыгрузки.Вставить("Товары",мсвТЧТовары);
	
	НовОб = ТаблицаВыгрузки.Добавить();
	НовОб.СсылкаНаОбъект = СсылкаНаОбъект;
	НовОб.СтруктураВыгрузки = СтруктураВыгрузки;
	
КонецПроцедуры

Процедура ВыгрузитьПеремещениеТоваров(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок)
	
	Если СсылкаНаОбъект.Пустая() Тогда
		Возврат;
	КонецЕсли;	
	
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("УИД", СформироватьУИДДляВыгрузки(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("Представление", Строка(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("ТипОбъекта", "ПеремещениеТоваров");		
	СтруктураВыгрузки.Вставить("ПометкаУдаления", СсылкаНаОбъект.ПометкаУдаления);	
	СтруктураВыгрузки.Вставить("Проведен", СсылкаНаОбъект.Проведен);	
		
	СтруктураВыгрузки.Вставить("Номер", СсылкаНаОбъект.Номер); 
	СтруктураВыгрузки.Вставить("Дата", СсылкаНаОбъект.Дата);
	
	СтруктураВыгрузки.Вставить("ХозяйственнаяОперация",XMLстрока(СсылкаНаОбъект.ХозяйственнаяОперация)); 
	СтруктураВыгрузки.Вставить("Организация", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Организация));
	СтруктураВыгрузки.Вставить("СкладОтправитель", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.СкладОтправитель));
	СтруктураВыгрузки.Вставить("СкладПолучатель", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.СкладПолучатель));
	СтруктураВыгрузки.Вставить("Подразделение", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Подразделение));
	СтруктураВыгрузки.Вставить("Комментарий", СсылкаНаОбъект.Комментарий); 
	
	//Заглушка по старым арендным товарам
	ЗапросАрендаСч41 = Новый Запрос;
	ЗапросАрендаСч41.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК Номенклатура
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			,
	|			,
	|			Регистратор = &Документ
	|			И СчетКт = Значение(ПланСчетов.Хозрасчетный.ТоварыНаСкладах)
	|			И СубконтоКт1.ГруппаФинансовогоУчета = &ГруппаФинансовогоУчета
	|			,
	|			,
	|			) КАК ХозрасчетныйДвиженияССубконто
	|";        
	
	ЗапросАрендаСч41.УстановитьПараметр("Документ",СсылкаНаОбъект); 
	ЗапросАрендаСч41.УстановитьПараметр("ГруппаФинансовогоУчета",Справочники.ГруппыФинансовогоУчетаНоменклатуры.НайтиПоНаименованию("Аренда инструмента"));
	мсвНоменклатураАрендыСч41 = ЗапросАрендаСч41.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПеремещениеТоваровТовары.Ссылка КАК Ссылка,
	|	ПеремещениеТоваровТовары.Номенклатура КАК Номенклатура,
	|	ПеремещениеТоваровТовары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	МИНИМУМ(ПеремещениеТоваровТовары.НомерСтроки) КАК НомерСтроки,
	|	СУММА(ПеремещениеТоваровТовары.Количество) КАК Количество
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	|ГДЕ
	|	ПеремещениеТоваровТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПеремещениеТоваровТовары.Ссылка,
	|	ПеремещениеТоваровТовары.Номенклатура,
	|	ПеремещениеТоваровТовары.АналитикаУчетаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПеремещениеТоваровТовары.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(ТоварыОрганизаций.НомерГТД, Значение(Справочник.НомераГТД.ПустаяСсылка)) КАК НомерГТД,
	|	ЕСТЬNULL(ТоварыОрганизаций.Количество, ПеремещениеТоваровТовары.Количество) КАК Количество
	|ИЗ
	|	втТовары КАК ПеремещениеТоваровТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыОрганизаций КАК ТоварыОрганизаций
	|		ПО (ПеремещениеТоваровТовары.Ссылка = ТоварыОрганизаций.Регистратор)
	|			И (ПеремещениеТоваровТовары.АналитикаУчетаНоменклатуры = ТоварыОрганизаций.АналитикаУчетаНоменклатуры)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПеремещениеТоваровТовары.НомерСтроки
	|";
	
	Запрос.УстановитьПараметр("Ссылка",СсылкаНаОбъект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	мсвТовары = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		структураСтрокаТовары = Новый Структура;
		структураСтрокаТовары.Вставить("Номенклатура",СформироватьУИДДляВыгрузки(Выборка.Номенклатура));
		структураСтрокаТовары.Вставить("Количество",Выборка.Количество);
			
		структураНомерГТД = Новый Структура("СтранаПроисхождения, Код, ПометкаУдаления, РегистрационныйНомер, СтранаВвозаНеРФ");
		ЗаполнитьЗначенияСвойств(структураНомерГТД, Выборка.НомерГТД);
		структураНомерГТД.СтранаПроисхождения = СформироватьУИДДляВыгрузки(Выборка.НомерГТД.СтранаПроисхождения);
		структураСтрокаТовары.Вставить("НомерГТД", структураНомерГТД);
		
		структураСтрокаТовары.Вставить("СчетУчета","");
		структураСтрокаТовары.Вставить("СчетУчетаНДС",""); 
		
		Если мсвНоменклатураАрендыСч41.Найти(Выборка.Номенклатура) <> Неопределено Тогда
			структураСтрокаТовары.СчетУчета = КодСчетаРегл(ПланыСчетов.Хозрасчетный.ТоварыНаСкладах);		
		КонецЕсли;
					
		мсвТовары.Добавить(структураСтрокаТовары);
		
	КонецЦикла;
	
	СтруктураВыгрузки.Вставить("Товары",мсвТовары);
	
	НовОб = ТаблицаВыгрузки.Добавить();
	НовОб.СсылкаНаОбъект = СсылкаНаОбъект;
	НовОб.СтруктураВыгрузки = СтруктураВыгрузки;	
	
КонецПроцедуры

Процедура ВыгрузитьКорректировкуПриобретения(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок)
	
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("УИД", СформироватьУИДДляВыгрузки(СсылкаНаОбъект)); 	
	СтруктураВыгрузки.Вставить("ТипОбъекта", "КорректировкаПриобретения");
	СтруктураВыгрузки.Вставить("Номер", СсылкаНаОбъект.Номер);
	СтруктураВыгрузки.Вставить("Дата", СсылкаНаОбъект.Дата);
	СтруктураВыгрузки.Вставить("Проведен", СсылкаНаОбъект.Проведен);
	СтруктураВыгрузки.Вставить("Представление", Строка(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("ПометкаУдаления", СсылкаНаОбъект.ПометкаУдаления);
	СтруктураВыгрузки.Вставить("ХозяйственнаяОперация", XMLстрока(СсылкаНаОбъект.ХозяйственнаяОперация)); 
	
	СтруктураВыгрузки.Вставить("ДокументОснование", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.ДокументОснование)); 
	
	СтруктураВыгрузки.Вставить("Организация", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Организация));
	
	//СФ  
	ДополнитьСтрукутуруДаннымиСчетФактурыПолученной(СтруктураВыгрузки, СсылкаНаОбъект);
	
	мсвРасхождения = Новый Массив;
	
	Для Каждого стрРасхождения Из СсылкаНаОбъект.Расхождения Цикл
		
		структураСтрокаРасхождения = Новый Структура;
		
		структураСтрокаРасхождения.Вставить("Номенклатура",СформироватьУИДДляВыгрузки(стрРасхождения.Номенклатура));
		структураСтрокаРасхождения.Вставить("Количество",стрРасхождения.Количество);
		структураСтрокаРасхождения.Вставить("Сумма",стрРасхождения.Сумма);
		структураСтрокаРасхождения.Вставить("СтавкаНДС",XMLСтрока(стрРасхождения.СтавкаНДС.ПеречислениеСтавкаНДС));
	    структураСтрокаРасхождения.Вставить("СуммаНДС",стрРасхождения.СуммаНДС);
		структураСтрокаРасхождения.Вставить("СуммаСНДС",стрРасхождения.СуммаСНДС);		
		структураСтрокаРасхождения.Вставить("Склад",СформироватьУИДДляВыгрузки(стрРасхождения.Склад));			
		
		мсвРасхождения.Добавить(структураСтрокаРасхождения);

	КонецЦикла;
	
	СтруктураВыгрузки.Вставить("Расхождения",мсвРасхождения); 
	
	Если СсылкаНаОбъект.ДокументОснование.Дата < '20210101' Тогда
		СтруктураВыгрузки.Вставить("Проводки",ВыгрузитьПроводкиДокумента(СсылкаНаОбъект));
		
		ЗапросСФ = Новый Запрос;
		ЗапросСФ.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СчетФактураПолученный.Ссылка КАК СФ
		|ИЗ
		|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
		|ГДЕ
		|	СчетФактураПолученный.ДокументыОснования.ДокументОснование = &ДокументСсылка
		|	И СчетФактураПолученный.Проведен = ИСТИНА
		|";
		
		ЗапросСФ.УстановитьПараметр("ДокументСсылка", СсылкаНаОбъект);
		
		ВыборкаСФ = ЗапросСФ.Выполнить().Выбрать();
		
		Если ВыборкаСФ.Следующий() Тогда
			ПроводкиСФ = ВыгрузитьПроводкиДокумента(ВыборкаСФ.СФ);
			Для Каждого ПроводкаСФ Из ПроводкиСФ Цикл
				СтруктураВыгрузки.Проводки.Добавить(ПроводкаСФ);
			КонецЦикла;
		КонецЕсли;		
		
	КонецЕсли;
	
	
	НовОб = ТаблицаВыгрузки.Добавить();
	НовОб.СсылкаНаОбъект = СсылкаНаОбъект;
	НовОб.СтруктураВыгрузки = СтруктураВыгрузки;
		
КонецПроцедуры

Процедура ВыгрузитьДокументКакДокументРасчетовСКонтрагентами(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок) 
	
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("УИД", СформироватьУИДДляВыгрузки(СсылкаНаОбъект)); 	
	СтруктураВыгрузки.Вставить("ТипОбъекта", "ДокументРасчетовСКонтрагентами");
	СтруктураВыгрузки.Вставить("Номер", СсылкаНаОбъект.Номер);
	СтруктураВыгрузки.Вставить("Дата", Дата(2020,12,31,23,59,59)); 
	СтруктураВыгрузки.Вставить("Комментарий", Строка(СсылкаНаОбъект));   
	СтруктураВыгрузки.Вставить("Организация", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Организация));
	СтруктураВыгрузки.Вставить("Контрагент", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Контрагент));
	СтруктураВыгрузки.Вставить("ВидДоговора", ?(СсылкаНаОбъект.Партнер.Клиент, "СПокупателем", "СПоставщиком"));
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Валюта",СсылкаНаОбъект.Метаданные()) Тогда
		СтруктураВыгрузки.Вставить("Валюта", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Валюта));
	Иначе
		СтруктураВыгрузки.Вставить("Валюта",СформироватьУИДДляВыгрузки(Константы.ВалютаРегламентированногоУчета.Получить()));
	КонецЕсли;	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("НомерВходящегоДокумента",СсылкаНаОбъект.Метаданные()) Тогда
		СтруктураВыгрузки.Вставить("НомерВходящегоДокумента", СсылкаНаОбъект.НомерВходящегоДокумента); 
		СтруктураВыгрузки.Вставить("ДатаВходящегоДокумента", СсылкаНаОбъект.ДатаВходящегоДокумента);
	КонецЕсли;
	//СтруктураВыгрузки.Вставить("СчетУчета", ?(СсылкаНаОбъект.Партнер.Клиент, КодСчетаРегл(ПланыСчетов.Хозрасчетный.РасчетыСПокупателями), КодСчетаРегл(ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками)));
	
	НовОб = ТаблицаВыгрузки.Добавить();
	НовОб.СсылкаНаОбъект = СсылкаНаОбъект;
	НовОб.СтруктураВыгрузки = СтруктураВыгрузки;	
	
КонецПроцедуры

Процедура ВыгрузитьПорчуТоваров(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок)
	
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("УИД", СформироватьУИДДляВыгрузки(СсылкаНаОбъект)); 
	СтруктураВыгрузки.Вставить("Представление", Строка(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("ТипОбъекта", "РазукомплектацииНоменклатуры");
	СтруктураВыгрузки.Вставить("Номер", СсылкаНаОбъект.Номер); 
	СтруктураВыгрузки.Вставить("Дата", СсылкаНаОбъект.Дата);
	СтруктураВыгрузки.Вставить("Проведен", СсылкаНаОбъект.Проведен);	
	СтруктураВыгрузки.Вставить("ПометкаУдаления", СсылкаНаОбъект.ПометкаУдаления);
	СтруктураВыгрузки.Вставить("Комментарий", СсылкаНаОбъект.Комментарий);                                       	
	
	СтруктураВыгрузки.Вставить("Организация", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Организация));
	СтруктураВыгрузки.Вставить("Подразделение", ?(ЗначениеЗаполнено(СсылкаНаОбъект.Подразделение), СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Подразделение), ""));
	СтруктураВыгрузки.Вставить("Склад", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Склад)); 
	
	ЗапросТовары = Новый Запрос;
	ЗапросТовары.Текст =
	"ВЫБРАТЬ
	|	ПорчаТоваровТовары.Ссылка КАК Ссылка,
	|	МИНИМУМ(ПорчаТоваровТовары.НомерСтроки) КАК НомерСтроки,
	|	ПорчаТоваровТовары.Номенклатура КАК Номенклатура,
	|	СУММА(ПорчаТоваровТовары.Количество) КАК Количество,
	|	СУММА(ПорчаТоваровТовары.Количество) * ПорчаТоваровТовары.Цена КАК СтоимостьОприходования,
	|	ПорчаТоваровТовары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ПорчаТоваровТовары.НоменклатураОприходование КАК НоменклатураОприходование,
	|	ПорчаТоваровТовары.АналитикаУчетаНоменклатурыОприходование КАК АналитикаУчетаНоменклатурыОприходование
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	Документ.ПорчаТоваров.Товары КАК ПорчаТоваровТовары
	|ГДЕ
	|	ПорчаТоваровТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПорчаТоваровТовары.Номенклатура,
	|	ПорчаТоваровТовары.Цена,
	|	ПорчаТоваровТовары.АналитикаУчетаНоменклатуры,
	|	ПорчаТоваровТовары.НоменклатураОприходование,
	|	ПорчаТоваровТовары.АналитикаУчетаНоменклатурыОприходование,
	|	ПорчаТоваровТовары.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыОрганизаций.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	МИНИМУМ(ТоварыОрганизаций.НомерГТД) КАК НомерГТД
	|ПОМЕСТИТЬ втНомераГТД
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций КАК ТоварыОрганизаций
	|ГДЕ
	|	ТоварыОрганизаций.Регистратор = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыОрганизаций.АналитикаУчетаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТовары.НомерСтроки КАК НомерСтроки,
	|	втТовары.Номенклатура КАК Номенклатура,
	|	втТовары.НоменклатураОприходование КАК НоменклатураОприходование,
	|	втТовары.Количество КАК Количество,
	|	втТовары.СтоимостьОприходования КАК СтоимостьОприходования,
	|	ЕСТЬNULL(втНомераГТД.НомерГТД,Значение(Справочник.НомераГТД.ПустаяСсылка)) КАК НомерГТД
	|ИЗ
	|	втТовары КАК втТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНомераГТД КАК втНомераГТД
	|		ПО (втТовары.АналитикаУчетаНоменклатуры = втНомераГТД.АналитикаУчетаНоменклатуры)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";
	
	ЗапросТовары.УстановитьПараметр("Ссылка",СсылкаНаОбъект);
	
	Выборка = ЗапросТовары.Выполнить().Выбрать();
	
	мсвТовары = Новый Массив; 
	
	Пока Выборка.Следующий() Цикл
		
		структураСтрокаТовары = Новый Структура;
		структураСтрокаТовары.Вставить("НомерСтроки", Выборка.НомерСтроки);
		структураСтрокаТовары.Вставить("Номенклатура",СформироватьУИДДляВыгрузки(Выборка.Номенклатура));
		структураСтрокаТовары.Вставить("НоменклатураОприходование",СформироватьУИДДляВыгрузки(Выборка.НоменклатураОприходование));
		структураСтрокаТовары.Вставить("Количество",Выборка.Количество);
		структураСтрокаТовары.Вставить("СтоимостьОприходования",Выборка.СтоимостьОприходования);

			
		структураНомерГТД = Новый Структура("СтранаПроисхождения, Код, ПометкаУдаления, РегистрационныйНомер, СтранаВвозаНеРФ");
		ЗаполнитьЗначенияСвойств(структураНомерГТД, Выборка.НомерГТД);
		структураНомерГТД.СтранаПроисхождения = СформироватьУИДДляВыгрузки(Выборка.НомерГТД.СтранаПроисхождения);
		структураСтрокаТовары.Вставить("НомерГТД", структураНомерГТД);
		
		структураСтрокаТовары.Вставить("СчетУчета","");
		структураСтрокаТовары.Вставить("СчетУчетаНДС",""); 
							
		мсвТовары.Добавить(структураСтрокаТовары);	
		
	КонецЦикла;
	
	СтруктураВыгрузки.Вставить("Товары", мсвТовары);
		
	НовОб = ТаблицаВыгрузки.Добавить();
	НовОб.СсылкаНаОбъект = СсылкаНаОбъект;
	НовОб.СтруктураВыгрузки = СтруктураВыгрузки;			
	
КонецПроцедуры

Процедура ВыгрузитьПересортицуТоваров(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок)
	
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("УИД", СформироватьУИДДляВыгрузки(СсылкаНаОбъект)); 
	СтруктураВыгрузки.Вставить("Представление", Строка(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("ТипОбъекта", "КомплектацииНоменклатуры");
	СтруктураВыгрузки.Вставить("Номер", СсылкаНаОбъект.Номер); 
	СтруктураВыгрузки.Вставить("Дата", СсылкаНаОбъект.Дата);
	СтруктураВыгрузки.Вставить("Проведен", СсылкаНаОбъект.Проведен);	
	СтруктураВыгрузки.Вставить("ПометкаУдаления", СсылкаНаОбъект.ПометкаУдаления);
	СтруктураВыгрузки.Вставить("Комментарий", СсылкаНаОбъект.Комментарий);                                       	
	
	СтруктураВыгрузки.Вставить("Организация", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Организация));
	СтруктураВыгрузки.Вставить("Подразделение", ?(ЗначениеЗаполнено(СсылкаНаОбъект.Подразделение), СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Подразделение), ""));
	СтруктураВыгрузки.Вставить("Склад", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Склад)); 
	
	СчетТовары = ПолучитьСчетУчетаИзНастроек(Перечисления.ВидыСчетовРеглУчета.НаСкладе, СсылкаНаОбъект.Организация, , СсылкаНаОбъект.Склад);
	
	Товары = Новый Массив;
	Для Каждого Стр Из СсылкаНаОбъект.Товары Цикл
		Нстр = Новый Структура;
		Нстр.Вставить("НомерСтроки", Стр.НомерСтроки);
		Нстр.Вставить("Номенклатура", СформироватьУИДДляВыгрузки(Стр.Номенклатура));
		Нстр.Вставить("НоменклатураОприходование", СформироватьУИДДляВыгрузки(Стр.НоменклатураОприходование));
		Нстр.Вставить("Количество", Стр.Количество);

		НомерГТД = Новый Структура("СтранаПроисхождения, Код, ПометкаУдаления, РегистрационныйНомер, СтранаВвозаНеРФ");
		ЗаполнитьЗначенияСвойств(НомерГТД, Стр.НомерГТД);
		НомерГТД.СтранаПроисхождения = СформироватьУИДДляВыгрузки(Стр.НомерГТД.СтранаПроисхождения);
		НСтр.Вставить("НомерГТД", НомерГТД);
		
		Если ЗначениеЗаполнено(СчетТовары) Тогда
			Нстр.Вставить("СчетУчета", КодСчетаРегл(СчетТовары.КодБыстрогоВыбора)); 
		КонецЕсли;
		Товары.Добавить(Нстр);	
	КонецЦикла;	
	
	СтруктураВыгрузки.Вставить("Товары", Товары);
		
	НовОб = ТаблицаВыгрузки.Добавить();
	НовОб.СсылкаНаОбъект = СсылкаНаОбъект;
	НовОб.СтруктураВыгрузки = СтруктураВыгрузки;			
	
КонецПроцедуры

Процедура ВыгрузитьДокументКакОперацию(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок)
	
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("УИД", СформироватьУИДДляВыгрузки(СсылкаНаОбъект)); 
	СтруктураВыгрузки.Вставить("Представление", Строка(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("ТипОбъекта", "ОперацияБух");
	СтруктураВыгрузки.Вставить("Дата", СсылкаНаОбъект.Дата);
	СтруктураВыгрузки.Вставить("Организация", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Организация));
	СтруктураВыгрузки.Вставить("Комментарий", СсылкаНаОбъект.Комментарий);
	СтруктураВыгрузки.Вставить("Проведен", СсылкаНаОбъект.Проведен);	
	СтруктураВыгрузки.Вставить("ПометкаУдаления", СсылкаНаОбъект.ПометкаУдаления);
	
	СтруктураВыгрузки.Вставить("Проводки", ВыгрузитьПроводкиДокумента(СсылкаНаОбъект));		
	
	НовОб = ТаблицаВыгрузки.Добавить();
	НовОб.СсылкаНаОбъект = СсылкаНаОбъект;
	НовОб.СтруктураВыгрузки = СтруктураВыгрузки;	
	
КонецПроцедуры

Процедура ВыгрузитьОтражениеЗарплатыВФинансовомУчете(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок)
	
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("УИД", СформироватьУИДДляВыгрузки(СсылкаНаОбъект)); 
	СтруктураВыгрузки.Вставить("Представление", Строка(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("ТипОбъекта", "ОтражениеЗарплатыВФинансовомУчете");
	СтруктураВыгрузки.Вставить("Номер", СсылкаНаОбъект.Номер); 
	СтруктураВыгрузки.Вставить("Дата", СсылкаНаОбъект.Дата);
	СтруктураВыгрузки.Вставить("Проведен", СсылкаНаОбъект.Проведен);	
	СтруктураВыгрузки.Вставить("ПометкаУдаления", СсылкаНаОбъект.ПометкаУдаления); 
	
	СтруктураВыгрузки.Вставить("ПериодРегистрации", СсылкаНаОбъект.ПериодРегистрации);
	СтруктураВыгрузки.Вставить("Организация", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Организация));
	СтруктураВыгрузки.Вставить("КраткийСоставДокумента", СсылкаНаОбъект.КраткийСоставДокумента);
	СтруктураВыгрузки.Вставить("Комментарий", СсылкаНаОбъект.Комментарий);
			
	НачисленнаяЗарплатаИВзносыПоФизлицам = Новый Массив; 
	Для каждого Стр Из СсылкаНаОбъект.НачисленнаяЗарплатаИВзносыПоФизлицам Цикл
		НСтр = Новый Структура;  
		
		НСтр.Вставить("ФизическоеЛицо", СформироватьУИДДляВыгрузки(Стр.ФизическоеЛицо)); 
		НСтр.Вставить("ПодразделениеПредприятия", СформироватьУИДДляВыгрузки(Стр.ПодразделениеПредприятия));
		НСтр.Вставить("ВидОперации", XMLСтрока(Стр.ВидОперации));
		НСтр.Вставить("СпособОтраженияЗарплатыВБухучете", СформироватьУИДДляВыгрузки(Стр.СпособОтраженияЗарплатыВБухучете));
		НСтр.Вставить("ОблагаетсяЕНВД", Стр.ОблагаетсяЕНВД);
		НСтр.Вставить("Сумма", Стр.Сумма);
		НСтр.Вставить("ПФРСтраховая", Стр.ПФРСтраховая);
		НСтр.Вставить("ПФРНакопительная", Стр.ПФРНакопительная);
		НСтр.Вставить("ПФРПоСуммарномуТарифу", Стр.ПФРПоСуммарномуТарифу);
		НСтр.Вставить("ПФРНаДоплатуЛетчикам", Стр.ПФРНаДоплатуЛетчикам);
		НСтр.Вставить("ПФРНаДоплатуШахтерам", Стр.ПФРНаДоплатуШахтерам);
		НСтр.Вставить("ПФРЗаЗанятыхНаПодземныхИВредныхРаботах", Стр.ПФРЗаЗанятыхНаПодземныхИВредныхРаботах);
		НСтр.Вставить("ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах", Стр.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах);
		НСтр.Вставить("ФСС", Стр.ФСС);
		НСтр.Вставить("ФФОМС", Стр.ФФОМС);
		НСтр.Вставить("ТФОМС", Стр.ТФОМС);
		НСтр.Вставить("ФССНесчастныеСлучаи", Стр.ФССНесчастныеСлучаи);
		НСтр.Вставить("ВидНачисленияОплатыТрудаДляНУ", XMLСтрока(Стр.ВидНачисленияОплатыТрудаДляНУ));
		НСтр.Вставить("ПФРДоПредельнойВеличины", Стр.ПФРДоПредельнойВеличины);
		НСтр.Вставить("ПФРСПревышения", Стр.ПФРСПревышения);
		НСтр.Вставить("ПФРЗаЗанятыхНаПодземныхИВредныхРаботахБезСпецОценки", Стр.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахБезСпецОценки);
		НСтр.Вставить("ПФРЗаЗанятыхНаПодземныхИВредныхРаботахСпецОценка", Стр.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахСпецОценка);
		НСтр.Вставить("ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахБезСпецОценки", Стр.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахБезСпецОценки);
		НСтр.Вставить("ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахСпецОценка", Стр.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахСпецОценка);
		
		НачисленнаяЗарплатаИВзносыПоФизлицам.Добавить(НСтр);
	КонецЦикла;   
	СтруктураВыгрузки.Вставить("НачисленнаяЗарплатаИВзносыПоФизлицам", НачисленнаяЗарплатаИВзносыПоФизлицам);   
	//
	НачисленныйНДФЛ = Новый Массив; 
	Для каждого Стр Из СсылкаНаОбъект.НачисленныйНДФЛ Цикл  
		НСтр = Новый Структура;
		НСтр.Вставить("ФизическоеЛицо", СформироватьУИДДляВыгрузки(Стр.ФизическоеЛицо));
		НСтр.Вставить("РегистрацияВНалоговомОргане", СформироватьУИДДляВыгрузки(Стр.РегистрацияВНалоговомОргане));
		НСтр.Вставить("ВидОперации", XMLСтрока(Стр.ВидОперации));
		НСтр.Вставить("Сумма", Стр.Сумма);
		
		НачисленныйНДФЛ.Добавить(НСтр);
	КонецЦикла;   
	СтруктураВыгрузки.Вставить("НачисленныйНДФЛ", НачисленныйНДФЛ);   
	//
	УдержаннаяЗарплата = Новый Массив; 
	Для каждого Стр Из СсылкаНаОбъект.УдержаннаяЗарплата Цикл  
		НСтр = Новый Структура;
		НСтр.Вставить("ФизическоеЛицо", СформироватьУИДДляВыгрузки(Стр.ФизическоеЛицо));
		НСтр.Вставить("ПодразделениеПредприятия", СформироватьУИДДляВыгрузки(Стр.ПодразделениеПредприятия));
		НСтр.Вставить("ВидОперации", XMLСтрока(Стр.ВидОперации));
		НСтр.Вставить("ЯвляетсяОснованиемОформленияКассовогоЧека", Стр.ЯвляетсяОснованиемОформленияКассовогоЧека);
		НСтр.Вставить("ОписаниеУдержанияДляЧека", Стр.ОписаниеУдержанияДляЧека);
		НСтр.Вставить("Сумма", Стр.Сумма);  
		
		УдержаннаяЗарплата.Добавить(НСтр);
	КонецЦикла;   
	СтруктураВыгрузки.Вставить("УдержаннаяЗарплата", УдержаннаяЗарплата); 
	//
	НачисленныеОтпускаЗаСчетРезерва = Новый Массив; 
	Для каждого Стр Из СсылкаНаОбъект.НачисленныеОтпускаЗаСчетРезерва Цикл  
		НСтр = Новый Структура;
		НСтр.Вставить("Сотрудник", СформироватьУИДДляВыгрузки(Стр.Сотрудник));
		НСтр.Вставить("ВидОперации", XMLСтрока(Стр.ВидОперации));
		НСтр.Вставить("Сумма", Стр.Сумма);  
		НСтр.Вставить("СтраховыеВзносы", Стр.СтраховыеВзносы);  
		НСтр.Вставить("ФССНесчастныеСлучаи", Стр.ФССНесчастныеСлучаи); 
		
		НачисленныеОтпускаЗаСчетРезерва.Добавить(НСтр);
	КонецЦикла;   
	СтруктураВыгрузки.Вставить("НачисленныеОтпускаЗаСчетРезерва", НачисленныеОтпускаЗаСчетРезерва); 
	//
	ФизическиеЛица = Новый Массив; 
	Для каждого Стр Из СсылкаНаОбъект.ФизическиеЛица Цикл  
		НСтр = Новый Структура;
		НСтр.Вставить("ФизическоеЛицо", СформироватьУИДДляВыгрузки(Стр.ФизическоеЛицо));
		
		ФизическиеЛица.Добавить(НСтр);
	КонецЦикла;   
	СтруктураВыгрузки.Вставить("ФизическиеЛица", ФизическиеЛица); 
	
	НовОб = ТаблицаВыгрузки.Добавить();
	НовОб.СсылкаНаОбъект = СсылкаНаОбъект;
	НовОб.СтруктураВыгрузки = СтруктураВыгрузки;			
	
КонецПроцедуры   

Процедура ВыгрузитьСборкуТоваров(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок)
	
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("УИД", СформироватьУИДДляВыгрузки(СсылкаНаОбъект)); 
	СтруктураВыгрузки.Вставить("Представление", Строка(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("ТипОбъекта", "КомплектацияНоменклатуры");
	СтруктураВыгрузки.Вставить("Номер", СсылкаНаОбъект.Номер); 
	СтруктураВыгрузки.Вставить("Дата", СсылкаНаОбъект.Дата);
	СтруктураВыгрузки.Вставить("Проведен", СсылкаНаОбъект.Проведен);	
	СтруктураВыгрузки.Вставить("ПометкаУдаления", СсылкаНаОбъект.ПометкаУдаления);
	СтруктураВыгрузки.Вставить("Комментарий", СсылкаНаОбъект.Комментарий);                                       	
	
	СтруктураВыгрузки.Вставить("Организация", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Организация));
	СтруктураВыгрузки.Вставить("Подразделение", ?(ЗначениеЗаполнено(СсылкаНаОбъект.Подразделение), СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Подразделение), ""));
	СтруктураВыгрузки.Вставить("Склад", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Склад));
	
	СтруктураВыгрузки.Вставить("ВидОперации",?(СсылкаНаОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СборкаТоваров,"Комплектация","Разукомплектация"));
	
	СтруктураВыгрузки.Вставить("Номенклатура", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Номенклатура));
	СтруктураВыгрузки.Вставить("Количество", СсылкаНаОбъект.Количество);
	
	мсвТовары = Новый Массив;
	
	Для Каждого стрТовары Из СсылкаНаОбъект.Товары Цикл
		структураСтрокаТовары = Новый Структура;
		
		структураСтрокаТовары.Вставить("Номенклатура", СформироватьУИДДляВыгрузки(стрТовары.Номенклатура));
		структураСтрокаТовары.Вставить("Количество", стрТовары.Количество);
		структураСтрокаТовары.Вставить("ДоляСтоимости", стрТовары.ДоляСтоимости);

		мсвТовары.Добавить(структураСтрокаТовары);	
	КонецЦикла; 
	
	СтруктураВыгрузки.Вставить("Товары", мсвТовары);
		
	НовОб = ТаблицаВыгрузки.Добавить();
	НовОб.СсылкаНаОбъект = СсылкаНаОбъект;
	НовОб.СтруктураВыгрузки = СтруктураВыгрузки;
	
КонецПроцедуры

Процедура ВыгрузитьОтчетКомиссионера(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок)
	
	Если СсылкаНаОбъект.Пустая() Тогда
		Возврат;
	КонецЕсли;	
	
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("УИД", СформироватьУИДДляВыгрузки(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("Представление", Строка(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("ТипОбъекта", "ОтчетКомиссионераОПродажах");		
	СтруктураВыгрузки.Вставить("ПометкаУдаления", СсылкаНаОбъект.ПометкаУдаления);	
	СтруктураВыгрузки.Вставить("Проведен", СсылкаНаОбъект.Проведен);	
		
	СтруктураВыгрузки.Вставить("Номер", СсылкаНаОбъект.Номер); 
	СтруктураВыгрузки.Вставить("Дата", СсылкаНаОбъект.Дата);
	
	СтруктураВыгрузки.Вставить("ХозяйственнаяОперация",XMLстрока(СсылкаНаОбъект.ХозяйственнаяОперация)); 
	СтруктураВыгрузки.Вставить("Организация", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Организация));
	СтруктураВыгрузки.Вставить("Подразделение", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Подразделение));
	СтруктураВыгрузки.Вставить("Контрагент", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Контрагент));
	СтруктураВыгрузки.Вставить("Договор", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Договор));
	СтруктураВыгрузки.Вставить("Валюта", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Валюта));
	СтруктураВыгрузки.Вставить("Грузоотправитель", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Грузоотправитель));
	СтруктураВыгрузки.Вставить("ЦенаВключаетНДС", СсылкаНаОбъект.ЦенаВключаетНДС);
	СтруктураВыгрузки.Вставить("Комментарий", СсылкаНаОбъект.Комментарий); 
	
	
	Если ЗначениеЗаполнено(СсылкаНаОбъект.СтатьяРасходов) Тогда
		СтруктураВыгрузки.Вставить("СчетУчетаЗатрат",КодСчетаРегл(ПолучитьСчетУчетаИзНастроек(Перечисления.ВидыСчетовРеглУчета.Расходы,СсылкаНаОбъект.Организация,СсылкаНаОбъект.СтатьяРасходов.ГруппаФинансовогоУчета,Неопределено)));
		СтруктураВыгрузки.Вставить("Субконто1",СсылкаНаОбъект.СтатьяРасходов);
	Иначе
		СтруктураВыгрузки.Вставить("СчетУчетаЗатрат","4401"); 
		СтруктураВыгрузки.Вставить("Субконто1","");
	КонецЕсли;
	
	СтруктураВыгрузки.Вставить("СчетУчетаРасчетовСКонтрагентом",КодСчетаРегл(ПолучитьСчетУчетаИзНастроек(Перечисления.ВидыСчетовРеглУчета.РасчетыСКлиентами,СсылкаНаОбъект.Организация,СсылкаНаОбъект.ГруппаФинансовогоУчета,Неопределено)));
	СтруктураВыгрузки.Вставить("СчетУчетаРасчетовЗаПосредническиеУслуги",КодСчетаРегл(ПолучитьСчетУчетаИзНастроек(Перечисления.ВидыСчетовРеглУчета.РасчетыСПоставщиками,СсылкаНаОбъект.Организация,СсылкаНаОбъект.ГруппаФинансовогоУчета,Неопределено)));
	СтруктураВыгрузки.Вставить("СчетУчетаРасчетовПоАвансамПолученным",КодСчетаРегл(ПолучитьСчетУчетаИзНастроек(Перечисления.ВидыСчетовРеглУчета.АвансыПолученные,СсылкаНаОбъект.Организация,СсылкаНаОбъект.ГруппаФинансовогоУчета,Неопределено)));
	СтруктураВыгрузки.Вставить("СчетУчетаРасчетовПоАвансамВыданным",КодСчетаРегл(ПолучитьСчетУчетаИзНастроек(Перечисления.ВидыСчетовРеглУчета.АвансыВыданные,СсылкаНаОбъект.Организация,СсылкаНаОбъект.ГруппаФинансовогоУчета,Неопределено)));
	
	СтруктураВыгрузки.Вставить("СпособРасчетаКомиссионногоВознаграждения",XMLстрока(СсылкаНаОбъект.СпособРасчетаВознаграждения));
	СтруктураВыгрузки.Вставить("ПроцентКомиссионногоВознаграждения", СсылкаНаОбъект.ПроцентВознаграждения);
	СтруктураВыгрузки.Вставить("СуммаВознаграждения", СсылкаНаОбъект.СуммаВознаграждения);  
	СтруктураВыгрузки.Вставить("СтавкаНДСВознаграждения",XMLстрока(СсылкаНаОбъект.СтавкаНДСВознаграждения.ПеречислениеСтавкаНДС));
    СтруктураВыгрузки.Вставить("СуммаНДСВознаграждения", СсылкаНаОбъект.СуммаВознаграждения);
	СтруктураВыгрузки.Вставить("УдержатьВознаграждение", СсылкаНаОбъект.УдержатьВознаграждение);
	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка КАК Ссылка,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	МИНИМУМ(ТаблицаТовары.НомерСтроки) КАК НомерСтроки,
	|	СУММА(ТаблицаТовары.Количество) КАК Количество,
	|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаТовары.Цена КАК Цена,
	|	СУММА(ТаблицаТовары.Сумма) КАК Сумма,	
	|	СУММА(ТаблицаТовары.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ТаблицаТовары.СуммаСНДС) КАК СуммаСНДС,
	|	ТаблицаТовары.ЦенаПродажи КАК ЦенаПродажи,
	|	СУММА(ТаблицаТовары.СуммаПродажи) КАК СуммаПродажи,	
	|	СУММА(ТаблицаТовары.СуммаПродажиНДС) КАК СуммаПродажиНДС,
	|	СУММА(ТаблицаТовары.СуммаВознаграждения) КАК СуммаВознаграждения,
	|	СУММА(ТаблицаТовары.СуммаНДСВознаграждения) КАК СуммаНДСВознаграждения
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	Документ.ОтчетКомиссионера.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Ссылка,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.АналитикаУчетаНоменклатуры,
	|	ТаблицаТовары.Цена,
	|	ТаблицаТовары.ЦенаПродажи,
	|	ТаблицаТовары.СтавкаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Цена КАК ЦенаПередачи, 
	|	ЕСТЬNULL(ВидыЗапасов.Количество * ТаблицаТовары.Сумма / ТаблицаТовары.Количество, ТаблицаТовары.Сумма) КАК СуммаПередачи,	
	|	ТаблицаТовары.ЦенаПродажи КАК Цена,
	|	ВЫБОР КОГДА ТаблицаТовары.Ссылка.ЦенаВключаетНДС ТОГДА
	|		ЕСТЬNULL(ВидыЗапасов.СуммаСНДС, ТаблицаТовары.СуммаПродажи) 
	|	ИНАЧЕ
	|		ЕСТЬNULL(ВидыЗапасов.СуммаСНДС - ВидыЗапасов.СуммаНДС, ТаблицаТовары.СуммаПродажи)
	|	КОНЕЦ КАК Сумма, 
	|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|	ЕСТЬNULL(ВидыЗапасов.НомерГТД, ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)) КАК НомерГТД,
	|	ЕСТЬNULL(ВидыЗапасов.Количество, ТаблицаТовары.Количество) КАК Количество, 
	|	ЕСТЬNULL(ВидыЗапасов.СуммаНДС, ТаблицаТовары.СуммаНДС) КАК СуммаНДС,
	|	ВЫБОР КОГДА ТаблицаТовары.Ссылка.ЦенаВключаетНДС ТОГДА
	|		ЕСТЬNULL(ВидыЗапасов.СуммаВознаграждения, ТаблицаТовары.СуммаВознаграждения) 
	|	ИНАЧЕ
	|		ЕСТЬNULL(ВидыЗапасов.СуммаВознаграждения - ВидыЗапасов.СуммаНДС, ТаблицаТовары.СуммаВознаграждения)
	|	КОНЕЦ КАК СуммаВознаграждения
	|	
	|ИЗ
	|	втТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетКомиссионера.ВидыЗапасов КАК ВидыЗапасов
	|		ПО (ТаблицаТовары.Ссылка = ВидыЗапасов.Ссылка)
	|			И ТаблицаТовары.АналитикаУчетаНоменклатуры = ВидыЗапасов.АналитикаУчетаНоменклатуры
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаТовары.НомерСтроки
	|";
	Запрос.УстановитьПараметр("Ссылка",СсылкаНаОбъект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	мсвТовары = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		структураСтрокаТовары = Новый Структура;
		структураСтрокаТовары.Вставить("Номенклатура",СформироватьУИДДляВыгрузки(Выборка.Номенклатура));
		структураСтрокаТовары.Вставить("Количество",Выборка.Количество);
		структураСтрокаТовары.Вставить("Цена",Выборка.Цена);
		структураСтрокаТовары.Вставить("Сумма",Выборка.Сумма);
		структураСтрокаТовары.Вставить("ЦенаПередачи",Выборка.ЦенаПередачи);
		структураСтрокаТовары.Вставить("СуммаПередачи",Выборка.СуммаПередачи);
		структураСтрокаТовары.Вставить("СтавкаНДС",XMLСтрока(Выборка.СтавкаНДС.ПеречислениеСтавкаНДС));
	    структураСтрокаТовары.Вставить("СуммаНДС",Выборка.СуммаНДС);
			
		структураНомерГТД = Новый Структура("СтранаПроисхождения, Код, ПометкаУдаления, РегистрационныйНомер, СтранаВвозаНеРФ");
		ЗаполнитьЗначенияСвойств(структураНомерГТД, Выборка.НомерГТД);
		структураНомерГТД.СтранаПроисхождения = СформироватьУИДДляВыгрузки(Выборка.НомерГТД.СтранаПроисхождения);
		структураСтрокаТовары.Вставить("НомерГТД", структураНомерГТД);
		
		структураСтрокаТовары.Вставить("СчетУчета","");
		структураСтрокаТовары.Вставить("СчетУчетаНДСПоРеализации","");
		структураСтрокаТовары.Вставить("СчетДоходов","");
		структураСтрокаТовары.Вставить("СчетРасходов","");
		
		структураСтрокаТовары.Вставить("СуммаВознаграждения",Выборка.СуммаВознаграждения);
		
		мсвТовары.Добавить(структураСтрокаТовары);
		
	КонецЦикла;
	
	СтруктураВыгрузки.Вставить("Товары",мсвТовары);
	
	НовОб = ТаблицаВыгрузки.Добавить();
	НовОб.СсылкаНаОбъект = СсылкаНаОбъект;
	НовОб.СтруктураВыгрузки = СтруктураВыгрузки;			
	
КонецПроцедуры

Процедура ВыгрузитьКорректировкуЗадолженности(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок)
	
		
	
КонецПроцедуры 

Процедура ВыгрузитьПоступлениеУслугПоАренде(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок)
	
	Если СсылкаНаОбъект.Пустая() Тогда
		Возврат;
	КонецЕсли;	 
	
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("УИД", СформироватьУИДДляВыгрузки(СсылкаНаОбъект)); 	
	СтруктураВыгрузки.Вставить("ТипОбъекта", "ПриобретениеТоваровУслуг");
	СтруктураВыгрузки.Вставить("Номер", СсылкаНаОбъект.Номер); 
	СтруктураВыгрузки.Вставить("Дата", СсылкаНаОбъект.Дата); 
	СтруктураВыгрузки.Вставить("Префикс","ПУ");
	СтруктураВыгрузки.Вставить("Проведен", СсылкаНаОбъект.Проведен);
	СтруктураВыгрузки.Вставить("Представление", Строка(СсылкаНаОбъект));
	СтруктураВыгрузки.Вставить("ПометкаУдаления", СсылкаНаОбъект.ПометкаУдаления);
	СтруктураВыгрузки.Вставить("ХозяйственнаяОперация","ПоступлениеУслугПоАренде");
	СтруктураВыгрузки.Вставить("Организация", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Организация));
	
	СтруктураВыгрузки.Вставить("Склад", "");
	
	СтруктураВыгрузки.Вставить("Подразделение", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Подразделение));
	СтруктураВыгрузки.Вставить("Контрагент", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Контрагент));
	СтруктураВыгрузки.Вставить("Договор", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Договор));
	СтруктураВыгрузки.Вставить("Валюта", СформироватьУИДДляВыгрузки(СсылкаНаОбъект.Валюта));
	СтруктураВыгрузки.Вставить("НомерВходящегоДокумента", СсылкаНаОбъект.НомерВходящегоДокумента); 
	СтруктураВыгрузки.Вставить("ДатаВходящегоДокумента", СсылкаНаОбъект.ДатаВходящегоДокумента);
	СтруктураВыгрузки.Вставить("Грузоотправитель", "");
	СтруктураВыгрузки.Вставить("КурсЧислитель", СсылкаНаОбъект.КурсЧислитель);
	СтруктураВыгрузки.Вставить("КурсЗнаменатель", СсылкаНаОбъект.КурсЗнаменатель);
	СтруктураВыгрузки.Вставить("ЦенаВключаетНДС", СсылкаНаОбъект.ЦенаВключаетНДС);
	СтруктураВыгрузки.Вставить("Комментарий", СсылкаНаОбъект.Комментарий);  
	
	
	СтруктураВыгрузки.Вставить("СчетУчетаРасчетов","76072");
	СтруктураВыгрузки.Вставить("СчетУчетаАвансов","6002");
	
	//СФ  
	ДополнитьСтрукутуруДаннымиСчетФактурыПолученной(СтруктураВыгрузки, СсылкаНаОбъект);
		
	мсвТЧТовары = Новый Массив;
	
	Для Каждого стрНачисления Из СсылкаНаОбъект.Начисления Цикл
		
		структураСтрокаТовары = Новый Структура;
		структураСтрокаТовары.Вставить("Номенклатура","");
		структураСтрокаТовары.Вставить("Количество",0);
			
		структураСтрокаТовары.Вставить("Цена",стрНачисления.Сумма);
		структураСтрокаТовары.Вставить("Сумма",стрНачисления.Сумма);
		структураСтрокаТовары.Вставить("СтавкаНДС",XMLСтрока(стрНачисления.СтавкаНДС.ПеречислениеСтавкаНДС));
	    структураСтрокаТовары.Вставить("СуммаНДС",стрНачисления.СуммаНДС);
		структураСтрокаТовары.Вставить("СуммаСНДС",стрНачисления.Сумма);		
		структураСтрокаТовары.Вставить("Склад",""); 
		
		структураСтрокаТовары.Вставить("ТипНачисления",Строка(стрНачисления.ТипНачисления));
		
		структураСтрокаТовары.Вставить("ЭтоУслуга", Истина);
			
		структураНомерГТД = Новый Структура("СтранаПроисхождения, Код, ПометкаУдаления, РегистрационныйНомер, СтранаВвозаНеРФ");
		структураСтрокаТовары.Вставить("НомерГТД", структураНомерГТД);
		
		структураСтрокаТовары.Вставить("СчетУчета","");
		структураСтрокаТовары.Вставить("СчетУчетаНДС","");
		структураСтрокаТовары.Вставить("ДокументДляРаспределенияРасходов","");  
		
		Если СсылкаНаОбъект.Договор.Балансодержатель = Перечисления.БалансодержательПредметовАренды.Арендодатель Тогда
			СчетУчета = ПолучитьСчетУчетаИзНастроек(Перечисления.ВидыСчетовРеглУчета.Расходы,СсылкаНаОбъект.Организация,стрНачисления.СтатьяРасходов.ГруппаФинансовогоУчетаРегл,Неопределено);
			структураСтрокаТовары.СчетУчета = КодСчетаРегл(СчетУчета);
			
			структураСтрокаТовары.Вставить("СтатьяРасходов",СформироватьУИДДляВыгрузки(стрНачисления.СтатьяРасходов));
		КонецЕсли;
		
		структураСтрокаТовары.Вставить("РаспределитьНаСебестоимость",Ложь);
				
		мсвТЧТовары.Добавить(структураСтрокаТовары);
				
	КонецЦикла; 
	
	СтруктураВыгрузки.Вставить("Товары",мсвТЧТовары);
	
	НовОб = ТаблицаВыгрузки.Добавить();
	НовОб.СсылкаНаОбъект = СсылкаНаОбъект;
	НовОб.СтруктураВыгрузки = СтруктураВыгрузки;			
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаОстатков 

//Процедура ВыгрузитьОстаткиПоСчету(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок, МассивОбработанныхОбъектов)
Процедура ВыгрузитьОстаткиПоСчету(СсылкаНаОбъект, ТаблицаВыгрузки, ОписаниеОшибок)
	
	//получаем остатки по счёту
	ТаблицаДопДанных = Новый ТаблицаЗначений;
	ТаблицаОстатков = ПолучитьОстаткиПоСчету(СсылкаНаОбъект, ТаблицаДопДанных);
	ТабОрганизацииПодразделения = ТаблицаОстатков.Скопировать(,"Организация, Подразделение");
	ТабОрганизацииПодразделения.Свернуть("Организация, Подразделение");
	
	МетаДоки = Метаданные.Документы;
	
	Для Каждого ОргПодр Из ТабОрганизацииПодразделения Цикл
		
		СтруктураВыгрузки = Новый Структура;                     
		СтруктураВыгрузки.Вставить("УИД","00000000-0000-0000-0000-000000000000"); 
		СтруктураВыгрузки.Вставить("ТипОбъекта", "ВводОстатков");
		СтруктураВыгрузки.Вставить("Счет", СсылкаНаОбъект.КодБыстрогоВыбора);
		СтруктураВыгрузки.Вставить("Организация", Строка(ОргПодр.Организация.УникальныйИдентификатор()));//!! надо ли заменять на СформироватьУИДДляВыгрузки
		ВыгрузитьОрганизацию(ОргПодр.Организация, ТаблицаВыгрузки, ОписаниеОшибок);
		
		Если ОргПодр.Подразделение <> Null тогда 
			СтруктураВыгрузки.Вставить("Подразделение", Строка(ОргПодр.Подразделение.УникальныйИдентификатор()));
			ВыгрузитьПодразделение(ОргПодр.Подразделение, ОргПодр.Организация, ТаблицаВыгрузки, ОписаниеОшибок);
		Иначе
			СтруктураВыгрузки.Вставить("Подразделение", "");
		КонецЕсли;	
		
		СтрокиОстатков = ТаблицаОстатков.НайтиСтроки(Новый Структура("Организация, Подразделение", ОргПодр.Организация, ОргПодр.Подразделение));		
		
		Остатки = Новый Массив;
		
		Для Каждого Стр Из СтрокиОстатков Цикл
			
			Нстр = Новый Структура;
			Если Стр.Субконто1 <> Null Тогда                                                
				Если Стр.Субконто1 <> Неопределено Тогда
					Нстр.Вставить("ТипСубконто1", XMLТипЗнч(Стр.Субконто1).ИмяТипа);
					Нстр.Вставить("ПредставлениеСубконто1", Строка(Стр.Субконто1));
					Если СтрНайти(Нстр.ТипСубконто1, "Enum") > 0 Тогда
						Нстр.Вставить("ПредставлениеСубконто1", XMLСтрока(Стр.Субконто1));						
					ИначеЕсли СтрНайти(Нстр.ТипСубконто1, "DocumentRef") = 0 Тогда
						Нстр.Вставить("Субконто1", Строка(Стр.Субконто1.УникальныйИдентификатор()));
						Если ТипЗнч(Стр.Субконто1) = Тип("СправочникСсылка.Организации") Тогда     
							ВыгрузитьОрганизациюКакКонтрагента(Стр.Субконто1, ТаблицаВыгрузки, ОписаниеОшибок);
						ИначеЕсли Стр.Счет.КодБыстрогоВыбора = "0803" Тогда
							ВыгрузитьОбъектСтроительства(Стр.Субконто1, ТаблицаВыгрузки, ОписаниеОшибок);							
						Иначе	
							ВыгрузитьОбъект(Стр.Субконто1, ТаблицаВыгрузки, ОписаниеОшибок); 
						КонецЕсли;
					Иначе
						Нстр.Вставить("Субконто1", Строка(Стр.Субконто1.УникальныйИдентификатор()));							
					КонецЕсли;					
				Иначе     
					Нстр.Вставить("Субконто1", "");	
				КонецЕсли;	
			КонецЕсли;	
			
			Если Стр.Субконто2 <> Null Тогда
				Если Стр.Субконто2 <> Неопределено Тогда
					Нстр.Вставить("ТипСубконто2", XMLТипЗнч(Стр.Субконто2).ИмяТипа);
					Нстр.Вставить("ПредставлениеСубконто2", Строка(Стр.Субконто2));
					Если СтрНайти(Нстр.ТипСубконто2, "Enum") > 0 Тогда
						Нстр.Вставить("ПредставлениеСубконто2", XMLСтрока(Стр.Субконто2));						
					ИначеЕсли СтрНайти(Нстр.ТипСубконто2, "DocumentRef") = 0 Тогда
						Нстр.Вставить("Субконто2", Строка(Стр.Субконто2.УникальныйИдентификатор()));						
						Если ТипЗнч(Стр.Субконто2) = Тип("СправочникСсылка.Организации") Тогда     
							ВыгрузитьОрганизациюКакКонтрагента(Стр.Субконто2, ТаблицаВыгрузки, ОписаниеОшибок);
						Иначе	
							ВыгрузитьОбъект(Стр.Субконто2, ТаблицаВыгрузки, ОписаниеОшибок);
						КонецЕсли;
					Иначе
						Нстр.Вставить("Субконто2", Строка(Стр.Субконто2.УникальныйИдентификатор()));						
					КонецЕсли;	
				Иначе     
					Нстр.Вставить("Субконто2", "");	
				КонецЕсли;	
			КонецЕсли;	
			
			Если Стр.Субконто3 <> Null Тогда
				Если Стр.Субконто3 <> Неопределено Тогда
					Нстр.Вставить("Субконто3", Строка(Стр.Субконто3.УникальныйИдентификатор()));
					Нстр.Вставить("ТипСубконто3", XMLТипЗнч(Стр.Субконто3).ИмяТипа);
					Нстр.Вставить("ПредставлениеСубконто3", Строка(Стр.Субконто3));
					Если СтрНайти(Нстр.ТипСубконто3, "DocumentRef") = 0 Тогда
						Если ТипЗнч(Стр.Субконто3) = Тип("СправочникСсылка.Организации") Тогда     
							ВыгрузитьОрганизациюКакКонтрагента(Стр.Субконто3, ТаблицаВыгрузки, ОписаниеОшибок);
						Иначе	
							ВыгрузитьОбъект(Стр.Субконто3, ТаблицаВыгрузки, ОписаниеОшибок);
						КонецЕсли;	
					КонецЕсли;	
				Иначе     
					Нстр.Вставить("Субконто3", "");	
				КонецЕсли;	
			КонецЕсли;	
			
			Если Стр.Валюта <> Null Тогда
				Нстр.Вставить("Валюта", Строка(Стр.Валюта.УникальныйИдентификатор()));
				ВыгрузитьВалюту(Стр.Валюта, ТаблицаВыгрузки, ОписаниеОшибок);
			КонецЕсли;
			
			Нстр.Вставить("Сумма", Стр.СуммаОстаток);
			Нстр.Вставить("СуммаДт", Стр.СуммаОстатокДт);
			Нстр.Вставить("СуммаКт", Стр.СуммаОстатокКт);
			Нстр.Вставить("ВалютнаяСумма", Стр.ВалютнаяСуммаОстаток);
			Нстр.Вставить("ВалютнаяСуммаДт", Стр.ВалютнаяСуммаОстатокДт);
			Нстр.Вставить("ВалютнаяСуммаКт", Стр.ВалютнаяСуммаОстатокКт);
			Нстр.Вставить("Количество", Стр.КоличествоОстаток);
			Нстр.Вставить("КоличествоДт", Стр.КоличествоОстатокДт);
			Нстр.Вставить("КоличествоКт", Стр.КоличествоОстатокКт);
			Нстр.Вставить("СуммаНУ", Стр.СуммаНУОстаток);
			Нстр.Вставить("СуммаНУДт", Стр.СуммаНУОстатокДт);
			Нстр.Вставить("СуммаНУКт", Стр.СуммаНУОстатокКт);
			Нстр.Вставить("СуммаПР", Стр.СуммаПРОстаток);
			Нстр.Вставить("СуммаПРДт", Стр.СуммаПРОстатокДт);
			Нстр.Вставить("СуммаПРКт", Стр.СуммаПРОстатокКт);
			Нстр.Вставить("СуммаВР", Стр.СуммаВРОстаток);
			Нстр.Вставить("СуммаВРДт", Стр.СуммаВРОстатокДт);
			Нстр.Вставить("СуммаВРКт", Стр.СуммаВРОстатокКт);
			Если СсылкаНаОбъект.КодБыстрогоВыбора = "76АВ" И Нстр.Субконто2 <> "" Тогда
				СтрокаДопДанных = ТаблицаДопДанных.НайтиСтроки(Новый Структура("КонтрагентНеВыгружать, ДокументНеВыгружать", Стр.Субконто1, Стр.Субконто2));
				Если СтрокаДопДанных.Количество() > 0 Тогда
					Нстр.Вставить("НомерСФ",СтрокаДопДанных[0].НомерСФ);
					Нстр.Вставить("ДатаСФ",СтрокаДопДанных[0].ДатаСФ);
					Нстр.Вставить("СуммаБезНДС",СтрокаДопДанных[0].СуммаБезНДС);
					Нстр.Вставить("НДС",СтрокаДопДанных[0].НДС);
					Нстр.Вставить("СтавкаНДС",XMLСтрока(СтрокаДопДанных[0].СтавкаНДС));					
				КонецЕсли;
			ИначеЕсли СсылкаНаОбъект.КодБыстрогоВыбора = "70" Тогда
				СтрокаДопДанных = ТаблицаДопДанных.НайтиСтроки(Новый Структура("ФизическоеЛицо, Организация", Стр.Субконто1, ОргПодр.Организация));
				Если СтрокаДопДанных.Количество() > 0 Тогда
					Нстр.Вставить("Сотрудник", Строка(СтрокаДопДанных[0].Сотрудник.УникальныйИдентификатор()));
					ВыгрузитьСотрудника(СтрокаДопДанных[0].Сотрудник, ТаблицаВыгрузки, ОписаниеОшибок);
				КонецЕсли;
			ИначеЕсли (СсылкаНаОбъект.КодБыстрогоВыбора = "1903" ИЛИ СсылкаНаОбъект.КодБыстрогоВыбора = "1904") Тогда
				СтрокаДопДанных = ТаблицаДопДанных.НайтиСтроки(Новый Структура("КонтрагентНеВыгружать, ДокументНеВыгружать", Стр.Субконто1, Стр.Субконто2));
				Если СтрокаДопДанных.Количество() > 0 Тогда
					Нстр.Вставить("НомерСФ", СтрокаДопДанных[0].НомерСФ);
					Нстр.Вставить("ДатаСФ", СтрокаДопДанных[0].ДатаСФ); 
					Попытка     
						НаимТабл = "Товары";
						Если ТипЗнч(Стр.Субконто2) = Тип("ДокументСсылка.ПоступлениеУслугПоАренде") Тогда
							НаимТабл = "Начисления";
						КонецЕсли;
						Нстр.Вставить("СуммаБезНДС", Окр((Стр.СуммаОстаток/Стр.Субконто2[НаимТабл].Итог("СуммаНДС")) * Стр.Субконто2[НаимТабл].Итог("СуммаСНДС"), 2, 1));
						Нстр.Вставить("НДС", Стр.СуммаОстаток);
						Нстр.Вставить("СтавкаНДС", XMLСтрока(Стр.Субконто2[НаимТабл][0].СтавкаНДС.ПеречислениеСтавкаНДС));
					Исключение
						Нстр.Вставить("НДС", Стр.СуммаОстаток);	
						Нстр.Вставить("СтавкаНДС", XMLСтрока(Перечисления.СтавкиНДС.БезНДС));	
					КонецПопытки;
				КонецЕсли;
			ИначеЕсли СсылкаНаОбъект.КодБыстрогоВыбора = "0101" Тогда
				СтрокаДопДанных = ТаблицаДопДанных.НайтиСтроки(Новый Структура("ОсновноеСредство, Организация, Подразделение", Стр.Субконто1, ОргПодр.Организация, ОргПодр.Подразделение));
				Если СтрокаДопДанных.Количество() > 0 Тогда
					ДокументПринятияКУчету = СтрокаДопДанных[0];
					ДополнитьСтруктуруСчетаОС(Нстр);
					ЗаполнитьЗначенияСвойств(Нстр, ДокументПринятияКУчету); 
					
					Для каждого ЗнСтруктуры из Нстр Цикл 
						СсылкаНаЗначение = ЗнСтруктуры.Значение; 
						
						Если СсылкаНаЗначение = Null Тогда
							Нстр[ЗнСтруктуры.Ключ] = "";
						КонецЕсли;
						
						Если НЕ ОбщегоНазначения.ЗначениеСсылочногоТипа(СсылкаНаЗначение) Тогда
							Продолжить;
						КонецЕсли;  
						
						Если ТипЗнч(СсылкаНаЗначение) = Тип("ПеречислениеСсылка.АмортизационныеГруппы")
							ИЛИ ТипЗнч(СсылкаНаЗначение) = Тип("ПеречислениеСсылка.ТипыНалогообложенияНДС") 
							ИЛИ ТипЗнч(СсылкаНаЗначение) = Тип("ПеречислениеСсылка.СпособыПоступленияАктивов")   
							ИЛИ ТипЗнч(СсылкаНаЗначение) = Тип("ПеречислениеСсылка.ПорядокВключенияСтоимостиОСВСоставРасходовНУ")
							ИЛИ ТипЗнч(СсылкаНаЗначение) = Тип("ПеречислениеСсылка.ПорядокПогашенияСтоимостиОС") Тогда
							Нстр[ЗнСтруктуры.Ключ] = XMLСтрока(СсылкаНаЗначение); 
							Продолжить;
						КонецЕсли;
						
						Нстр[ЗнСтруктуры.Ключ] = Строка(СсылкаНаЗначение.УникальныйИдентификатор()); 
						ВыгрузитьОбъект(СсылкаНаЗначение, ТаблицаВыгрузки, ОписаниеОшибок);
					КонецЦикла;
					
				КонецЕсли;
			ИначеЕсли СсылкаНаОбъект.КодБыстрогоВыбора = "4101" Тогда	
				СтрокиПартий = ТаблицаДопДанных.НайтиСтроки(Новый Структура("Субконто1, Субконто2, Организация, Подразделение", Стр.Субконто1, Стр.Субконто2, ОргПодр.Организация, ОргПодр.Подразделение));
				ДанныеПартий = Новый Массив;
				Для Каждого СтрПартии из СтрокиПартий Цикл
					Если СтрПартии.ОстатокПартии = 0 ИЛИ СтрПартии.ОстатокПартии = Null Тогда
						Продолжить;
					Иначе     
						СтруктураПартии = Новый Структура;
						Если ЗначениеЗаполнено(СтрПартии.Партия) Тогда
							СтруктураПартии.Вставить("Партия",Строка(СтрПартии.Партия));
						Иначе
							СтруктураПартии.Вставить("Партия", "Неопределенная партия");
						КонецЕсли;
						Если ЗначениеЗаполнено(СтрПартии.Договор) Тогда
							СтруктураПартии.Вставить("Договор", Строка(СтрПартии.Договор.УникальныйИдентификатор()));
							ВыгрузитьДоговор(СтрПартии.Договор, ТаблицаВыгрузки, ОписаниеОшибок);
						Иначе
							СтруктураПартии.Вставить("Договор", "");
						КонецЕсли;	                                
						Если ЗначениеЗаполнено(СтрПартии.Контрагент) Тогда
							СтруктураПартии.Вставить("Контрагент", Строка(СтрПартии.Контрагент.УникальныйИдентификатор()));
							Если ТипЗнч(СтрПартии.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
								ВыгрузитьОрганизациюКакКонтрагента(СтрПартии.Контрагент, ТаблицаВыгрузки, ОписаниеОшибок);
							Иначе     
								ВыгрузитьКонтрагента(СтрПартии.Контрагент, ТаблицаВыгрузки, ОписаниеОшибок);
							КонецЕсли;
						Иначе
							СтруктураПартии.Вставить("Контрагент", "");
						КонецЕсли;	                                   
						СтруктураПартии.Вставить("ОстатокПартии", СтрПартии.ОстатокПартии);
						СтруктураПартии.Вставить("СтоимостьРегл", СтрПартии.СтоимостьРегл);
						СтруктураПартии.Вставить("НДС", СтрПартии.НДС);
						ДанныеПартий.Добавить(СтруктураПартии);
					КонецЕсли;
				КонецЦикла;	
				Нстр.Вставить("ДанныеПартий", ДанныеПартий);
			КонецЕсли;	                                         
			
			Остатки.Добавить(Нстр);
		КонецЦикла;	
		
		СтруктураВыгрузки.Вставить("Остатки", Остатки);
		
		ДополнитьВыгрузкуСлужебнымиДанными(СсылкаНаОбъект, СтруктураВыгрузки, ТаблицаВыгрузки);
		
		НовОб = ТаблицаВыгрузки.Добавить();
		НовОб.СсылкаНаОбъект = СсылкаНаОбъект;
		НовОб.СтруктураВыгрузки = СтруктураВыгрузки;				
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьВыгрузкуСлужебнымиДанными(СсылкаНаОбъект, СтруктураВыгрузки, ТаблицаВыгрузки)
	
	//в зависимости от счёта получаем дополнительные данные из служебных регистров
	//дополняем структуру выгрузки и принеобходимости таблицу выгрузки
	
КонецПроцедуры	

Функция ПолучитьДокументыПринятияКУчетуКСчету0101(МассивОбъектовЭксплуатации, ДатаНачала)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	""Принятие к учету ОС"" КАК ВидДокументаПринятияКУчету,
	|	ПринятиеКУчетуОСОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ПринятиеКУчетуОСОС.Ссылка.Организация КАК Организация,
	|	ПринятиеКУчетуОСОС.Ссылка.Подразделение КАК Подразделение,
	|	ПринятиеКУчетуОСОС.Ссылка.Номер КАК НомерДокументаПринятияКУчету,
	|	НАЧАЛОПЕРИОДА(ПринятиеКУчетуОСОС.Ссылка.Дата, ДЕНЬ) КАК ДатаДокументаПринятияКУчету,
	|	ПРЕДСТАВЛЕНИЕ(ПринятиеКУчетуОСОС.Ссылка.АдресМестонахождения) КАК АдресМестонахождения,
	|	ПРЕДСТАВЛЕНИЕ(ПринятиеКУчетуОСОС.Ссылка.МОЛ) КАК МОЛ,
	|	ПринятиеКУчетуОСОС.Ссылка.НалогообложениеНДС КАК НалогообложениеНДС,
	|	ПринятиеКУчетуОСОС.Ссылка.СчетУчета.КодБыстрогоВыбора КАК КодБыстрогоДоступаСчетУчета,
	|	ПринятиеКУчетуОСОС.Ссылка.СчетАмортизации.КодБыстрогоВыбора КАК КодБыстрогоДоступаСчетАмортизации,
	|	ПринятиеКУчетуОСОС.Ссылка.СрокИспользованияБУ КАК СрокИспользованияБУ,
	|	ПринятиеКУчетуОСОС.Ссылка.СрокИспользованияНУ КАК СрокИспользованияНУ,
	|	ПринятиеКУчетуОСОС.Ссылка.СпособПоступления КАК СпособПоступления,
	|	ПринятиеКУчетуОСОС.Ссылка.ПорядокУчетаБУ КАК ПорядокУчетаБУ,
	|	ПринятиеКУчетуОСОС.Ссылка.ПорядокУчетаНУ КАК ПорядокУчетаНУ,
	|	ПринятиеКУчетуОСОС.Ссылка.СпециальныйКоэффициентНУ КАК СпециальныйКоэффициентНУ,
	|	ПринятиеКУчетуОСОС.Ссылка.ДокументОснование КАК ДокументЛизинга,
	|	ПринятиеКУчетуОСОС.Ссылка.ДокументОснование.Контрагент КАК ДокументЛизингаКонтрагент,
	|	ПринятиеКУчетуОСОС.Ссылка.ДокументОснование.Договор КАК ДокументЛизингаДоговор
	|ПОМЕСТИТЬ ВТ_ДокументыВводаАктивов
	|ИЗ
	|	Документ.ПринятиеКУчетуОС.ОС КАК ПринятиеКУчетуОСОС
	|ГДЕ
	|	ПринятиеКУчетуОСОС.ОсновноеСредство В(&МассивОбъектовЭксплуатации)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Ввод остатков внеоборотных активов ОС"",
	|	ВводОстатковВнеоборотныхАктивовОС.ОсновноеСредство,
	|	ВводОстатковВнеоборотныхАктивовОС.Ссылка.Организация,
	|	ВводОстатковВнеоборотныхАктивовОС.Ссылка.Подразделение,
	|	ВводОстатковВнеоборотныхАктивовОС.Ссылка.Номер,
	|	НАЧАЛОПЕРИОДА(ВводОстатковВнеоборотныхАктивовОС.Ссылка.Дата, ДЕНЬ),
	|	ПРЕДСТАВЛЕНИЕ(ВводОстатковВнеоборотныхАктивовОС.АдресМестонахождения),
	|	ПРЕДСТАВЛЕНИЕ(ВводОстатковВнеоборотныхАктивовОС.МОЛ),
	|	ВводОстатковВнеоборотныхАктивовОС.НалогообложениеНДС,
	|	ВводОстатковВнеоборотныхАктивовОС.СчетУчета.КодБыстрогоВыбора,
	|	ВводОстатковВнеоборотныхАктивовОС.СчетАмортизации.КодБыстрогоВыбора,
	|	ВводОстатковВнеоборотныхАктивовОС.СрокИспользованияБУ,
	|	ВводОстатковВнеоборотныхАктивовОС.СрокИспользованияНУ,
	|	ВводОстатковВнеоборотныхАктивовОС.СпособПоступления,
	|	ВводОстатковВнеоборотныхАктивовОС.ПорядокУчетаБУ,
	|	ВводОстатковВнеоборотныхАктивовОС.ПорядокУчетаНУ,
	|	ВводОстатковВнеоборотныхАктивовОС.СпециальныйКоэффициентНУ,
	|	"""",
	|	"""",
	|	""""
	|ИЗ
	|	Документ.ВводОстатковВнеоборотныхАктивов.ОС КАК ВводОстатковВнеоборотныхАктивовОС
	|ГДЕ
	|	ВводОстатковВнеоборотныхАктивовОС.ОсновноеСредство В(&МассивОбъектовЭксплуатации)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Ввод остатков внеоборотных активов ОС 2.4"",
	|	ВводОстатковВнеоборотныхАктивов2_4.ОсновноеСредство,
	|	ВводОстатковВнеоборотныхАктивов2_4.Ссылка.Организация,
	|	ВводОстатковВнеоборотныхАктивов2_4.Подразделение,
	|	ВводОстатковВнеоборотныхАктивов2_4.Ссылка.Номер,
	|	НАЧАЛОПЕРИОДА(ВводОстатковВнеоборотныхАктивов2_4.Ссылка.Дата, ДЕНЬ),
	|	ПРЕДСТАВЛЕНИЕ(ВводОстатковВнеоборотныхАктивов2_4.АдресМестонахождения),
	|	ПРЕДСТАВЛЕНИЕ(ВводОстатковВнеоборотныхАктивов2_4.МОЛ),
	|	ВводОстатковВнеоборотныхАктивов2_4.НалогообложениеНДС,
	|	""0101"",
	|	""0201"",
	|	ВводОстатковВнеоборотныхАктивов2_4.СрокИспользованияБУ,
	|	ВводОстатковВнеоборотныхАктивов2_4.СрокИспользованияНУ,
	|	ВводОстатковВнеоборотныхАктивов2_4.СпособПоступления,
	|	ВводОстатковВнеоборотныхАктивов2_4.ПорядокУчетаБУ,
	|	ВводОстатковВнеоборотныхАктивов2_4.ПорядокУчетаНУ,
	|	ВводОстатковВнеоборотныхАктивов2_4.СпециальныйКоэффициентНУ,
	|	"""",
	|	"""",
	|	""""
	|ИЗ
	|	Документ.ВводОстатковВнеоборотныхАктивов2_4.ОС КАК ВводОстатковВнеоборотныхАктивов2_4
	|ГДЕ
	|	ВводОстатковВнеоборотныхАктивов2_4.ОсновноеСредство В(&МассивОбъектовЭксплуатации)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДокументыВводаАктивов.ВидДокументаПринятияКУчету КАК ВидДокументаПринятияКУчету,
	|	ВТ_ДокументыВводаАктивов.ОсновноеСредство КАК ОсновноеСредство,
	|	ВТ_ДокументыВводаАктивов.Организация КАК Организация,
	|	ВТ_ДокументыВводаАктивов.Подразделение КАК Подразделение,
	|	ВТ_ДокументыВводаАктивов.НомерДокументаПринятияКУчету КАК НомерДокументаПринятияКУчету,
	|	ВТ_ДокументыВводаАктивов.ДатаДокументаПринятияКУчету КАК ДатаДокументаПринятияКУчету,
	|	ВТ_ДокументыВводаАктивов.АдресМестонахождения КАК АдресМестонахождения,
	|	ВТ_ДокументыВводаАктивов.МОЛ КАК МОЛ,
	|	ВТ_ДокументыВводаАктивов.НалогообложениеНДС КАК НалогообложениеНДС,
	|	ВТ_ДокументыВводаАктивов.КодБыстрогоДоступаСчетУчета КАК КодБыстрогоДоступаСчетУчета,
	|	ВТ_ДокументыВводаАктивов.КодБыстрогоДоступаСчетАмортизации КАК КодБыстрогоДоступаСчетАмортизации,
	|	ВТ_ДокументыВводаАктивов.СрокИспользованияБУ КАК СрокИспользованияБУ,
	|	ВТ_ДокументыВводаАктивов.СрокИспользованияНУ КАК СрокИспользованияНУ,
	|	ВТ_ДокументыВводаАктивов.СпособПоступления КАК СпособПоступления,
	|	ВТ_ДокументыВводаАктивов.ПорядокУчетаБУ КАК ПорядокУчетаБУ,
	|	ВТ_ДокументыВводаАктивов.ПорядокУчетаНУ КАК ПорядокУчетаНУ,
	|	ВТ_ДокументыВводаАктивов.СпециальныйКоэффициентНУ КАК СпециальныйКоэффициентНУ,
	|	ВТ_ДокументыВводаАктивов.ДокументЛизингаКонтрагент КАК ДокументЛизингаКонтрагент,
	|	ВТ_ДокументыВводаАктивов.ДокументЛизингаДоговор КАК ДокументЛизингаДоговор,
	|	ЕСТЬNULL(ХозрасчетныйОстаткиАмортизация.Сумма, 0) КАК СуммаАмортизация,
	|	ЕСТЬNULL(ХозрасчетныйОстаткиАмортизация.СуммаДт, 0) КАК СуммаДтАмортизация,
	|	ЕСТЬNULL(ХозрасчетныйОстаткиАмортизация.СуммаКт, 0) КАК СуммаКтАмортизация,
	|	ЕСТЬNULL(ХозрасчетныйОстаткиАмортизация.СуммаРазвернутыйДт, 0) КАК СуммаРазвернутыйДтАмортизация,
	|	ЕСТЬNULL(ХозрасчетныйОстаткиАмортизация.СуммаРазвернутыйКт, 0) КАК СуммаРазвернутыйКтАмортизация,
	|	ЕСТЬNULL(ХозрасчетныйОстаткиАмортизация.СуммаНУ, 0) КАК СуммаНУАмортизация,
	|	ЕСТЬNULL(ХозрасчетныйОстаткиАмортизация.СуммаНУДт, 0) КАК СуммаНУДтАмортизация,
	|	ЕСТЬNULL(ХозрасчетныйОстаткиАмортизация.СуммаНУКт, 0) КАК СуммаНУКтАмортизация,
	|	ЕСТЬNULL(ХозрасчетныйОстаткиАмортизация.СуммаНУРазвернутыйДт, 0) КАК СуммаНУРазвернутыйДтАмортизация,
	|	ЕСТЬNULL(ХозрасчетныйОстаткиАмортизация.СуммаНУРазвернутыйКт, 0) КАК СуммаНУРазвернутыйКтАмортизация,
	|	ЕСТЬNULL(ХозрасчетныйОстаткиАмортизация.СуммаВР, 0) КАК СуммаВРАмортизация,
	|	ЕСТЬNULL(ХозрасчетныйОстаткиАмортизация.СуммаВРДт, 0) КАК СуммаВРДтАмортизация,
	|	ЕСТЬNULL(ХозрасчетныйОстаткиАмортизация.СуммаВРКт, 0) КАК СуммаВРКтАмортизация,
	|	ЕСТЬNULL(ХозрасчетныйОстаткиАмортизация.СуммаВРРазвернутыйДт, 0) КАК СуммаВРРазвернутыйДтАмортизация,
	|	ЕСТЬNULL(ХозрасчетныйОстаткиАмортизация.СуммаВРРазвернутыйКт, 0) КАК СуммаВРРазвернутыйКтАмортизация,
	|	ЕСТЬNULL(ХозрасчетныйОстаткиКорректировка.Сумма, 0) КАК СуммаКорректировка,
	|	ЕСТЬNULL(ХозрасчетныйОстаткиКорректировка.СуммаДт, 0) КАК СуммаДтКорректировка,
	|	ЕСТЬNULL(ХозрасчетныйОстаткиКорректировка.СуммаКт, 0) КАК СуммаКтКорректировка,
	|	ЕСТЬNULL(ХозрасчетныйОстаткиКорректировка.СуммаРазвернутыйДт, 0) КАК СуммаРазвернутыйДтКорректировка,
	|	ЕСТЬNULL(ХозрасчетныйОстаткиКорректировка.СуммаРазвернутыйКт, 0) КАК СуммаРазвернутыйКтКорректировка,
	|	ЕСТЬNULL(ХозрасчетныйОстаткиКорректировка.СуммаНУ, 0) КАК СуммаНУКорректировка,
	|	ЕСТЬNULL(ХозрасчетныйОстаткиКорректировка.СуммаНУДт, 0) КАК СуммаНУДтКорректировка,
	|	ЕСТЬNULL(ХозрасчетныйОстаткиКорректировка.СуммаНУКт, 0) КАК СуммаНУКтКорректировка,
	|	ЕСТЬNULL(ХозрасчетныйОстаткиКорректировка.СуммаНУРазвернутыйДт, 0) КАК СуммаНУРазвернутыйДтКорректировка,
	|	ЕСТЬNULL(ХозрасчетныйОстаткиКорректировка.СуммаНУРазвернутыйКт, 0) КАК СуммаНУРазвернутыйКтКорректировка,
	|	ЕСТЬNULL(ХозрасчетныйОстаткиКорректировка.СуммаВР, 0) КАК СуммаВРКорректировка,
	|	ЕСТЬNULL(ХозрасчетныйОстаткиКорректировка.СуммаВРДт, 0) КАК СуммаВРДтКорректировка,
	|	ЕСТЬNULL(ХозрасчетныйОстаткиКорректировка.СуммаВРКт, 0) КАК СуммаВРКтКорректировка,
	|	ЕСТЬNULL(ХозрасчетныйОстаткиКорректировка.СуммаВРРазвернутыйДт, 0) КАК СуммаВРРазвернутыйДтКорректировка,
	|	ЕСТЬNULL(ХозрасчетныйОстаткиКорректировка.СуммаВРРазвернутыйКт, 0) КАК СуммаВРРазвернутыйКтКорректировка
	|
	|ИЗ
	|	ВТ_ДокументыВводаАктивов КАК ВТ_ДокументыВводаАктивов
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ХозрасчетныйОстатки.Счет КАК Счет,
	|			ХозрасчетныйОстатки.Субконто1 КАК Субконто1,
	|			ХозрасчетныйОстатки.Организация КАК Организация,
	|			ХозрасчетныйОстатки.Подразделение КАК Подразделение,
	|			ХозрасчетныйОстатки.СуммаОстаток КАК Сумма,
	|			ХозрасчетныйОстатки.СуммаОстатокДт КАК СуммаДт,
	|			ХозрасчетныйОстатки.СуммаОстатокКт КАК СуммаКт,
	|			ХозрасчетныйОстатки.СуммаРазвернутыйОстатокДт КАК СуммаРазвернутыйДт,
	|			ХозрасчетныйОстатки.СуммаРазвернутыйОстатокКт КАК СуммаРазвернутыйКт,
	|			ХозрасчетныйОстатки.СуммаНУОстаток КАК СуммаНУ,
	|			ХозрасчетныйОстатки.СуммаНУОстатокДт КАК СуммаНУДт,
	|			ХозрасчетныйОстатки.СуммаНУОстатокКт КАК СуммаНУКт,
	|			ХозрасчетныйОстатки.СуммаНУРазвернутыйОстатокДт КАК СуммаНУРазвернутыйДт,
	|			ХозрасчетныйОстатки.СуммаНУРазвернутыйОстатокКт КАК СуммаНУРазвернутыйКт,
	|			ХозрасчетныйОстатки.СуммаВРОстаток КАК СуммаВР,
	|			ХозрасчетныйОстатки.СуммаВРОстатокДт КАК СуммаВРДт,
	|			ХозрасчетныйОстатки.СуммаВРОстатокКт КАК СуммаВРКт,
	|			ХозрасчетныйОстатки.СуммаВРРазвернутыйОстатокДт КАК СуммаВРРазвернутыйДт,
	|			ХозрасчетныйОстатки.СуммаВРРазвернутыйОстатокКт КАК СуммаВРРазвернутыйКт
	|		ИЗ
	|			РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаНачала, Счет В(&СчетАмортизации), , Субконто1 В (&МассивОбъектовЭксплуатации)) КАК ХозрасчетныйОстатки) КАК ХозрасчетныйОстаткиАмортизация
	|		ПО ВТ_ДокументыВводаАктивов.ОсновноеСредство = ХозрасчетныйОстаткиАмортизация.Субконто1
	|			И ВТ_ДокументыВводаАктивов.Организация = ХозрасчетныйОстаткиАмортизация.Организация
	|			//И ВТ_ДокументыВводаАктивов.Подразделение = ХозрасчетныйОстаткиАмортизация.Подразделение
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ХозрасчетныйОстатки.Счет КАК Счет,
	|			ХозрасчетныйОстатки.Субконто1 КАК Субконто1,
	|			ХозрасчетныйОстатки.Организация КАК Организация,
	|			ХозрасчетныйОстатки.Подразделение КАК Подразделение,
	|			ХозрасчетныйОстатки.СуммаОстаток КАК Сумма,
	|			ХозрасчетныйОстатки.СуммаОстатокДт КАК СуммаДт,
	|			ХозрасчетныйОстатки.СуммаОстатокКт КАК СуммаКт,
	|			ХозрасчетныйОстатки.СуммаРазвернутыйОстатокДт КАК СуммаРазвернутыйДт,
	|			ХозрасчетныйОстатки.СуммаРазвернутыйОстатокКт КАК СуммаРазвернутыйКт,
	|			ХозрасчетныйОстатки.СуммаНУОстаток КАК СуммаНУ,
	|			ХозрасчетныйОстатки.СуммаНУОстатокДт КАК СуммаНУДт,
	|			ХозрасчетныйОстатки.СуммаНУОстатокКт КАК СуммаНУКт,
	|			ХозрасчетныйОстатки.СуммаНУРазвернутыйОстатокДт КАК СуммаНУРазвернутыйДт,
	|			ХозрасчетныйОстатки.СуммаНУРазвернутыйОстатокКт КАК СуммаНУРазвернутыйКт,
	|			ХозрасчетныйОстатки.СуммаВРОстаток КАК СуммаВР,
	|			ХозрасчетныйОстатки.СуммаВРОстатокДт КАК СуммаВРДт,
	|			ХозрасчетныйОстатки.СуммаВРОстатокКт КАК СуммаВРКт,
	|			ХозрасчетныйОстатки.СуммаВРРазвернутыйОстатокДт КАК СуммаВРРазвернутыйДт,
	|			ХозрасчетныйОстатки.СуммаВРРазвернутыйОстатокКт КАК СуммаВРРазвернутыйКт
	|		ИЗ
	|			РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаНачала, Счет В(&СчетКорректировки), , Субконто1 В (&МассивОбъектовЭксплуатации)) КАК ХозрасчетныйОстатки) КАК ХозрасчетныйОстаткиКорректировка
	|		ПО ВТ_ДокументыВводаАктивов.ОсновноеСредство = ХозрасчетныйОстаткиКорректировка.Субконто1
	|			И ВТ_ДокументыВводаАктивов.Организация = ХозрасчетныйОстаткиКорректировка.Организация
	|			//И ВТ_ДокументыВводаАктивов.Подразделение = ХозрасчетныйОстаткиКорректировка.Подразделение
	|";
	
	Запрос.УстановитьПараметр("СчетАмортизации", ПланыСчетов.Хозрасчетный.НайтиПоКоду("02.01")); //Амортизация 01 счета  
	Запрос.УстановитьПараметр("СчетКорректировки", ПланыСчетов.Хозрасчетный.НайтиПоКоду("01.К"));   
	Запрос.УстановитьПараметр("МассивОбъектовЭксплуатации", МассивОбъектовЭксплуатации);  
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);  
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ДополнитьСтруктуруСчетаОС(Структура)  
	
	Структура.Вставить("ВидДокументаПринятияКУчету", "");
	Структура.Вставить("НомерДокументаПринятияКУчету", "");
	Структура.Вставить("ДатаДокументаПринятияКУчету", "");
	Структура.Вставить("АдресМестонахождения", "");
	Структура.Вставить("МОЛ", "");
	Структура.Вставить("НалогообложениеНДС", XMLСтрока(Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС));
	Структура.Вставить("КодБыстрогоДоступаСчетУчета", "0101");
	Структура.Вставить("КодБыстрогоДоступаСчетАмортизации", "0201");
	Структура.Вставить("СрокИспользованияБУ", 0);   
	Структура.Вставить("СрокИспользованияНУ", 0);  
	Структура.Вставить("СпособПоступления", XMLСтрока(Перечисления.СпособыПоступленияАктивов.ПриобретениеЗаПлату));  
	Структура.Вставить("ПорядокУчетаБУ", XMLСтрока(Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации));   
	Структура.Вставить("ПорядокУчетаБУ", XMLСтрока(Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации));   
	Структура.Вставить("СпециальныйКоэффициентНУ", 0);   
	Структура.Вставить("ДокументЛизингаКонтрагент", "");   
	Структура.Вставить("ДокументЛизингаДоговор", "");   
	Структура.Вставить("СуммаАмортизация", 0);   
	Структура.Вставить("СуммаДтАмортизация", 0);   
	Структура.Вставить("СуммаКтАмортизация", 0);   
	Структура.Вставить("СуммаРазвернутыйДтАмортизация", 0);   
	Структура.Вставить("СуммаРазвернутыйКтАмортизация", 0);   
	Структура.Вставить("СуммаНУАмортизация", 0);   
	Структура.Вставить("СуммаНУДтАмортизация", 0);   
	Структура.Вставить("СуммаНУКтАмортизация", 0);   
	Структура.Вставить("СуммаНУРазвернутыйДтАмортизация", 0);   
	Структура.Вставить("СуммаНУРазвернутыйКтАмортизация", 0);   
	Структура.Вставить("СуммаВРАмортизация", 0);   
	Структура.Вставить("СуммаВРДтАмортизация", 0);   
	Структура.Вставить("СуммаВРКтАмортизация", 0);   
	Структура.Вставить("СуммаВРРазвернутыйДтАмортизация", 0);   
	Структура.Вставить("СуммаВРРазвернутыйКтАмортизация", 0);  
	//
	Структура.Вставить("СуммаКорректировка", 0);   
	Структура.Вставить("СуммаДтКорректировка", 0);   
	Структура.Вставить("СуммаКтКорректировка", 0);   
	Структура.Вставить("СуммаРазвернутыйДтКорректировка", 0);   
	Структура.Вставить("СуммаРазвернутыйКтКорректировка", 0);   
	Структура.Вставить("СуммаНУКорректировка", 0);   
	Структура.Вставить("СуммаНУДтКорректировка", 0);   
	Структура.Вставить("СуммаНУКтКорректировка", 0);   
	Структура.Вставить("СуммаНУРазвернутыйДтКорректировка", 0);   
	Структура.Вставить("СуммаНУРазвернутыйКтКорректировка", 0);   
	Структура.Вставить("СуммаВРКорректировка", 0);   
	Структура.Вставить("СуммаВРДтКорректировка", 0);   
	Структура.Вставить("СуммаВРКтКорректировка", 0);   
	Структура.Вставить("СуммаВРРазвернутыйДтКорректировка", 0);   
	Структура.Вставить("СуммаВРРазвернутыйКтКорректировка", 0);   
	
	Возврат Структура;
	
КонецФункции

Функция ПолучитьОстаткиПоСчету(СсылкаНаОбъект, ТаблицаДопДанных)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ХозрасчетныйОстатки.Субконто1 КАК Субконто1,
	|	ХозрасчетныйОстатки.Субконто2 КАК Субконто2,
	|	ХозрасчетныйОстатки.Субконто3 КАК Субконто3,
	|	ХозрасчетныйОстатки.Организация КАК Организация,
	|	ХозрасчетныйОстатки.Валюта КАК Валюта,
	|	ХозрасчетныйОстатки.Подразделение КАК Подразделение,
	|	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаОстаток,
	|	ХозрасчетныйОстатки.СуммаОстатокДт КАК СуммаОстатокДт,
	|	ХозрасчетныйОстатки.СуммаОстатокКт КАК СуммаОстатокКт,
	|	ХозрасчетныйОстатки.СуммаРазвернутыйОстатокДт КАК СуммаРазвернутыйОстатокДт,
	|	ХозрасчетныйОстатки.СуммаРазвернутыйОстатокКт КАК СуммаРазвернутыйОстатокКт,
	|	ХозрасчетныйОстатки.ВалютнаяСуммаОстаток КАК ВалютнаяСуммаОстаток,
	|	ХозрасчетныйОстатки.ВалютнаяСуммаОстатокДт КАК ВалютнаяСуммаОстатокДт,
	|	ХозрасчетныйОстатки.ВалютнаяСуммаОстатокКт КАК ВалютнаяСуммаОстатокКт,
	|	ХозрасчетныйОстатки.ВалютнаяСуммаРазвернутыйОстатокДт КАК ВалютнаяСуммаРазвернутыйОстатокДт,
	|	ХозрасчетныйОстатки.ВалютнаяСуммаРазвернутыйОстатокКт КАК ВалютнаяСуммаРазвернутыйОстатокКт,
	|	ХозрасчетныйОстатки.КоличествоОстаток КАК КоличествоОстаток,
	|	ХозрасчетныйОстатки.КоличествоОстатокДт КАК КоличествоОстатокДт,
	|	ХозрасчетныйОстатки.КоличествоОстатокКт КАК КоличествоОстатокКт,
	|	ХозрасчетныйОстатки.КоличествоРазвернутыйОстатокДт КАК КоличествоРазвернутыйОстатокДт,
	|	ХозрасчетныйОстатки.КоличествоРазвернутыйОстатокКт КАК КоличествоРазвернутыйОстатокКт,
	|	ХозрасчетныйОстатки.СуммаНУОстаток КАК СуммаНУОстаток,
	|	ХозрасчетныйОстатки.СуммаНУОстатокДт КАК СуммаНУОстатокДт,
	|	ХозрасчетныйОстатки.СуммаНУОстатокКт КАК СуммаНУОстатокКт,
	|	ХозрасчетныйОстатки.СуммаНУРазвернутыйОстатокДт КАК СуммаНУРазвернутыйОстатокДт,
	|	ХозрасчетныйОстатки.СуммаНУРазвернутыйОстатокКт КАК СуммаНУРазвернутыйОстатокКт,
	|	ХозрасчетныйОстатки.СуммаПРОстаток КАК СуммаПРОстаток,
	|	ХозрасчетныйОстатки.СуммаПРОстатокДт КАК СуммаПРОстатокДт,
	|	ХозрасчетныйОстатки.СуммаПРОстатокКт КАК СуммаПРОстатокКт,
	|	ХозрасчетныйОстатки.СуммаПРРазвернутыйОстатокДт КАК СуммаПРРазвернутыйОстатокДт,
	|	ХозрасчетныйОстатки.СуммаПРРазвернутыйОстатокКт КАК СуммаПРРазвернутыйОстатокКт,
	|	ХозрасчетныйОстатки.СуммаВРОстаток КАК СуммаВРОстаток,
	|	ХозрасчетныйОстатки.СуммаВРОстатокДт КАК СуммаВРОстатокДт,
	|	ХозрасчетныйОстатки.СуммаВРОстатокКт КАК СуммаВРОстатокКт,
	|	ХозрасчетныйОстатки.СуммаВРРазвернутыйОстатокДт КАК СуммаВРРазвернутыйОстатокДт,
	|	ХозрасчетныйОстатки.СуммаВРРазвернутыйОстатокКт КАК СуммаВРРазвернутыйОстатокКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Дата, Счет = &Счет, , Организация В (&Организации)) КАК ХозрасчетныйОстатки";
	
	Запрос.УстановитьПараметр("Счет", СсылкаНаОбъект);
	Запрос.УстановитьПараметр("Дата", Новый Граница(Дата(2020, 12, 31, 23, 59, 59), ВидГраницы.Включая));
	
	Организации = Новый Массив;
	Организации.Добавить(Справочники.Организации.НайтиПоНаименованию("Тепло3000", Истина));
	Организации.Добавить(Справочники.Организации.НайтиПоНаименованию("ИП Орлова О. Н.", Истина));
	Организации.Добавить(Справочники.Организации.НайтиПоНаименованию("ИП Папсуев А. А.", Истина));
	Запрос.УстановитьПараметр("Организации", Организации);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если СсылкаНаОбъект.КодБыстрогоВыбора = "76АВ" Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|    Результат.Субконто1 КАК Контрагент,
		|    Результат.Субконто2 КАК Документ
		|ПОМЕСТИТЬ ВТРез
		|ИЗ
		|    &Результат КАК Результат
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|    ВТРез.Контрагент КАК КонтрагентНеВыгружать,
		|    ВТРез.Документ КАК ДокументНеВыгружать,
		|    ВложенныйЗапрос.Ссылка.Номер КАК НомерСФ,
		|    ВложенныйЗапрос.Ссылка.Дата КАК ДатаСФ,
		|    ВложенныйЗапрос.Сумма - ВложенныйЗапрос.СуммаНДС КАК СуммаБезНДС,
		|    ВложенныйЗапрос.Сумма КАК Сумма,
		|    ВложенныйЗапрос.СуммаНДС КАК НДС,
		|    ВложенныйЗапрос.СтавкаНДСПеречислениеСтавкаНДС КАК СтавкаНДС
		|ИЗ
		|    ВТРез КАК ВТРез
		|        ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|            СчетФактураВыданныйАвансАвансы.Ссылка КАК Ссылка,
		|            СчетФактураВыданныйАвансАвансы.Ссылка.ДокументОснование КАК ДокументОснование,
		|            СчетФактураВыданныйАвансАвансы.Ссылка.Контрагент КАК Контрагент,
		|            СУММА(СчетФактураВыданныйАвансАвансы.Сумма) КАК Сумма,
		|            СУММА(СчетФактураВыданныйАвансАвансы.СуммаНДС) КАК СуммаНДС,
		|            СчетФактураВыданныйАвансАвансы.СтавкаНДС.ПеречислениеСтавкаНДС КАК СтавкаНДСПеречислениеСтавкаНДС
		|        ИЗ
		|            Документ.СчетФактураВыданныйАванс.Авансы КАК СчетФактураВыданныйАвансАвансы
		|        ГДЕ
		|            (СчетФактураВыданныйАвансАвансы.Ссылка.ДокументОснование, СчетФактураВыданныйАвансАвансы.Ссылка.Контрагент) В
		|                    (ВЫБРАТЬ
		|                        ВТРез.Документ,
		|                        ВТРез.Контрагент
		|                    ИЗ
		|                        ВТРез КАК ВТРез)
		|            И СчетФактураВыданныйАвансАвансы.Ссылка.Проведен
		|        
		|        СГРУППИРОВАТЬ ПО
		|            СчетФактураВыданныйАвансАвансы.Ссылка,
		|            СчетФактураВыданныйАвансАвансы.Ссылка.ДокументОснование,
		|            СчетФактураВыданныйАвансАвансы.Ссылка.Контрагент,
		|            СчетФактураВыданныйАвансАвансы.СтавкаНДС.ПеречислениеСтавкаНДС) КАК ВложенныйЗапрос
		|        ПО (ВТРез.Контрагент = ВложенныйЗапрос.Контрагент
		|                И ВТРез.Документ = ВложенныйЗапрос.ДокументОснование)";
		Запрос.УстановитьПараметр("Результат", Результат);
		ТаблицаДопДанных = Запрос.Выполнить().Выгрузить();
	ИначеЕсли СсылкаНаОбъект.КодБыстрогоВыбора = "1903" ИЛИ СсылкаНаОбъект.КодБыстрогоВыбора = "1904" Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Результат.Субконто1 КАК Контрагент,
		|	Результат.Субконто2 КАК Документ
		|ПОМЕСТИТЬ ВТРез
		|ИЗ
		|	&Результат КАК Результат
		|;   
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТРез.Контрагент КАК КонтрагентНеВыгружать,
		|	ВТРез.Документ КАК ДокументНеВыгружать,
		|	ЕСТЬNULL(ВложенныйЗапрос.Ссылка.Номер, """") КАК НомерСФ,
		|	ЕСТЬNULL(ВложенныйЗапрос.Ссылка.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаСФ,
		|	ЕСТЬNULL(ВложенныйЗапрос.Сумма, 0) - ЕСТЬNULL(ВложенныйЗапрос.СуммаНДС, 0) КАК СуммаБезНДС,
		|	ЕСТЬNULL(ВложенныйЗапрос.Сумма, 0) КАК Сумма,
		|	ЕСТЬNULL(ВложенныйЗапрос.СуммаНДС, 0) КАК НДС,
		|	ЕСТЬNULL(ВложенныйЗапрос.СтавкаНДСПеречислениеСтавкаНДС, ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)) КАК СтавкаНДС
		|ИЗ
		|	ВТРез КАК ВТРез
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СчетФактураВыданныйАвансАвансы.Ссылка КАК Ссылка,
		|			СчетФактураВыданныйАвансАвансы.Ссылка.ДокументОснование КАК ДокументОснование,
		|			СчетФактураВыданныйАвансАвансы.Ссылка.Контрагент КАК Контрагент,
		|			СУММА(СчетФактураВыданныйАвансАвансы.Сумма) КАК Сумма,
		|			СУММА(СчетФактураВыданныйАвансАвансы.СуммаНДС) КАК СуммаНДС,
		|			СчетФактураВыданныйАвансАвансы.СтавкаНДС.ПеречислениеСтавкаНДС КАК СтавкаНДСПеречислениеСтавкаНДС
		|		ИЗ
		|			Документ.СчетФактураВыданныйАванс.Авансы КАК СчетФактураВыданныйАвансАвансы
		|		ГДЕ
		|			СчетФактураВыданныйАвансАвансы.Ссылка.ДокументОснование В
		|					(ВЫБРАТЬ
		|						ВТРез.Документ
		|					ИЗ
		|						ВТРез КАК ВТРез)
		|			И СчетФактураВыданныйАвансАвансы.Ссылка.Проведен
		|		
		|		СГРУППИРОВАТЬ ПО
		|			СчетФактураВыданныйАвансАвансы.Ссылка,
		|			СчетФактураВыданныйАвансАвансы.Ссылка.ДокументОснование,
		|			СчетФактураВыданныйАвансАвансы.Ссылка.Контрагент,
		|			СчетФактураВыданныйАвансАвансы.СтавкаНДС.ПеречислениеСтавкаНДС
		|			
		|		ОБЪЕДИНИТЬ ВСЕ  
		|		
		|		ВЫБРАТЬ
		|			СчетФактураВыданныйДокументыОснования.Ссылка,
		|			СчетФактураВыданныйДокументыОснования.Ссылка.ДокументОснование,
		|			СчетФактураВыданныйДокументыОснования.Ссылка.Контрагент,
		|			0,
		|			0,
		|			""""
		|		ИЗ
		|			Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
		|		ГДЕ
		|			СчетФактураВыданныйДокументыОснования.ДокументОснование В
		|					(ВЫБРАТЬ
		|						ВТРез.Документ
		|					ИЗ
		|						ВТРез КАК ВТРез)
		|			И СчетФактураВыданныйДокументыОснования.Ссылка.Проведен
		|		
		|		СГРУППИРОВАТЬ ПО
		|			СчетФактураВыданныйДокументыОснования.Ссылка,
		|			СчетФактураВыданныйДокументыОснования.ДокументОснование,
		|			СчетФактураВыданныйДокументыОснования.Ссылка.Контрагент
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			СчетФактураПолученныйДокументыОснования.Ссылка,
		|			СчетФактураПолученныйДокументыОснования.ДокументОснование,
		|			СчетФактураПолученныйДокументыОснования.Ссылка.Контрагент,
		|			СУММА(СчетФактураПолученныйДокументыОснования.Сумма),
		|			СУММА(СчетФактураПолученныйДокументыОснования.СуммаНДС),
		|			СчетФактураПолученныйДокументыОснования.СтавкаНДС.ПеречислениеСтавкаНДС
		|		ИЗ
		|			Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
		|		ГДЕ
		|			СчетФактураПолученныйДокументыОснования.ДокументОснование В
		|					(ВЫБРАТЬ
		|						ВТРез.Документ
		|					ИЗ
		|						ВТРез КАК ВТРез)
		|			И СчетФактураПолученныйДокументыОснования.Ссылка.Проведен
		|		
		|		СГРУППИРОВАТЬ ПО
		|			СчетФактураПолученныйДокументыОснования.Ссылка,
		|			СчетФактураПолученныйДокументыОснования.ДокументОснование,
		|			СчетФактураПолученныйДокументыОснования.Ссылка.Контрагент,
		|			СчетФактураПолученныйДокументыОснования.СтавкаНДС.ПеречислениеСтавкаНДС) КАК ВложенныйЗапрос
		|		ПО
		|			ВТРез.Документ = ВложенныйЗапрос.ДокументОснование
		|";
		
		Запрос.УстановитьПараметр("Результат", Результат);
		ТаблицаДопДанных = Запрос.Выполнить().Выгрузить();
	ИначеЕсли СсылкаНаОбъект.КодБыстрогоВыбора = "0101" Тогда //Основные средства 
		МассивОбъектовЭксплуатации = Результат.ВыгрузитьКолонку("Субконто1");  		
		ТаблицаДопДанных = ПолучитьДокументыПринятияКУчетуКСчету0101(МассивОбъектовЭксплуатации, Новый Граница(Дата(2020, 12, 31, 23, 59, 59), ВидГраницы.Включая));	
	ИначеЕсли СсылкаНаОбъект.КодБыстрогоВыбора = "70" Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|    Результат.Субконто1 КАК ФизическоеЛицо,
		|    Результат.Организация КАК Организация
		|ПОМЕСТИТЬ ВТРез
		|ИЗ
		|    &Результат КАК Результат
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|    ВТРез.ФизическоеЛицо КАК ФизическоеЛицо,
		|    ВТРез.Организация КАК Организация,
		|    Сотрудники.Ссылка КАК Сотрудник
		|ИЗ
		|    ВТРез КАК ВТРез
		|    	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|    	ПО (ВТРез.ФизическоеЛицо = Сотрудники.ФизическоеЛицо)";
		
		Запрос.УстановитьПараметр("Результат", Результат);
		ТаблицаДопДанных = Запрос.Выполнить().Выгрузить();
		
	ИначеЕсли СсылкаНаОбъект.КодБыстрогоВыбора = "4101" Тогда	
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|    Результат.Субконто1 КАК Субконто1,
		|    Результат.Субконто2 КАК Субконто2,
		|    Результат.Организация КАК Организация,
		|    Результат.Подразделение КАК Подразделение,
		|    Результат.СуммаОстаток КАК СуммаОстаток,
		|    Результат.КоличествоОстаток КАК КоличествоОстаток
		|ПОМЕСТИТЬ ВТРез
		|ИЗ
		|    &Результат КАК Результат
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|    ВТРез.Субконто1 КАК Субконто1,
		|    ВТРез.Субконто2 КАК Субконто2,
		|    ВТРез.Организация КАК Организация,
		|    ВТРез.Подразделение КАК Подразделение,
		|    ВТРез.СуммаОстаток КАК СуммаОстаток,
		|    ВТРез.КоличествоОстаток КАК КоличествоОстаток,
		|    СебестоимостьТоваровОстатки.Партия КАК Партия,
		|    СебестоимостьТоваровОстатки.Партия.Договор КАК Договор,
		|    ВЫБОР
		|        КОГДА ЕСТЬNULL(СебестоимостьТоваровОстатки.Партия, НЕОПРЕДЕЛЕНО) <> НЕОПРЕДЕЛЕНО
		|            ТОГДА ВЫБОР
		|                    КОГДА СебестоимостьТоваровОстатки.Партия ССЫЛКА Документ.ПередачаТоваровМеждуОрганизациями
		|                        ТОГДА СебестоимостьТоваровОстатки.Партия.Организация
		|                    ИНАЧЕ СебестоимостьТоваровОстатки.Партия.Контрагент
		|                КОНЕЦ
		|        ИНАЧЕ НЕОПРЕДЕЛЕНО
		|    КОНЕЦ КАК Контрагент,
		|    СебестоимостьТоваровОстатки.КоличествоОстаток КАК ОстатокПартии,
		|    СебестоимостьТоваровОстатки.СтоимостьРеглОстаток КАК СтоимостьРегл,
		|    Выбор Когда  ЕСТЬNULL(СебестоимостьТоваровОстатки.Партия, НЕОПРЕДЕЛЕНО) <> НЕОПРЕДЕЛЕНО И  СебестоимостьТоваровОстатки.Партия.Дата < ДатаВремя(2019,01,01,0,0,0) Тогда
		|         Выразить(ЕстьNull(СебестоимостьТоваровОстатки.СтоимостьРеглОстаток, 0)/118 * 18 КАК Число (15,2))
		|    Иначе
		|         Выразить(ЕстьNull(СебестоимостьТоваровОстатки.СтоимостьРеглОстаток, 0)/120 * 20 КАК Число (15,2))
		|    Конец  КАК НДС
		|ИЗ
		|    ВТРез КАК ВТРез
		|        ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СебестоимостьТоваров.Остатки(&Дата, Организация В (&Организации)) КАК СебестоимостьТоваровОстатки
		|        ПО (ВТРез.Субконто1 = СебестоимостьТоваровОстатки.АналитикаУчетаНоменклатуры.Номенклатура)
		|            И (ВТРез.Субконто2 = СебестоимостьТоваровОстатки.АналитикаУчетаНоменклатуры.МестоХранения)
		|            И СебестоимостьТоваровОстатки.КоличествоОстаток >=0";		
		
		Запрос.УстановитьПараметр("Результат", Результат);
		Запрос.УстановитьПараметр("Дата", Новый Граница(Дата(2020, 12, 31, 23, 59, 59), ВидГраницы.Включая));		
		Запрос.УстановитьПараметр("Организации", Справочники.Организации.НайтиПоНаименованию("ИП Орлова О. Н.", Истина));
		ТаблицаДопДанных = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции	

#КонецОбласти