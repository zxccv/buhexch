//************************************************
//Общие функции
//************************************************    

#Область ОбщиеФункции

Функция ПреобразоватьСтруктуруВHTTPОтвет(структураОтвет)
	
	Ответ = Новый HTTPСервисОтвет(200);
	
	Ответ.Заголовки.Вставить("Accept-Language", "ru");
    Ответ.Заголовки.Вставить("Accept-Charset","utf-8");
    Ответ.Заголовки.Вставить("Content-Language", "ru");
    Ответ.Заголовки.Вставить("Content-Charset", "utf-8");
    Ответ.Заголовки.Вставить("Content-type", "application/json; charset=utf-8");

		
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
		
	ЗаписатьJSON(ЗаписьJSON,структураОтвет);
	
	Ответ.УстановитьТелоИзСтроки(ЗаписьJSON.Закрыть(),КодировкаТекста.UTF8);
	
	Возврат Ответ;
	
КонецФункции

Функция ПолучитьТелоЗапросаКакСтруктуру(Запрос);
	
	Попытка
		ТелоЗапроса = Запрос.ПолучитьТелоКакСтроку();
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ТелоЗапроса);
		
		ИменаСвойствСоЗначениямиДата = ПолучитьИменаСвойствСоЗначениямиДата();
		
		//структураЗапрос = ПрочитатьJSON(ЧтениеJSON,,"Дата,ДатаВходящегоДокумента,ДатаСФ,ДатаРождения,ДатаРегистрации,СвидетельствоДатаВыдачи");
		структураЗапрос = ПрочитатьJSON(ЧтениеJSON,,ИменаСвойствСоЗначениямиДата);
		
		Возврат структураЗапрос;
		
	Исключение
		
		Возврат Неопределено;
		                        
	КонецПопытки;
	
КонецФункции

Функция ПолучитьИменаСвойствСоЗначениямиДата()
	
	МассивДаты = Новый Массив;
	МассивДаты.Добавить("Дата");
	МассивДаты.Добавить("ДатаВходящегоДокумента");
	МассивДаты.Добавить("ДатаСФ");
	МассивДаты.Добавить("ДатаРождения");
	МассивДаты.Добавить("ДатаРегистрации");
	МассивДаты.Добавить("СвидетельствоДатаВыдачи");
	МассивДаты.Добавить("ДатаПодключения");
	МассивДаты.Добавить("ЛицензияДатаНачала");
	МассивДаты.Добавить("ЛицензияДатаОкончания");
	МассивДаты.Добавить("ЛицензияДатаБлокировки");
	МассивДаты.Добавить("ДатаОткрытия");
	МассивДаты.Добавить("ДатаЗакрытия");
	МассивДаты.Добавить("ДатаВыплаты");
	МассивДаты.Добавить("Период");
	МассивДаты.Добавить("ДатаОплаты");
	МассивДаты.Добавить("ДатаСобытия");
	МассивДаты.Добавить("КорректируемыйПериод");
	МассивДаты.Добавить("ДатаДокументаОплаты");
	МассивДаты.Добавить("ДатаСчетаФактурыКомиссионера");
	МассивДаты.Добавить("ДатаВыставленияПолучения");
	МассивДаты.Добавить("ДатаСчетаФактуры");
	МассивДаты.Добавить("ДатаИсправления");
	МассивДаты.Добавить("ДатаКорректировочногоСчетаФактуры");
	МассивДаты.Добавить("ДатаИсправленияКорректировочногоСчетаФактуры"); 
	МассивДаты.Добавить("ДатаСчетаФактурыПродавца");	
	МассивДаты.Добавить("ДатаПостановкиНаУчет");	
	//МассивДаты.Добавить("");	
	//МассивДаты.Добавить("");	
	//МассивДаты.Добавить("");	
	//МассивДаты.Добавить("");	
	//МассивДаты.Добавить("");	
	//МассивДаты.Добавить("");	
	//МассивДаты.Добавить("");	
	//МассивДаты.Добавить("");	
	//МассивДаты.Добавить("");	
	
	Возврат СтрСоединить(МассивДаты,",");
		
КонецФункции	

Процедура ПроверитьЗаполненностьОбязательныхПараметров(структураЗапрос, структураОбязательныхПараметров, ОписаниеОшибок, ПутьКЗначениям = "")
	
	Для Каждого ОбязательныйПараметр Из структураОбязательныхПараметров Цикл
		
		Если НЕ структураЗапрос.Свойство(ОбязательныйПараметр.Ключ) Тогда
			Если ОписаниеОшибок <> "" Тогда
				ОписаниеОшибок = ОписаниеОшибок + Символы.ПС;
			КонецЕсли;
			ОписаниеОшибок = ОписаниеОшибок + ПутьКЗначениям + "Отсутствует обязательный параметр " + ОбязательныйПараметр.Ключ;
			Продолжить;
		КонецЕсли;
		
		ПроверяемоеЗначение = структураЗапрос[ОбязательныйПараметр.Ключ];
		
		Если Тип(ОбязательныйПараметр.Значение) = Тип("Структура") Тогда
			
			Если ТипЗнч(ПроверяемоеЗначение) = Тип("Массив") Тогда
				
				Для Н = 0 По ПроверяемоеЗначение.Количество() - 1 Цикл
					
					ПроверитьЗаполненностьОбязательныхПараметров(ПроверяемоеЗначение[Н],ОбязательныйПараметр.Значение,ОписаниеОшибок,ПутьКЗначениям + ОбязательныйПараметр.Ключ + "[" + Н + "].");	
					
				КонецЦикла;
				
			ИначеЕсли ТипЗнч(ПроверяемоеЗначение) = Тип("Структура") Тогда
				
				ПроверитьЗаполненностьОбязательныхПараметров(ПроверяемоеЗначение,ОбязательныйПараметр.Значение,ОписаниеОшибок,ПутьКЗначениям + ОбязательныйПараметр.Ключ + ".");
				
			Иначе
				Если ОписаниеОшибок <> "" Тогда
					ОписаниеОшибок = ОписаниеОшибок + Символы.ПС;
				КонецЕсли;
				ОписаниеОшибок = ОписаниеОшибок + ПутьКЗначениям + "Неправильный тип значения обязательного параметра " + ОбязательныйПараметр.Ключ + ", в этом параметре должен быть массив или структура";
				Продолжить;
			КонецЕсли;
			
		Иначе
								
			Если ТипЗнч(ПроверяемоеЗначение) = Тип("Массив") Тогда
				
				Для Каждого ПроверяемыйЭлемент Из ПроверяемоеЗначение Цикл
					
					Если ТипЗнч(ПроверяемыйЭлемент) <> Тип(ОбязательныйПараметр.Значение) Тогда
				
						Если ОписаниеОшибок <> "" Тогда
							ОписаниеОшибок = ОписаниеОшибок + Символы.ПС;
						КонецЕсли;
						ОписаниеОшибок = ОписаниеОшибок + ПутьКЗначениям + "Неправильный тип значения обязательного параметра " + ОбязательныйПараметр.Ключ + ", должно быть значение типа " + ОбязательныйПараметр.Значение;
						Прервать;
				
					КонецЕсли;	
					
				КонецЦикла;
				
			ИначеЕсли Тип(ОбязательныйПараметр.Значение) = Тип("УникальныйИдентификатор") Тогда
				
				Попытка
					УИД = Новый УникальныйИдентификатор(ПроверяемоеЗначение);
				Исключение
					Если ОписаниеОшибок <> "" Тогда
						ОписаниеОшибок = ОписаниеОшибок + Символы.ПС;
					КонецЕсли;
					ОписаниеОшибок = ОписаниеОшибок + ПутьКЗначениям + "Неправильный тип значения обязательного параметра " + ОбязательныйПараметр.Ключ + ", должно быть значение типа УникальныйИдентификатор";
					Продолжить;		
				КонецПопытки;
				
			ИначеЕсли ТипЗнч(ПроверяемоеЗначение) <> Тип(ОбязательныйПараметр.Значение) Тогда
				
				Если ОписаниеОшибок <> "" Тогда
					ОписаниеОшибок = ОписаниеОшибок + Символы.ПС;
				КонецЕсли;
				ОписаниеОшибок = ОписаниеОшибок + ПутьКЗначениям + "Неправильный тип значения обязательного параметра " + ОбязательныйПараметр.Ключ + ", должно быть значение типа " + ОбязательныйПараметр.Значение;
				Продолжить;	
				
			КонецЕсли;
						
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьВнешнююНастройку(НаименованиеНастройки,ЭтоТЗ = Истина, ОднаСтрокаВернутьСтруктуру = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Настройка = ХранилищеОбщихНастроек.Загрузить("НастройкиЭксклюзив",НаименованиеНастройки,,"НастройкиЭксклюзив");
		
	Если НЕ ЭтоТЗ Тогда
		Если Настройка <> Неопределено Тогда
			Возврат Настройка;
		Иначе
			ВызватьИсключение "Настройка " + НаименованиеНастройки + " не найдена";
		КонецЕсли;
	КонецЕсли;
		      	
	Если ТипЗнч(Настройка) = Тип("ТаблицаЗначений") И Настройка.Количество() > 0 Тогда		
		
		Если ОднаСтрокаВернутьСтруктуру Тогда
			структураНастройка = Новый Структура;
			Для Каждого Колонка Из Настройка.Колонки Цикл
				структураНастройка.Вставить(Колонка.Имя,Настройка[0][Колонка.Имя]);				
			КонецЦикла;
			Возврат структураНастройка;
		Иначе
			Возврат Настройка;
		КонецЕсли;
				
	Иначе
		ВызватьИсключение "Настройка " + НаименованиеНастройки + " не найдена";
	КонецЕсли;
	
КонецФункции

Процедура УстановитьЗначениеДопСведенияОбъекта(Объект, НаименованиеДопСведения, Значение = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Объект = Объект;
	МенеджерЗаписи.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Заголовок", НаименованиеДопСведения);
	Если Значение <> Неопределено Тогда
		МенеджерЗаписи.Значение = Значение;
		МенеджерЗаписи.Записать();
	Иначе
		МенеджерЗаписи.Удалить();
	КонецЕсли;

	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ПолучитьЗначениеДопСведенияОбъекта(Объект, НаименованиеДопСведения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Объект);
	НаборЗаписей.Отбор.Свойство.Установить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Заголовок", НаименованиеДопСведения));
	НаборЗаписей.Прочитать();
	ВозвращаемоеЗначение = Неопределено;
	
	Если НаборЗаписей.Количество() И ЗначениеЗаполнено(НаборЗаписей[0].Значение) Тогда
		ВозвращаемоеЗначение = НаборЗаписей[0].Значение;	
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

//!! не нужно
Функция ПолучитьЗначениеДопРеквизитаОбъекта(Объект,НаименованиеРеквизита) Экспорт 
	
	Для Каждого ДопРеквизит Из Объект.ДополнительныеРеквизиты Цикл
		
		Если ДопРеквизит.Свойство.Заголовок <> НаименованиеРеквизита Тогда Продолжить; КонецЕсли;
			
		Если ДопРеквизит.Свойство.ТипЗначения.СодержитТип(Тип("Строка")) 
			И ЗначениеЗаполнено(ДопРеквизит.ТекстоваяСтрока) Тогда
			Возврат ДопРеквизит.ТекстоваяСтрока;
		Иначе
			Возврат ДопРеквизит.Значение;
		КонецЕсли;

	КонецЦикла;	
		
	Возврат Неопределено;
	
КонецФункции

//!!
Функция ДокументЗапрещеноИзменять(Документ)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДополнительныеСведения.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	ДополнительныеСведения.Объект = &Объект
	|	И ДополнительныеСведения.Свойство = &Свойство";
	
	Запрос.УстановитьПараметр("Объект",Документ);
	Запрос.УстановитьПараметр("Свойство",ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя","НеЗагружатьИзмененияИзУТ"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() И Выборка.Значение = Истина Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция НайтиОбъектПоИдентификаторуНов(УИД, ТипОбъекта = Неопределено, СтруктураОтбор = Неопределено)
	
	Если Не УИДЗаполнен(УИД) Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПубличныеИдентификаторыСинхронизируемыхОбъектов.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.ПубличныеИдентификаторыСинхронизируемыхОбъектов КАК ПубличныеИдентификаторыСинхронизируемыхОбъектов
	|ГДЕ
	|	ПубличныеИдентификаторыСинхронизируемыхОбъектов.Идентификатор = &УИД
	|	И ПубличныеИдентификаторыСинхронизируемыхОбъектов.УзелИнформационнойБазы = НЕОПРЕДЕЛЕНО";
	
	Запрос.УстановитьПараметр("УИД", Лев(УИД, 36));
	                                    	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
			
	Если ТипОбъекта = Неопределено 
		И СтруктураОтбор = Неопределено Тогда
		
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			Возврат Выборка.Ссылка;
		Иначе 
			ВызватьИсключение "Найдено больше одного объекта с идентификатором " + УИД;
		КонецЕсли;
		
	Иначе
		
		ПодходящиеОбъекты = Новый Массив;
		
		Пока Выборка.Следующий() Цикл
			
			Если ТипОбъекта <> Неопределено 
				И ТипЗнч(Выборка.Ссылка) <> ТипОбъекта Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтруктураОтбор <> Неопределено Тогда
				
				НеПодходит = Ложь;
				
				Для Каждого ЭлементОтбора Из СтруктураОтбор Цикл
					
					Если Выборка.Ссылка[ЭлементОтбора.Ключ] <> ЭлементОтбора.Значение Тогда
						НеПодходит = Истина;
						Прервать;
					КонецЕсли;
					
				КонецЦикла;   
				
				Если НеПодходит Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			ПодходящиеОбъекты.Добавить(Выборка.Ссылка);
			
		КонецЦикла;      
		
		Если ПодходящиеОбъекты.Количество() = 1 Тогда
			Возврат ПодходящиеОбъекты[0];
		ИначеЕсли ПодходящиеОбъекты.Количество() = 0 Тогда
			Возврат Неопределено;
		Иначе
			ВызватьИсключение "Найдено больше одного объекта с идентификатором " + УИД;
		КонецЕсли;  	
		
	КонецЕсли;
	
	//Если Результат.Количество() Тогда
	//	Если ВернутьПервыйЭлемент Тогда 
	//		Возврат Результат[0].Ссылка;
	//	Иначе
	//		Возврат Результат;	
	//	КонецЕсли;
	//Иначе
	//	Возврат Неопределено;
	//КонецЕсли;
	
КонецФункции  

Процедура ЗаполнитьРеквизитПоДаннымERP(Объект,ИмяРеквизита,ОбъектERP,ИмяРеквизитаERP,ТипРеквизита = Неопределено,ЗапрашиваемыеОбъекты = Неопределено)

	Если ТипЗнч(Объект[ИмяРеквизита]) = Тип("ПланСчетовСсылка.Хозрасчетный") Тогда
		Если ЗначениеЗаполнено(ОбъектERP[ИмяРеквизитаERP]) Тогда
			Объект[ИмяРеквизита] = ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора", ОбъектERP[ИмяРеквизитаERP]);	
		Иначе 
			Объект[ИмяРеквизита] = ПланыСчетов.Хозрасчетный.ПустаяСсылка();	
		КонецЕсли;
		Возврат;
	КонецЕсли;
		
	
	Если УИДЗаполнен(ОбъектERP[ИмяРеквизитаERP]) Тогда 
		Значение = НайтиОбъектПоИдентификаторуНов(ОбъектERP[ИмяРеквизитаERP],ТипРеквизита);
	
		Если Значение <> Неопределено Тогда
			Объект[ИмяРеквизита] = Значение;
		Иначе
			Объект[ИмяРеквизита] = Неопределено;
			Если ЗапрашиваемыеОбъекты <> Неопределено Тогда
				Если ОбъектERP.Свойство("УИД") Тогда
					УИДВладельца = ОбъектERP.УИД;
				Иначе
					УИДВладельца = "";
				КонецЕсли;
				СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", УИДВладельца, ОбъектERP[ИмяРеквизитаERP], ИмяРеквизитаERP, XmlТипЗнч(Объект[ИмяРеквизита]).ИмяТипа);
				ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Объект[ИмяРеквизита] = Неопределено;
	КонецЕсли;
		
	
КонецПроцедуры

Процедура ЗаписатьИдентификаторВРегистр(Ссылка, УИД)
	
	мзИдентификаторы = РегистрыСведений.ПубличныеИдентификаторыСинхронизируемыхОбъектов.СоздатьМенеджерЗаписи();
	мзИдентификаторы.Идентификатор = Лев(УИД, 36);
	мзИдентификаторы.Ссылка = Ссылка;
	мзИдентификаторы.УзелИнформационнойБазы = Неопределено;
	мзИдентификаторы.Записать();
	
КонецПроцедуры   

Функция УИДЗаполнен(УИДСтрока)
	
	Если УИДСтрока = "" ИЛИ Лев(УИДСтрока, 36) = "00000000-0000-0000-0000-000000000000" Тогда
		Возврат Ложь;
	Иначе            
		Возврат Истина;
	КонецЕсли;	
	
КонецФункции	

Процедура ЗаполнитьНомерГТД(Нстр, структураГТД, ЗапрашиваемыеОбъекты, УИДВладельца)
	
	Если структураГТД.Код = "" ИЛИ СтрНайти(структураГТД.Код, "-") > 0 ИЛИ СтрНайти(структураГТД.Код, "_") > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Страна = Неопределено;
	Если УИДЗаполнен(структураГТД.СтранаПроисхождения) Тогда
		Страна = НайтиОбъектПоИдентификаторуНов(структураГТД.СтранаПроисхождения);
		Если Страна = Неопределено Тогда
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", УИДВладельца, структураГТД.СтранаПроисхождения, "СтранаПроисхождения", XmlТипЗнч(Нстр.СтранаПроисхождения).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);
		КонецЕсли;	
	КонецЕсли;	
	
	Нстр.СтранаПроисхождения = Страна;
	
	НомерГТД = Справочники.НомераГТД.НайтиПоКоду(СокрЛП(структураГТД.Код));
	Если Не ЗначениеЗаполнено(НомерГТД) Тогда
		НомерГТДОбъект = Справочники.НомераГТД.СоздатьЭлемент();		
		ЗаполнитьЗначенияСвойств(НомерГТДОбъект, структураГТД);
		НомерГТДОбъект.Код = СокрЛП(структураГТД.Код); 
		НомерГТДОбъект.Записать();
		НомерГТД = НомерГТДОбъект.Ссылка;
	Иначе                                           
		Если НомерГТД.ПометкаУдаления <> структураГТД.ПометкаУдаления ИЛИ НомерГТД.СтранаВвозаНеРФ <> структураГТД.СтранаВвозаНеРФ Тогда
			НомерГТДОбъект = НомерГТД.ПолучитьОбъект();
			ЗаполнитьЗначенияСвойств(НомерГТДОбъект, структураГТД, "ПометкаУдаления, СтранаВвозаНеРФ");
			НомерГТДОбъект.Записать();
		КонецЕсли;	
	КонецЕсли;	
	
	Нстр.НомерГТД = НомерГТД;
	
КонецПроцедуры

Функция ПроверкаГТД(НомерГТД, СтранаПроисхождения)

	//!! исправить проверку
	Если (ТипЗнч(НомерГТД)<>Тип("Строка") ИЛИ СтрНайти(НомерГТД, "-") > 0 ИЛИ СтрНайти(НомерГТД, "_") > 0)
			И  СтранаПроисхождения = "РОССИЯ" Тогда //!!
		Возврат Ложь;
	КонецЕсли;	
	
	Возврат Истина;
	
КонецФункции  

Функция НайтиСоздатьОсновнойДоговорКонтрагента(Организация, Контрагент, Параметры)
	
	Если Не ЗначениеЗаполнено(Организация) ИЛИ Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Неопределено; // или пустую ссылку?
	КонецЕсли;	
	
	ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов[Параметры.ВидДоговора];
	Валюта = Параметры.Валюта;
	
	//ищем подходящий договор
	ЗапросДоговор = Новый Запрос;
	ЗапросДоговор.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Владелец = &Владелец
		|	И ДоговорыКонтрагентов.Организация = &Организация
		|	И ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &Валюта
		|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора
		|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления"; //!! надо ли проверять на пометку

	ЗапросДоговор.УстановитьПараметр("Владелец", Контрагент);
	ЗапросДоговор.УстановитьПараметр("Организация", Организация);
	ЗапросДоговор.УстановитьПараметр("Валюта", Валюта);
	ЗапросДоговор.УстановитьПараметр("ВидДоговора", ВидДоговора);
	
	Результат = ЗапросДоговор.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Договор = Результат.Выгрузить()[0].Ссылка;         
		
		Если Параметры.ВидДоговора = "СКомиссионером" Тогда
			//!!проверить соответствие параметров комиссии, если отличаются - получить объект и обновить
		КонецЕсли;	
			
		Возврат Договор;
		
	КонецЕсли;	
	
	//если не нашли, создаём новый 
	Договор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
	Договор.Организация = Организация;
	Договор.Владелец = Контрагент;
	Договор.Наименование = "Основной договор";
	Договор.ВалютаВзаиморасчетов = Валюта;
	//Договор.Комментарий = "#Создан автоматически при загрузке документов из ERP";
	Договор.ВидДоговора = ВидДоговора;
	Если Параметры.ВидДоговора = "СКомиссионером" Тогда
		//!!заполнить условия по комиссии
	КонецЕсли;	
	Договор.Записать();
	
	Возврат Договор.Ссылка;
	
КонецФункции	

Функция НайтиСоздатьВидОплаты(ДоговорЭкварийнга)
	
	Если НЕ ЗначениеЗаполнено(ДоговорЭкварийнга) Тогда
		Возврат Неопределено;
	КонецЕсли;	
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|    ВидыОплатОрганизаций.Ссылка КАК Ссылка
		|ИЗ
		|    Справочник.ВидыОплатОрганизаций КАК ВидыОплатОрганизаций
		|ГДЕ
		|    ВидыОплатОрганизаций.Организация = &Организация
		|    И ВидыОплатОрганизаций.Контрагент = &Владелец
		|    И ВидыОплатОрганизаций.ДоговорКонтрагента = &ДоговорЭквайринга
		|    И НЕ ВидыОплатОрганизаций.ПометкаУдаления"; //!? надо ли
	Запрос.УстановитьПараметр("ДоговорЭквайринга", ДоговорЭкварийнга);
	Запрос.УстановитьПараметр("Организация", ДоговорЭкварийнга.Органиация);
	Запрос.УстановитьПараметр("Владелец", ДоговорЭкварийнга.Владалец);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	ВидОплаты = Справочники.ВидыОплатОрганизаций.СоздатьЭлемент();
	ВидОплаты.Организация = ДоговорЭкварийнга.Органиация;
	ВидОплаты.Контрагент = ДоговорЭкварийнга.Владалец;
	ВидОплаты.ДоговорКонтрагента = ДоговорЭкварийнга;
	ВидОплаты.ТипОплаты = Перечисления.ТипыОплат.ПлатежнаяКарта;
	ВидОплаты.СчетУчетаРасчетов = ПланыСчетов.Хозрасчетный.ПродажиПоПлатежнымКартам;
	ВидОплаты.Наименоване = "Оплата картой по договору " + ДоговорЭкварийнга.Наименование;
	
    ВидОплаты.Записать();
	
	Возврат ВидОплаты.Ссылка;
	
КонецФункции	

#КонецОбласти 

#Область ЗагрузкаСправочников  

Функция ПолучитьКодОКОФ(СтркКодОКОФ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ОбщероссийскийКлассификаторОсновныхФондов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ОбщероссийскийКлассификаторОсновныхФондов КАК ОбщероссийскийКлассификаторОсновныхФондов 
	|ГДЕ 
	|	ОбщероссийскийКлассификаторОсновныхФондов.Код ПОДОБНО &КодОКОФ + ""%""
	|"; 
	
	Запрос.УстановитьПараметр("КодОКОФ", СокрЛП(СтркКодОКОФ));
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать(); 
	Если ВыборкаЗапроса.Количество() = 1 Тогда  
		Пока ВыборкаЗапроса.Следующий() Цикл
			Возврат	ВыборкаЗапроса.Ссылка;   
		КонецЦикла;
	Иначе
		Возврат Справочники.ОбщероссийскийКлассификаторОсновныхФондов.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Процедура ЗагрузитьВалюту(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты)
	
	Если Не УИДЗаполнен(структураОбъект.УИД) Тогда
		Возврат;
	КонецЕсли;	                       
	
	ВалютаСсылка = НайтиОбъектПоИдентификаторуНов(структураОбъект.УИД);
	
	Если ВалютаСсылка = Неопределено Тогда
		ВалютаОбъект = Справочники.Валюты.СоздатьЭлемент();
		ВалютаОбъект.УстановитьСсылкуНового(Справочники.Валюты.ПолучитьСсылку());
		ЗаписатьИдентификаторВРегистр(ВалютаОбъект.ПолучитьСсылкуНового(), структураОбъект.УИД);
	Иначе
		Если НЕ структураОбъект.ОбъектИзменен Тогда
			Возврат;
		КонецЕсли;
		ВалютаОбъект = ВалютаСсылка.ПолучитьОбъект();
	КонецЕсли;
		
	ВалютаОбъект.ОбменДанными.Загрузка = Истина;
	
	ЗаполнитьЗначенияСвойств(ВалютаОбъект, структураОбъект, "Код, Наименование, НаименованиеПолное, ПометкаУдаления, ЗагружаетсяИзИнтернета, ПараметрыПрописи");
	ВалютаОбъект.СпособУстановкиКурса = Перечисления.СпособыУстановкиКурсаВалюты[структураОбъект.СпособУстановкиКурса];	
	
	Если структураОбъект.СпособУстановкиКурса = "НаценкаНаКурсДругойВалюты" Тогда
		ВалютаОбъект.Наценка = структураОбъект.Наценка;
		ВалютаОбъект.ОсновнаяВалюта = НайтиОбъектПоИдентификаторуНов(структураОбъект.ОсновнаяВалюта);
		Если Не ЗначениеЗаполнено(ВалютаОбъект.ОсновнаяВалюта) Тогда
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОбъект.УИД, структураОбъект.ОсновнаяВалюта, "ОсновнаяВалюта", XmlТипЗнч(ВалютаОбъект.ОсновнаяВалюта).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);
			//ОписаниеОшибок = ОписаниеОшибок + Символы.ПС + "По УИД " + структураОбъект.ОсновнаяВалюта + " не удалось найти основную валюту для валюты " + ВалютаОбъект.НаименованиеПолное;
		КонецЕсли;	
	ИначеЕсли структураОбъект.СпособУстановкиКурса = "РасчетПоФормуле" Тогда
		ВалютаОбъект.ФормулаРасчетаКурса = структураОбъект.ФормулаРасчетаКурса;	
		ВалютаОбъект.ОсновнаяВалюта = Справочники.Валюты.ПустаяСсылка();
	КонецЕсли;
	
	ВалютаОбъект.Записать();
	
	
	
			
КонецПроцедуры	

Процедура ЗагрузитьОрганизацию(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты)
	
	Если НЕ УИДЗаполнен(структураОбъект.УИД) Тогда
		Возврат;
	КонецЕсли;	                       
	
	ОрганизацияСсылка = НайтиОбъектПоИдентификаторуНов(структураОбъект.УИД,Тип("СправочникСсылка.Организации"));
	
	Если ОрганизацияСсылка = Неопределено Тогда
		ОрганизацияОбъект = Справочники.Организации.СоздатьЭлемент();
		ОрганизацияОбъект.УстановитьСсылкуНового(Справочники.Организации.ПолучитьСсылку());
		ЗаписатьИдентификаторВРегистр(ОрганизацияОбъект.ПолучитьСсылкуНового(), структураОбъект.УИД);
		ОрганизацияОбъект.ГоловнаяОрганизация = ОрганизацияОбъект.ПолучитьСсылкуНового();
		ОрганизацияОбъект.ВариантНаименованияДляПечатныхФорм = структураОбъект.НаименованиеСокращенное;		
	Иначе
		Если НЕ структураОбъект.ОбъектИзменен Тогда
			Возврат;
		КонецЕсли;
		ОрганизацияОбъект = ОрганизацияСсылка.ПолучитьОбъект();
		ОрганизацияОбъект.ГоловнаяОрганизация = ОрганизацияОбъект.Ссылка;
	КонецЕсли;
	
	ОрганизацияОбъект.ОбменДанными.Загрузка = Истина;
	
	ЗаполнитьЗначенияСвойств(ОрганизацияОбъект, структураОбъект, "Наименование, НаименованиеПолное, НаименованиеСокращенное, ПометкаУдаления, 
                                                                 |ИНН, КПП, КодНалоговогоОргана, НаименованиеНалоговогоОргана, ДополнительныйКодФСС, 
																 |ЕстьОбособленныеПодразделения, ФамилияИП, ИмяИП, ОтчествоИП, ДатаРегистрации,
																 |КодНалоговогоОрганаПолучателя, КодОрганаПФР, РегистрационныйНомерПФР, КодОрганаФСГС,
																 |КодПоОКПО, КодПодчиненностиФСС, ИПРегистрационныйНомерПФР, КрупнейшийНалогоплательщик,
																 |РегистрационныйНомерТФОМС, ИПРегистрационныйНомерТФОМС, НаименованиеТерриториальногоОрганаПФР,
																 |НаименованиеТерриториальногоОрганаФСС, РегистрационныйНомерФСС, ИПРегистрационныйНомерФСС,
																 |ОбменКаталогОтправкиДанныхОтчетности, ОбменКаталогПрограммыЭлектроннойПочты,
																 |КодОКОНХ, ОбменКодАбонента, ОГРН, ПрименятьРайонныйКоэффициент, ПрименятьСевернуюНадбавку,
																 |РайонныйКоэффициент, Префикс, СвидетельствоДатаВыдачи, СвидетельствоСерияНомер,
																 |ОбособленноеПодразделение, ЦифровойИндексОбособленногоПодразделения, КодОКВЭД,
																 |НаименованиеОКВЭД, КодОКВЭД2, НаименованиеОКВЭД2, КодОКОПФ, НаименованиеОКОПФ,
	                                                             |РайонныйКоэффициентРФ, КодОКФС, НаименованиеОКФС"); 

			
	Если структураОбъект.Свойство("ГоловнаяОрганизация") И УИДЗаполнен(структураОбъект.ГоловнаяОрганизация) Тогда
		ОрганизацияОбъект.ГоловнаяОрганизация = НайтиОбъектПоИдентификаторуНов(структураОбъект.ГоловнаяОрганизация,Тип("СправочникСсылка.Организации"));
		Если Не ЗначениеЗаполнено(ОрганизацияОбъект.ГоловнаяОрганизация) Тогда		
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОбъект.УИД, структураОбъект.ГоловнаяОрганизация, "ГоловнаяОрганизация", XmlТипЗнч(ОрганизацияОбъект.ГоловнаяОрганизация).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);		
		КонецЕсли;	
	КонецЕсли;
	
	Если УИДЗаполнен(структураОбъект.ИндивидуальныйПредприниматель)Тогда
		ОрганизацияОбъект.ИндивидуальныйПредприниматель = НайтиОбъектПоИдентификаторуНов(структураОбъект.ИндивидуальныйПредприниматель);
		Если Не ЗначениеЗаполнено(ОрганизацияОбъект.ИндивидуальныйПредприниматель) Тогда
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОбъект.УИД, структураОбъект.ИндивидуальныйПредприниматель, "ИндивидуальныйПредприниматель", XmlТипЗнч(ОрганизацияОбъект.ИндивидуальныйПредприниматель).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);		
		КонецЕсли;
	Иначе
		ОрганизацияОбъект.ИндивидуальныйПредприниматель = Справочники.ФизическиеЛица.ПустаяСсылка();
		ОрганизацияОбъект.ФамилияИП = "";
		ОрганизацияОбъект.ИмяИП = "";
		ОрганизацияОбъект.ОтчествоИП = "";
	КонецЕсли;

	Если УИДЗаполнен(структураОбъект.РегистрацияВНалоговомОргане)Тогда
		ОрганизацияОбъект.РегистрацияВНалоговомОргане = НайтиОбъектПоИдентификаторуНов(структураОбъект.РегистрацияВНалоговомОргане);
		Если Не ЗначениеЗаполнено(ОрганизацияОбъект.РегистрацияВНалоговомОргане) Тогда
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОбъект.УИД, структураОбъект.РегистрацияВНалоговомОргане, "РегистрацияВНалоговомОргане", XmlТипЗнч(ОрганизацияОбъект.РегистрацияВНалоговомОргане).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);		
		КонецЕсли;
	Иначе
		ОрганизацияОбъект.РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка();
	КонецЕсли;
	
	Если УИДЗаполнен(структураОбъект.УчетнаяЗаписьОбмена)Тогда
		ОрганизацияОбъект.УчетнаяЗаписьОбмена = НайтиОбъектПоИдентификаторуНов(структураОбъект.УчетнаяЗаписьОбмена);
		Если Не ЗначениеЗаполнено(ОрганизацияОбъект.УчетнаяЗаписьОбмена) Тогда  
			//ОписаниеОшибок = ОписаниеОшибок + Символы.ПС + "По УИД " + структураОбъект.УчетнаяЗаписьОбмена + " не удалось найти учетную запись обмена для организации " + ОрганизацияОбъект.НаименованиеСокращенное;
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОбъект.УИД, структураОбъект.УчетнаяЗаписьОбмена, "УчетнаяЗаписьОбмена", XmlТипЗнч(ОрганизацияОбъект.УчетнаяЗаписьОбмена).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);					
		КонецЕсли;                                                            
	Иначе
		ОрганизацияОбъект.УчетнаяЗаписьОбмена = Справочники.УчетныеЗаписиДокументооборота.ПустаяСсылка();
	КонецЕсли;
	
	ОрганизацияОбъект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо[структураОбъект.ЮридическоеФизическоеЛицо];
	
	//!!добавить загрузку контактных данных
	
	ОрганизацияОбъект.Записать();	
	
КонецПроцедуры

Процедура ЗагрузитьПодразделение(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты)
	
	Если НЕ УИДЗаполнен(структураОбъект.УИД) Тогда
		Возврат;
	КонецЕсли;	                       	
	
	мсвПодразделений = Новый массив;
	//если среди найденных есть подразделение с организацией и объект не изменен, ничего не делаем
	Если УИДЗаполнен(структураОбъект.Организация) Тогда
		Организация = НайтиОбъектПоИдентификаторуНов(структураОбъект.Организация, Тип("СправочникСсылка.Организации"));
		Если Организация = Неопределено Тогда
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника, УИДОрганизации", структураОбъект.УИД, структураОбъект.Организация, "Организация", XmlТипЗнч(Справочники.Организации.ПустаяСсылка()).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);
			Возврат;
		КонецЕсли;
	Иначе
		ОписаниеОшибок.errorCodeObj = 625;		
		ОписаниеОшибок.errorDescriptionObj = "Вместе с подразделением не передана Организация-владелец";
	КонецЕсли;
			
	ПодразделениеСсылка = НайтиОбъектПоИдентификаторуНов(структураОбъект.УИД,Тип("СправочникСсылка.ПодразделенияОрганизаций"),Новый Структура("Владелец",Организация));
	
	Если ПодразделениеСсылка = Неопределено Тогда
		Если НЕ структураОбъект.ЭтоГруппа Тогда
			ПодразделениеОбъект = Справочники.ПодразделенияОрганизаций.СоздатьЭлемент();
		Иначе
			ПодразделениеОбъект = Справочники.ПодразделенияОрганизаций.СоздатьГруппу();
		КонецЕсли;
		ПодразделениеОбъект.УстановитьСсылкуНового(Справочники.ПодразделенияОрганизаций.ПолучитьСсылку());
		ЗаписатьИдентификаторВРегистр(ПодразделениеОбъект.ПолучитьСсылкуНового(), структураОбъект.УИД);
		ПодразделениеОбъект.Владелец = Организация;
	Иначе
		Если НЕ структураОбъект.ОбъектИзменен Тогда
			Возврат;
		КонецЕсли;
		ПодразделениеОбъект = ПодразделениеСсылка.ПолучитьОбъект();		
	КонецЕсли;	
				
	ПодразделениеОбъект.ОбменДанными.Загрузка = Истина;
	
	ЗаполнитьЗначенияСвойств(ПодразделениеОбъект, структураОбъект, "ПометкаУдаления, Наименование");
			
	Если УИДЗаполнен(структураОбъект.Родитель) Тогда
		Родитель = НайтиОбъектПоИдентификаторуНов(структураОбъект.Родитель,Тип("СправочникСсылка.ПодразделенияОрганизаций"),Новый Структура("Владелец",Организация));
		
		Если Родитель <> Неопределено Тогда
			ПодразделениеОбъект.Родитель = Родитель;						
		Иначе     
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника, УИДОрганизации", структураОбъект.УИД, структураОбъект.Родитель, "Родитель", XmlТипЗнч(ПодразделениеОбъект.Родитель).ИмяТипа, структураОбъект.Организация);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);					
		КонецЕсли;
	Иначе
		ПодразделениеОбъект.Родитель = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	КонецЕсли;		 
	
	ПодразделениеОбъект.Записать();
	
	
КонецПроцедуры 

Процедура ЗагрузитьРегистрациюВНалоговомОргане(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты)
	
	Если Не УИДЗаполнен(структураОбъект.УИД) Тогда
		Возврат;
	КонецЕсли;	                       
	
	РегистрацияСсылка = НайтиОбъектПоИдентификаторуНов(структураОбъект.УИД,Тип("СправочникСсылка.РегистрацииВНалоговомОргане"));
	
	Если РегистрацияСсылка = Неопределено Тогда
		РегистрацияОбъект = Справочники.РегистрацииВНалоговомОргане.СоздатьЭлемент();
		РегистрацияОбъект.УстановитьСсылкуНового(Справочники.РегистрацииВНалоговомОргане.ПолучитьСсылку());
		ЗаписатьИдентификаторВРегистр(РегистрацияОбъект.ПолучитьСсылкуНового(), структураОбъект.УИД);			
	Иначе
		Если НЕ структураОбъект.ОбъектИзменен Тогда
			Возврат;
		КонецЕсли;
		РегистрацияОбъект = РегистрацияСсылка.ПолучитьОбъект();
	КонецЕсли;	
			
	РегистрацияОбъект.ОбменДанными.Загрузка = Истина;

	ЗаполнитьЗначенияСвойств(РегистрацияОбъект, структураОбъект, "Код, Наименование, ПометкаУдаления, ДокументПредставителя, КодПоОКАТО, КодПоОКТМО,
																|КПП, КодРегиона, НаименованиеИФНС, НаименованиеОбособленногоПодразделения,
																|УполномоченноеЛицоПредставителя");
	//не используются
	//РегистрацияОбъект.Доверенность
	//РегистрацияОбъект.Представитель
	
	//РегистрацияОбъект.ДатаПостановкиНаУчет - можно брать в erp по истории изменений
	//РегистрацияОбъект.НаименованиеСлужебное - по умолчанию формируется как полное наименование организации владельца
	
	РегистрацияОбъект.Владелец = НайтиОбъектПоИдентификаторуНов(структураОбъект.Владелец,Тип("Справочники.Организации"));
	Если РегистрацияОбъект.Владелец = Неопределено Тогда			
		СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОбъект.УИД, структураОбъект.Владелец, "Владелец", XmlТипЗнч(РегистрацияОбъект.Владелец).ИмяТипа);
		ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);							
	КонецЕсли;	
	
	РегистрацияОбъект.Записать();	
		
КонецПроцедуры	

Процедура ЗагрузитьУчетнуюЗаписьДокументооборота(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты)

	Если Не УИДЗаполнен(структураОбъект.УИД) Тогда
		Возврат;
	КонецЕсли;	                       
	
	УчетнаяЗаписьСсылка = НайтиОбъектПоИдентификаторуНов(структураОбъект.УИД,Тип("СправочникСсылка.УчетныеЗаписиДокументооборота"));
	
	Если УчетнаяЗаписьСсылка = Неопределено Тогда
		УчетнаяЗаписьОбъект = Справочники.УчетныеЗаписиДокументооборота.СоздатьЭлемент();
		УчетнаяЗаписьОбъект.УстановитьСсылкуНового(Справочники.УчетныеЗаписиДокументооборота.ПолучитьСсылку());
		ЗаписатьИдентификаторВРегистр(УчетнаяЗаписьОбъект.ПолучитьСсылкуНового(), структураОбъект.УИД);			
	Иначе
		Если НЕ структураОбъект.ОбъектИзменен Тогда
			Возврат;
		КонецЕсли;
		УчетнаяЗаписьОбъект = УчетнаяЗаписьСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	УчетнаяЗаписьОбъект.ОбменДанными.Загрузка = Истина;
	
	ЗаполнитьЗначенияСвойств(УчетнаяЗаписьОбъект, структураОбъект, "Наименование, ПометкаУдаления, АдресЭлектроннойПочты, ДатаПодключения,
																|ИдентификаторАбонента, ИдентификаторДокументооборота, ИдентификаторСистемыОтправителяПФР,
																|ИдентификаторСистемыОтправителяФСГС, ИдентификаторСпецоператора, ИмяПользователяPOP3,
																|ИмяПользователяSMTP, ИННУполномоченногоПредставителя, ИспользоватьСервисОнлайнПроверкиОтчетов,
	                                                            |ИспользуютсяСъемныеКлючевыеНосители, КППУполномоченногоПредставителя, 
																|ЛицензияДатаНачала, ЛицензияДатаОкончания, ЛицензияНаименование,
																|ЛицензияТребуетсяНапоминаниеОбОкончанииСрокаДействия,
																|ЕстьОшибкиСменыМоделиХраненияКлючей, НеФормироватьПодтвержденияАвтоматически, 
																|ОбменНапрямую, ОтключитьАвтообмен, ПарольPOP3, ПарольSMTP, 
																|ПолноеНаименованиеУполномоченногоПредставителя, ПортPOP3, ПортSMTP, 
																|ПредназначенаДляДокументооборотаСПФР, ПредназначенаДляДокументооборотаСФНС,
																|ПредназначенаДляДокументооборотаСФСГС, 
																|СерверPOP3, СерверSMTP,  
																|СертификатГлавногоБухгалтера, СертификатДляШифрования, СертификатРуководителя,
																|ТелефонМобильныйДляАвторизации, ТребуетсяSMTPАутентификация,
																|ЭлектроннаяПодписьВМоделиСервиса, ЯвляетсяУчетнойЗаписьюУполномоченногоПредставителя,
																|ОператорРегНомерПФР, ЛицензияДатаБлокировки, ОператорНаименованиеПолное, 
																|ОператорНаименованиеКраткое, ОператорИНН, ОператорКПП");

	Если УИДЗаполнен(структураОбъект.НалоговыйОрган) Тогда
		НалоговыйОрган = НайтиОбъектПоИдентификаторуНов(структураОбъект.НалоговыйОрган);
		Если НалоговыйОрган <> Неопределено Тогда                  
			УчетнаяЗаписьОбъект.НалоговыйОрган = НалоговыйОрган;
		Иначе
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОбъект.УИД, структураОбъект.НалоговыйОрган, "НалоговыйОрган", XmlТипЗнч(УчетнаяЗаписьОбъект.НалоговыйОрган).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);					
		КонецЕсли;
	КонецЕсли;		
	
	Если УИДЗаполнен(структураОбъект.СерверДокументооборота) Тогда
		СерверДокументооборота = НайтиОбъектПоИдентификаторуНов(структураОбъект.СерверДокументооборота);
		Если СерверДокументооборота <> Неопределено Тогда
			УчетнаяЗаписьОбъект.СерверДокументооборота = СерверДокументооборота;
		Иначе
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОбъект.УИД, структураОбъект.СерверДокументооборота, "СерверДокументооборота", XmlТипЗнч(УчетнаяЗаписьОбъект.СерверДокументооборота).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);					
		КонецЕсли;
	КонецЕсли;	
	
    УчетнаяЗаписьОбъект.РежимАвтонастройки = Перечисления.РежимыАвтонастройкиУчетнойЗаписиНалогоплательщика[структураОбъект.РежимАвтонастройки];		
    УчетнаяЗаписьОбъект.СпецоператорСвязи = Перечисления.СпецоператорыСвязи[структураОбъект.СпецоператорСвязи]; 
    УчетнаяЗаписьОбъект.СтатусУчетнойЗаписи = Перечисления.СтатусыУчетнойЗаписиДокументооборота[структураОбъект.СтатусУчетнойЗаписи]; 
	УчетнаяЗаписьОбъект.МодельХраненияЗакрытогоКлюча = Перечисления.МодельХраненияЗакрытогоКлюча[структураОбъект.МодельХраненияЗакрытогоКлюча]; 	
	
	УчетнаяЗаписьОбъект.СертификатыЛичные.Очистить();
	УчетнаяЗаписьОбъект.СертификатыПрочие.Очистить();
	УчетнаяЗаписьОбъект.СертификатыПФР.Очистить();
	
	Для Каждого Стр из структураОбъект.СертификатыЛичные Цикл
		Нстр = УчетнаяЗаписьОбъект.СертификатыЛичные.Добавить();
		ЗаполнитьЗначенияСвойств(НСтр, Стр,,"Содержимое, Криптопровайдер");
		ДД = Base64Значение(Стр.Содержимое);
		ХЗ = Новый ХранилищеЗначения(ДД);
		Нстр.Содержимое = ХЗ;                                         
		Нстр.Криптопровайдер = Перечисления.ТипыКриптоПровайдеров[Стр.Криптопровайдер];
	КонецЦикла;
	
	Для Каждого Стр Из структураОбъект.СертификатыПрочие Цикл
		Нстр = УчетнаяЗаписьОбъект.СертификатыПрочие.Добавить();
		ЗаполнитьЗначенияСвойств(НСтр, Стр,,"Содержимое");
		ДД = Base64Значение(Стр.Содержимое);
		ХЗ = Новый ХранилищеЗначения(ДД);
		Нстр.Содержимое = ХЗ;
	КонецЦикла;		
	
	Для Каждого Стр Из структураОбъект.СертификатыПФР Цикл
		Нстр = УчетнаяЗаписьОбъект.СертификатыПФР.Добавить();
		Нстр.Сертификат = Стр.Сертификат;	
	КонецЦикла;	
	
	УчетнаяЗаписьОбъект.Записать();
		    
КонецПроцедуры	

Процедура ЗагрузитьСерверДокументооборота(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты)
	
	Если Не УИДЗаполнен(структураОбъект.УИД) Тогда
		Возврат;
	КонецЕсли;	                       
	
	СерверДокументооборотаСсылка = НайтиОбъектПоИдентификаторуНов(структураОбъект.УИД,Тип("СправочникСсылка.СерверыДокументооборота"));
	
	Если СерверДокументооборотаСсылка = Неопределено Тогда
		СерверДокументооборотаОбъект = Справочники.СерверыДокументооборота.СоздатьЭлемент();
		СерверДокументооборотаОбъект.УстановитьСсылкуНового(Справочники.СерверыДокументооборота.ПолучитьСсылку());
		ЗаписатьИдентификаторВРегистр(СерверДокументооборотаОбъект.ПолучитьСсылкуНового(), структураОбъект.УИД);			
	Иначе
		Если НЕ структураОбъект.ОбъектИзменен Тогда
			Возврат;
		КонецЕсли;
		СерверДокументооборотаОбъект = СерверДокументооборотаСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	СерверДокументооборотаОбъект.ОбменДанными.Загрузка = Истина;
	
	ЗаполнитьЗначенияСвойств(СерверДокументооборотаОбъект, структураОбъект);
	
	СерверДокументооборотаОбъект.Записать();
			
КонецПроцедуры	

Процедура ЗагрузитьНалоговыйОрган(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты)
	
	Если Не УИДЗаполнен(структураОбъект.УИД) Тогда
		Возврат;
	КонецЕсли;	                       
	
	НалоговыйОрганСсылка = НайтиОбъектПоИдентификаторуНов(структураОбъект.УИД,Тип("СправочникСсылка.НалоговыеОрганы"));
	
	Если НалоговыйОрганСсылка = Неопределено Тогда
		НалоговыйОрганОбъект = Справочники.НалоговыеОрганы.СоздатьЭлемент();
		НалоговыйОрганОбъект.УстановитьСсылкуНового(Справочники.НалоговыеОрганы.ПолучитьСсылку());
		ЗаписатьИдентификаторВРегистр(НалоговыйОрганОбъект.ПолучитьСсылкуНового(), структураОбъект.УИД);			
	Иначе
		Если НЕ структураОбъект.ОбъектИзменен Тогда
			Возврат;
		КонецЕсли;
		НалоговыйОрганОбъект = НалоговыйОрганСсылка.ПолучитьОбъект();
	КонецЕсли;

	НалоговыйОрганОбъект.ОбменДанными.Загрузка = Истина;
	
	ЗаполнитьЗначенияСвойств(НалоговыйОрганОбъект, структураОбъект, "Код, Наименование, ПометкаУдаления, ПолноеНаименование,
																	|УчетНалогоплательщиков, ПриемНалоговойОтчетности, ИНН, КПП,
																	|Адрес, Телефон, АдресЭлектроннойПочты, АдресСайта,
																	|Комментарий, АдресЭлектроннойПочтыДляЦелейДокументооборотаСНалогоплательщиками");
	
	
	Если УИДЗаполнен(структураОбъект.Родитель) Тогда
		Родитель = НайтиОбъектПоИдентификаторуНов(структураОбъект.Родитель);
		Если Родитель <> Неопределено Тогда
			НалоговыйОрганОбъект.Родитель = Родитель;
		Иначе
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОбъект.УИД, структураОбъект.Родитель, "Родитель", XmlТипЗнч(НалоговыйОрганОбъект.Родитель).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);		
		КонецЕсли;
	КонецЕсли;	
	
	НалоговыйОрганОбъект.Сертификаты.Очистить();
	
	Для Каждого Стр Из структураОбъект.Сертификаты Цикл
		Нстр = НалоговыйОрганОбъект.Сертификаты.Добавить();
		Нстр.Сертификат = Стр.Сертификат;
	КонецЦикла;	
	
	НалоговыйОрганОбъект.Записать();

КонецПроцедуры	

Процедура ЗагрузитьКонтрагента(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты)
	
	Если Не УИДЗаполнен(структураОбъект.УИД) Тогда
		Возврат;
	КонецЕсли;	                       
	
	КонтрагентСсылка = НайтиОбъектПоИдентификаторуНов(структураОбъект.УИД,Тип("СправочникСсылка.Контрагенты"));
	
	Если КонтрагентСсылка = Неопределено Тогда
		КонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();
		КонтрагентОбъект.УстановитьСсылкуНового(Справочники.Контрагенты.ПолучитьСсылку());
		ЗаписатьИдентификаторВРегистр(КонтрагентОбъект.ПолучитьСсылкуНового(), структураОбъект.УИД);		
		КонтрагентОбъект.ГоловнойКонтрагент = КонтрагентОбъект.ПолучитьСсылкуНового();
	Иначе
		Если НЕ структураОбъект.ОбъектИзменен Тогда
			Возврат;
		КонецЕсли;
		КонтрагентОбъект = КонтрагентСсылка.ПолучитьОбъект();
		КонтрагентОбъект.ГоловнойКонтрагент = КонтрагентОбъект.Ссылка;
	КонецЕсли;	
	
	КонтрагентОбъект.ОбменДанными.Загрузка = Истина;
	
	ЗаполнитьЗначенияСвойств(КонтрагентОбъект, структураОбъект, ,"ЮридическоеФизическоеЛицо, СтранаРегистрации, КонтактнаяИнформация");

	КонтрагентОбъект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо[структураОбъект.ЮридическоеФизическоеЛицо];	
		
	Если структураОбъект.Свойство("ГоловнойКонтрагент") И УИДЗаполнен(структураОбъект.ГоловнойКонтрагент) Тогда
		ГоловнойКонтрагент = НайтиОбъектПоИдентификаторуНов(структураОбъект.ГоловнойКонтрагент,Тип("СправочникСсылка.Контрагенты"));
		Если ГоловнойКонтрагент = Неопределено Тогда
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОбъект.УИД, структураОбъект.ГоловнойКонтрагент, "ГоловнойКонтрагент", XmlТипЗнч(КонтрагентОбъект.ГоловнойКонтрагент).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);		
		КонецЕсли;	
	КонецЕсли;
			
	Если УИДЗаполнен(структураОбъект.СтранаРегистрации) Тогда
		КонтрагентОбъект.СтранаРегистрации = НайтиОбъектПоИдентификаторуНов(структураОбъект.СтранаРегистрации);
		Если Не ЗначениеЗаполнено(КонтрагентОбъект.СтранаРегистрации) Тогда
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОбъект.УИД, структураОбъект.СтранаРегистрации, "СтранаРегистрации", XmlТипЗнч(КонтрагентОбъект.СтранаРегистрации).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);		
		КонецЕсли;
	Иначе
		КонтрагентОбъект.СтранаРегистрации = Справочники.СтраныМира.ПустаяСсылка();
	КонецЕсли;	
	
	КонтрагентОбъект.КонтактнаяИнформация.Очистить();
	
	Для Каждого Стр Из структураОбъект.КонтактнаяИнформация Цикл
		
		ВидКИ = ОпределитьВидКонтактнойИнформации(Стр.Вид);
		Если ВидКИ = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		Нстр = КонтрагентОбъект.КонтактнаяИнформация.Добавить();
		ЗаполнитьЗначенияСвойств(Нстр, Стр, , "Тип, Вид, ВидДляСписка");
		
		Нстр.Тип = Перечисления.ТипыКонтактнойИнформации[Стр.Тип];
		Нстр.Вид = ВидКИ;
		Нстр.ВидДляСписка = ОпределитьВидКонтактнойИнформации(Стр.ВидДляСписка);
		
	КонецЦикла;	
	
	КонтрагентОбъект.Записать();
		  	
КонецПроцедуры	

Процедура ЗагрузитьДоговор(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты)
	
	Если Не УИДЗаполнен(структураОбъект.УИД) Тогда
		Возврат;
	КонецЕсли;                         
	
	ДоговорСсылка = НайтиОбъектПоИдентификаторуНов(структураОбъект.УИД,Тип("СправочникСсылка.ДоговорыКонтрагентов"));
	
	Если ДоговорСсылка = Неопределено Тогда
		ДоговорОбъект = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		ДоговорОбъект.УстановитьСсылкуНового(Справочники.ДоговорыКонтрагентов.ПолучитьСсылку());
		ЗаписатьИдентификаторВРегистр(ДоговорОбъект.ПолучитьСсылкуНового(), структураОбъект.УИД);		
	Иначе
		Если НЕ структураОбъект.ОбъектИзменен Тогда
			Возврат;
		КонецЕсли;
		ДоговорОбъект = ДоговорСсылка.ПолучитьОбъект();		
	КонецЕсли;
	
	ДоговорОбъект.ОбменДанными.Загрузка = Истина;
	
	ЗаполнитьЗначенияСвойств(ДоговорОбъект, структураОбъект,, "ВалютаВзаиморасчетов, Организация");
	
	Если УИДЗаполнен(структураОбъект.ВалютаВзаиморасчетов) Тогда
		ДоговорОбъект.ВалютаВзаиморасчетов = НайтиОбъектПоИдентификаторуНов(структураОбъект.ВалютаВзаиморасчетов);
		Если Не ЗначениеЗаполнено(ДоговорОбъект.ВалютаВзаиморасчетов) Тогда	
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОбъект.УИД, структураОбъект.ВалютаВзаиморасчетов, "ВалютаВзаиморасчетов", XmlТипЗнч(ДоговорОбъект.ВалютаВзаиморасчетов).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);
		КонецЕсли;
	Иначе
		ДоговорОбъект.ВалютаВзаиморасчетов = Справочники.Валюты.ПустаяСсылка();	
	КонецЕсли;  
	
	Если УИДЗаполнен(структураОбъект.Организация) Тогда
		ДоговорОбъект.Организация = НайтиОбъектПоИдентификаторуНов(структураОбъект.Организация,Тип("СправочникСсылка.Организации"));		
		Если Не ЗначениеЗаполнено(ДоговорОбъект.Организация) Тогда
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОбъект.УИД, структураОбъект.Организация, "Организация", XmlТипЗнч(ДоговорОбъект.Организация).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);
		КонецЕсли;	
	КонецЕсли;  
	
	Если УИДЗаполнен(структураОбъект.Контрагент) Тогда
		ДоговорОбъект.Владелец = НайтиОбъектПоИдентификаторуНов(структураОбъект.Контрагент,Тип("СправочникСсылка.Контрагенты"));		
		Если Не ЗначениеЗаполнено(ДоговорОбъект.Владелец) Тогда
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОбъект.УИД, структураОбъект.Контрагент, "Контрагент", XmlТипЗнч(ДоговорОбъект.Владелец).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);
		КонецЕсли;
	Иначе
		ДоговорОбъект.Владелец = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	ДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов[структураОбъект.ВидДоговора];
	
	Если структураОбъект.Свойство("ВидАгентскогоДоговора") И структураОбъект.ВидАгентскогоДоговора <> "" Тогда
		ДоговорОбъект.ВидАгентскогоДоговора = Перечисления.ВидыАгентскихДоговоров[структураОбъект.ВидАгентскогоДоговора];
	КонецЕсли;  
	
	ДоговорОбъект.Записать();
		
КонецПроцедуры

Процедура ЗагрузитьСтрану(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты)
	
	Если Не УИДЗаполнен(структураОбъект.УИД) Тогда
		Возврат;
	КонецЕсли;	                       
	
	СтранаСсылка = НайтиОбъектПоИдентификаторуНов(структураОбъект.УИД,Тип("СправочникСсылка.СтраныМира"));
	
	Если СтранаСсылка = Неопределено Тогда
		СтранаОбъект = Справочники.СтраныМира.СоздатьЭлемент();
		СтранаОбъект.УстановитьСсылкуНового(Справочники.СтраныМира.ПолучитьСсылку());
		ЗаписатьИдентификаторВРегистр(СтранаОбъект.ПолучитьСсылкуНового(), структураОбъект.УИД);		
	Иначе
		Если НЕ структураОбъект.ОбъектИзменен Тогда
			Возврат;
		КонецЕсли;
		СтранаОбъект = СтранаСсылка.ПолучитьОбъект();		
	КонецЕсли;
	
	СтранаОбъект.ОбменДанными.Загрузка = Истина;
	
	ЗаполнитьЗначенияСвойств(СтранаОбъект, структураОбъект);
	
	СтранаОбъект.Записать();		
	
КонецПроцедуры	

Процедура ЗагрузитьНомеклатуру(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты)

	Если Не УИДЗаполнен(структураОбъект.УИД) Тогда
		Возврат;
	КонецЕсли;	                       
	
	НоменклатураСсылка = НайтиОбъектПоИдентификаторуНов(структураОбъект.УИД,Тип("СправочникСсылка.Номенклатура"));
	
	Если НоменклатураСсылка = Неопределено Тогда
		Если структураОбъект.ЭтоГруппа Тогда
			НоменклатураОбъект = Справочники.Номенклатура.СоздатьГруппу();
		Иначе
			НоменклатураОбъект = Справочники.Номенклатура.СоздатьЭлемент();
		КонецЕсли;
		НоменклатураОбъект.УстановитьСсылкуНового(Справочники.Номенклатура.ПолучитьСсылку());
		ЗаписатьИдентификаторВРегистр(НоменклатураОбъект.ПолучитьСсылкуНового(), структураОбъект.УИД);		
	Иначе
		Если НЕ структураОбъект.ОбъектИзменен Тогда
			Возврат;
		КонецЕсли;
		НоменклатураОбъект = НоменклатураСсылка.ПолучитьОбъект();		
	КонецЕсли;
		
	НоменклатураОбъект.ОбменДанными.Загрузка = Истина;
		
	ЗаполнитьЗначенияСвойств(НоменклатураОбъект, структураОбъект,, "Родитель");
	
	Если УИДЗаполнен(структураОбъект.Родитель) Тогда
		НоменклатураОбъект.Родитель = НайтиОбъектПоИдентификаторуНов(структураОбъект.Родитель);
		Если Не ЗначениеЗаполнено(НоменклатураОбъект.Родитель) Тогда
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОбъект.УИД, структураОбъект.Родитель, "Родитель", XmlТипЗнч(НоменклатураОбъект.Родитель).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);
		КонецЕсли;	
	Иначе
		НоменклатураОбъект.Родитель = Справочники.Номенклатура.ПустаяСсылка();		
	КонецЕсли;	

	Если Не структураОбъект.ЭтоГруппа Тогда
		Если структураОбъект.ТипНоменклатуры = "Услуга" Тогда
			НоменклатураОбъект.Услуга = Истина;
			НоменклатураОбъект.ВидНоменклатуры = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Услуги", Истина);
		Иначе
			НоменклатураОбъект.Услуга = Ложь;
			НоменклатураОбъект.ВидНоменклатуры = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Товары", Истина);
		КонецЕсли;
		
		Если УИДЗаполнен(структураОбъект.ЕдиницаИзмерения) Тогда             
			НоменклатураОбъект.ЕдиницаИзмерения = НайтиОбъектПоИдентификаторуНов(структураОбъект.ЕдиницаИзмерения);
			Если Не ЗначениеЗаполнено(НоменклатураОбъект.ЕдиницаИзмерения) Тогда
				СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОбъект.УИД, структураОбъект.ЕдиницаИзмерения, "ЕдиницаИзмерения", XmlТипЗнч(НоменклатураОбъект.ЕдиницаИзмерения).ИмяТипа);
				ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);
			КонецЕсли;	
		Иначе
			НоменклатураОбъект.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка();	
		КонецЕсли;	
		
	КонецЕсли;	
	
	НоменклатураОбъект.Записать();	
	
КонецПроцедуры

Процедура ЗагрузитьЕдиницуИзмерения(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты)

	Если Не УИДЗаполнен(структураОбъект.УИД) Тогда
		Возврат;
	КонецЕсли;	                       
	
	ЕдИзмСсылка = НайтиОбъектПоИдентификаторуНов(структураОбъект.УИД,Тип("СправочникСсылка.КлассификаторЕдиницИзмерения"));
	
	Если ЕдИзмСсылка = Неопределено Тогда
		ЕдИзмОбъект = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();
		ЕдИзмОбъект.УстановитьСсылкуНового(Справочники.КлассификаторЕдиницИзмерения.ПолучитьСсылку());
		ЗаписатьИдентификаторВРегистр(ЕдИзмОбъект.ПолучитьСсылкуНового(), структураОбъект.УИД);		
	Иначе
		Если НЕ структураОбъект.ОбъектИзменен Тогда
			Возврат;
		КонецЕсли;
		ЕдИзмОбъект = ЕдИзмСсылка.ПолучитьОбъект();		
	КонецЕсли;
	
	ЕдИзмОбъект.ОбменДанными.Загрузка = Истина;
		
	ЗаполнитьЗначенияСвойств(ЕдИзмОбъект, структураОбъект);
	
	ЕдИзмОбъект.Записать();
		
КонецПроцедуры	

Процедура ЗагрузитьСклад(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты)
	
	Если Не УИДЗаполнен(структураОбъект.УИД) Тогда
		Возврат;
	КонецЕсли;	                       
	
	СкладСсылка = НайтиОбъектПоИдентификаторуНов(структураОбъект.УИД,Тип("СправочникСсылка.Склады"));
		
	Если СкладСсылка = Неопределено Тогда
		Если структураОбъект.ЭтоГруппа Тогда
			СкладОбъект = Справочники.Склады.СоздатьГруппу();
		Иначе
			СкладОбъект = Справочники.Склады.СоздатьЭлемент();
		КонецЕсли;
		СкладОбъект.УстановитьСсылкуНового(Справочники.Склады.ПолучитьСсылку());
		ЗаписатьИдентификаторВРегистр(СкладОбъект.ПолучитьСсылкуНового(), структураОбъект.УИД);		
	Иначе
		Если НЕ структураОбъект.ОбъектИзменен Тогда
			Возврат;
		КонецЕсли;
		СкладОбъект = СкладСсылка.ПолучитьОбъект();		
	КонецЕсли;
	
	СкладОбъект.ОбменДанными.Загрузка = Истина;
		
	ЗаполнитьЗначенияСвойств(СкладОбъект, структураОбъект,,"Родитель");
	
	Если УИДЗаполнен(структураОбъект.Родитель) Тогда
		СкладОбъект.Родитель = НайтиОбъектПоИдентификаторуНов(структураОбъект.Родитель);
		Если Не ЗначениеЗаполнено(СкладОбъект.Родитель) Тогда
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОбъект.УИД, структураОбъект.Родитель, "Родитель", XmlТипЗнч(СкладОбъект.Родитель).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);			
		КонецЕсли;
	Иначе
		СкладОбъект.Родитель = Справочники.Склады.ПустаяСсылка();
	КонецЕсли;	
	
	Если Не структураОбъект.ЭтоГруппа Тогда
		СкладОбъект.ТипСклада = Перечисления.ТипыСкладов[структураОбъект.ТипСклада];	
	КонецЕсли;
	
	СкладОбъект.Записать();	
		
КонецПроцедуры	 

Процедура ЗагрузитьРасходыБудущихПериодов(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты)
	
	Если Не УИДЗаполнен(структураОбъект.УИД) Тогда
		Возврат;
	КонецЕсли;	
	
	РБПСсылка = НайтиОбъектПоИдентификаторуНов(структураОбъект.УИД,Тип("СправочникСсылка.РасходыБудущихПериодов"));
	
	Если РБПСсылка = Неопределено Тогда
		РБПОбъект = Справочники.РасходыБудущихПериодов.СоздатьЭлемент();
		РБПОбъект.УстановитьСсылкуНового(Справочники.РасходыБудущихПериодов.ПолучитьСсылку());
		ЗаписатьИдентификаторВРегистр(РБПОбъект.ПолучитьСсылкуНового(), структураОбъект.УИД);		
	Иначе
		Если НЕ структураОбъект.ОбъектИзменен Тогда
			Возврат;
		КонецЕсли;
		РБПОбъект = РБПСсылка.ПолучитьОбъект();		
	КонецЕсли;

	РБПОбъект.ОбменДанными.Загрузка = Истина;
		
	ЗаполнитьЗначенияСвойств(РБПОбъект, структураОбъект);
	
    РБПОбъект.ВидРБП = Перечисления.ВидыРБП[структураОбъект.ВидРБП];
    РБПОбъект.СпособПризнанияРасходов = Перечисления.СпособыПризнанияРасходов[структураОбъект.СпособПризнанияРасходов];
    РБПОбъект.ВидАктива = Перечисления.ВидыАктивовДляРБП[структураОбъект.ВидАктива];
    РБПОбъект.СчетЗатрат = ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора", структураОбъект.СчетЗатрат);
	
	РБПОбъект.Записать();
	
КонецПроцедуры	

Процедура ЗагрузитьПрочиеДоходыИРасходы(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты)
	
	Если Не УИДЗаполнен(структураОбъект.УИД) Тогда
		Возврат;
	КонецЕсли;	                       
	
	НадоДобавитьЗаписьВРегистр = Ложь;
	ПДРСсылка = НайтиОбъектПоИдентификаторуНов(структураОбъект.УИД);
	Если ПДРСсылка = Неопределено Тогда
		НадоДобавитьЗаписьВРегистр = Истина;
		Если структураОбъект.Наименование = "Оприходование излишков" Тогда
			ПДРОбъект = Справочники.ПрочиеДоходыИРасходы.ОприходованиеИзлишков;
		ИначеЕсли структураОбъект.Наименование = "Курсовые разницы доходы" Тогда
			ПДРОбъект = Справочники.ПрочиеДоходыИРасходы.КурсовыеРазницы;
		ИначеЕсли структураОбъект.Наименование = "Реализация ОС" Тогда
			ПДРОбъект = Справочники.ПрочиеДоходыИРасходы.РеализацияОсновныхСредств;
		ИначеЕсли структураОбъект.Наименование = "Разницы стоимости возврата и фактической стоимости товаров" Тогда
			ПДРОбъект = Справочники.ПрочиеДоходыИРасходы.РазницыСтоимостиВозвратаИФактическойСтоимостиТоваров;
		ИначеЕсли структураОбъект.Наименование = "Закрытие резервов по сомнительным долгам" Тогда
			ПДРОбъект = Справочники.ПрочиеДоходыИРасходы.РезервыПоСомнительнымДолгам;
		Иначе     
			ПДРОбъект = Справочники.ПрочиеДоходыИРасходы.СоздатьЭлемент();
		КонецЕсли;	
	Иначе
		Если НЕ структураОбъект.ОбъектИзменен Тогда
			Возврат;
		КонецЕсли;
		ПДРОбъект = ПДРСсылка.ПолучитьОбъект();	
	КонецЕсли;
	
	ПДРОбъект.ОбменДанными.Загрузка = Истина;
		
	ЗаполнитьЗначенияСвойств(ПДРОбъект, структураОбъект);
	
	Если ЗначениеЗаполнено(структураОбъект.ВидПрочихДоходовИРасходов) Тогда
		ПДРОбъект.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов[структураОбъект.ВидПрочихДоходовИРасходов];
	КонецЕсли;
	Если ЗначениеЗаполнено(структураОбъект.ВидДеятельностиДляНалоговогоУчетаЗатрат) Тогда
    	ПДРОбъект.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат[структураОбъект.ВидДеятельностиДляНалоговогоУчетаЗатрат];
	КонецЕсли;	
	
	ПДРОбъект.Записать();
	
	Если НадоДобавитьЗаписьВРегистр Тогда
		ЗаписатьИдентификаторВРегистр(ПДРОбъект.Ссылка, структураОбъект.УИД);
	КонецЕсли;		
	
КонецПроцедуры

//Самойлов А.С. Начало 2022-09-27 #
Процедура ЗагрузитьСтатьюЗатрат(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты)
	
	Если Не УИДЗаполнен(структураОбъект.УИД) Тогда
		Возврат;
	КонецЕсли;	                       
	
	НадоДобавитьЗаписьВРегистр = Ложь;
	СправочникСсылка = НайтиОбъектПоИдентификаторуНов(структураОбъект.УИД);
	Если СправочникСсылка = Неопределено Тогда
		НадоДобавитьЗаписьВРегистр = Истина;
		Если структураОбъект.Наименование = "Амортизационная премия" Тогда
			СправочникОбъект = Справочники.СтатьиЗатрат.АмортизационнаяПремия;
		ИначеЕсли структураОбъект.Наименование = "Командировочные расходы" Тогда
			СправочникОбъект = Справочники.СтатьиЗатрат.КомандировочныеРасходы;
		ИначеЕсли структураОбъект.Наименование = "Малоценное оборудование и запасы" Тогда
			СправочникОбъект = Справочники.СтатьиЗатрат.ПриобретениеМалоценногоОборудованияИЗапасов;
		ИначеЕсли структураОбъект.Наименование = "Неамортизируемое имущество" Тогда
			СправочникОбъект = Справочники.СтатьиЗатрат.НеамортизируемоеИмущество;
		ИначеЕсли структураОбъект.Наименование = "Оплата труда" Тогда
			СправочникОбъект = Справочники.СтатьиЗатрат.ОплатаТруда;
		ИначеЕсли структураОбъект.Наименование = "Оплата труда (ЕНВД)" Тогда
			СправочникОбъект = Справочники.СтатьиЗатрат.ОплатаТрудаЕНВД;
		ИначеЕсли структураОбъект.Наименование = "Прочие затраты" Тогда
			СправочникОбъект = Справочники.СтатьиЗатрат.ПрочиеЗатраты;
		ИначеЕсли структураОбъект.Наименование = "Содержание служебного автотранспорта" Тогда
			СправочникОбъект = Справочники.СтатьиЗатрат.СлужебныйАвтотранспорт;
		ИначеЕсли структураОбъект.Наименование = "Списание материалов" Тогда
			СправочникОбъект = Справочники.СтатьиЗатрат.СписаниеМатериалов;
		ИначеЕсли структураОбъект.Наименование = "Списание НДС" Тогда
			СправочникОбъект = Справочники.СтатьиЗатрат.СписаниеНДСНаРасходы;
		ИначеЕсли структураОбъект.Наименование = "Списание НДС (ЕНВД)" Тогда
			СправочникОбъект = Справочники.СтатьиЗатрат.СписаниеНДСНаРасходыЕНВД;
		ИначеЕсли структураОбъект.Наименование = "Торговый сбор" Тогда
			СправочникОбъект = Справочники.СтатьиЗатрат.ТорговыйСбор;
		ИначеЕсли структураОбъект.Наименование = "Услуги комиссионеров" Тогда
			СправочникОбъект = Справочники.СтатьиЗатрат.УслугиКомиссионеров;
		Иначе     
			СправочникОбъект = Справочники.СтатьиЗатрат.СоздатьЭлемент();
		КонецЕсли;	
	Иначе
		Если НЕ структураОбъект.ОбъектИзменен Тогда
			Возврат;
		КонецЕсли;
		СправочникОбъект = СправочникСсылка.ПолучитьОбъект();	
	КонецЕсли;
	
	СправочникОбъект.ОбменДанными.Загрузка = Истина;
		
	ЗаполнитьЗначенияСвойств(СправочникОбъект, структураОбъект);
		
	Если ЗначениеЗаполнено(структураОбъект.ВидРасходовНУ) Тогда
    	СправочникОбъект.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыРасходовНУ[структураОбъект.ВидРасходовНУ];
	КонецЕсли;	
	
	СправочникОбъект.Записать();
	
	Если НадоДобавитьЗаписьВРегистр Тогда
		ЗаписатьИдентификаторВРегистр(СправочникОбъект.Ссылка, структураОбъект.УИД);
	КонецЕсли;		
	
КонецПроцедуры
//Самойлов А.С. Конец  2022-09-27

Процедура ЗагрузитьФизЛицо(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты)
	
 	Если Не УИДЗаполнен(структураОбъект.УИД) Тогда
		Возврат;
	КонецЕсли;	                       
	
	ФизЛицоСсылка = НайтиОбъектПоИдентификаторуНов(структураОбъект.УИД,Тип("СправочникСсылка.ФизическиеЛица"));
		
	Если ФизЛицоСсылка = Неопределено Тогда
		Если структураОбъект.ЭтоГруппа Тогда
			ФизЛицоОбъект = Справочники.ФизическиеЛица.СоздатьГруппу();
		Иначе
			ФизЛицоОбъект = Справочники.ФизическиеЛица.СоздатьЭлемент();
		КонецЕсли;
		ФизЛицоОбъект.УстановитьСсылкуНового(Справочники.ФизическиеЛица.ПолучитьСсылку());
		ЗаписатьИдентификаторВРегистр(ФизЛицоОбъект.ПолучитьСсылкуНового(), структураОбъект.УИД);		
	Иначе
		Если НЕ структураОбъект.ОбъектИзменен Тогда
			Возврат;
		КонецЕсли;
		ФизЛицоОбъект = ФизЛицоСсылка.ПолучитьОбъект();		
	КонецЕсли;
	
	ФизЛицоОбъект.ОбменДанными.Загрузка = Истина;
		
	ЗаполнитьЗначенияСвойств(ФизЛицоОбъект, структураОбъект,,"Родитель");
	
	Если УИДЗаполнен(структураОбъект.Родитель) Тогда
		ФизЛицоОбъект.Родитель = НайтиОбъектПоИдентификаторуНов(структураОбъект.Родитель);
		Если НЕ ЗначениеЗаполнено(ФизЛицоОбъект.Родитель) Тогда                                
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОбъект.УИД, структураОбъект.Родитель, "Родитель", XmlТипЗнч(ФизЛицоОбъект.Родитель).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);			
		КонецЕсли;	
	Иначе
		ФизЛицоОбъект.Родитель = Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли;	
		
	Если НЕ структураОбъект.ЭтоГруппа Тогда
		
		ФизЛицоОбъект.Пол = Перечисления.ПолФизическогоЛица[структураОбъект.Пол]; 
		Если ЗначениеЗаполнено(структураОбъект.ЛьготаПриНачисленииПособий) Тогда
			ФизЛицоОбъект.ЛьготаПриНачисленииПособий = Перечисления.ОснованияФинансированияПособияФедеральнымБюджетом[структураОбъект.ЛьготаПриНачисленииПособий];
		КонецЕсли;	
		
	КонецЕсли;	
	
	ФизЛицоОбъект.Записать();
		
КонецПроцедуры	

Процедура ЗагрузитьРезервыОценочныеОбязательства(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты)

 	Если Не УИДЗаполнен(структураОбъект.УИД) Тогда
		Возврат;
	КонецЕсли;	                       
	
	РезервСсылка = НайтиОбъектПоИдентификаторуНов(структураОбъект.УИД,Тип("СправочникСсылка.Резервы"));
	
	Если РезервСсылка = Неопределено Тогда
		РезервОбъект = Справочники.Резервы.СоздатьЭлемент();
		РезервОбъект.УстановитьСсылкуНового(Справочники.Резервы.ПолучитьСсылку());
		ЗаписатьИдентификаторВРегистр(РезервОбъект.ПолучитьСсылкуНового(), структураОбъект.УИД);		
	Иначе
		Если НЕ структураОбъект.ОбъектИзменен Тогда
			Возврат;
		КонецЕсли;
		РезервОбъект = РезервСсылка.ПолучитьОбъект();		
	КонецЕсли;
			
	РезервОбъект.ОбменДанными.Загрузка = Истина;
		
	ЗаполнитьЗначенияСвойств(РезервОбъект, структураОбъект);
	
	РезервОбъект.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьЦенныеБумаги(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты)

 	Если Не УИДЗаполнен(структураОбъект.УИД) Тогда
		Возврат;
	КонецЕсли;	                       
	
	ЦБСсылка = НайтиОбъектПоИдентификаторуНов(структураОбъект.УИД,Тип("СправочникСсылка.ЦенныеБумаги"));
	
	Если ЦБСсылка = Неопределено Тогда
		Если структураОбъект.ЭтоГруппа Тогда
			ЦБОбъект = Справочники.ЦенныеБумаги.СоздатьГруппу();
		Иначе
			ЦБОбъект = Справочники.ЦенныеБумаги.СоздатьЭлемент();
		КонецЕсли;
		ЦБОбъект.УстановитьСсылкуНового(Справочники.ЦенныеБумаги.ПолучитьСсылку());
		ЗаписатьИдентификаторВРегистр(ЦБОбъект.ПолучитьСсылкуНового(), структураОбъект.УИД);		
	Иначе
		Если НЕ структураОбъект.ОбъектИзменен Тогда
			Возврат;
		КонецЕсли;
		ЦБОбъект = ЦБСсылка.ПолучитьОбъект();		
	КонецЕсли;
	
	ЦБОбъект.ОбменДанными.Загрузка = Истина;
		
	ЗаполнитьЗначенияСвойств(ЦБОбъект, структураОбъект,,"Родитель");
	
	Если УИДЗаполнен(структураОбъект.Родитель) Тогда
		ЦБОбъект.Родитель = НайтиОбъектПоИдентификаторуНов(структураОбъект.Родитель);
		Если НЕ ЗначениеЗаполнено(ЦБОбъект.Родитель) Тогда                                
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОбъект.УИД, структураОбъект.Родитель, "Родитель", XmlТипЗнч(ЦБОбъект.Родитель).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);			
		КонецЕсли;	
	Иначе
		ЦБОбъект.Родитель = Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли;
	
	ЦБОбъект.Записать();

КонецПроцедуры

Процедура ЗагрузитьОсновноеСредство(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты)
	
	Если Не УИДЗаполнен(структураОбъект.УИД) Тогда
		Возврат;
	КонецЕсли;	                       
	
	ОсновноеСредствоСсылка = НайтиОбъектПоИдентификаторуНов(структураОбъект.УИД,Тип("СправочникСсылка.ОсновныеСредства"));
	
	Если ОсновноеСредствоСсылка = Неопределено Тогда
		Если структураОбъект.ЭтоГруппа Тогда
			ОсновноеСредствоОбъект = Справочники.ОсновныеСредства.СоздатьГруппу();
		Иначе
			ОсновноеСредствоОбъект = Справочники.ОсновныеСредства.СоздатьЭлемент();
		КонецЕсли;
		ОсновноеСредствоОбъект.УстановитьСсылкуНового(Справочники.ОсновныеСредства.ПолучитьСсылку());
		ЗаписатьИдентификаторВРегистр(ОсновноеСредствоОбъект.ПолучитьСсылкуНового(), структураОбъект.УИД);		
	Иначе
		Если НЕ структураОбъект.ОбъектИзменен Тогда
			Возврат;
		КонецЕсли;
		ОсновноеСредствоОбъект = ОсновноеСредствоСсылка.ПолучитьОбъект();		
	КонецЕсли;
		
	ОсновноеСредствоОбъект.ОбменДанными.Загрузка = Истина;
	
	ЗаполнитьЗначенияСвойств(ОсновноеСредствоОбъект, структураОбъект, "
		|Наименование, НаименованиеПолное, ПометкаУдаления, 
		|ДатаВыпуска, ЗаводскойНомер, Изготовитель, Комментарий, НомерПаспорта
		|");   
	
	Если УИДЗаполнен(структураОбъект.Родитель) Тогда
		ОсновноеСредствоОбъект.Родитель = НайтиОбъектПоИдентификаторуНов(структураОбъект.Родитель);
		Если Не ЗначениеЗаполнено(ОсновноеСредствоОбъект.Родитель) Тогда 
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОбъект.УИД, структураОбъект.Родитель, "Родитель", XmlТипЗнч(ОсновноеСредствоОбъект.Родитель).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);			
		КонецЕсли;	
	Иначе
		ОсновноеСредствоОбъект.Родитель = Справочники.ОсновныеСредства.ПустаяСсылка();
	КонецЕсли;
	
	ОсновноеСредствоОбъект.Код = структураОбъект.Код;
	
	Если НЕ структураОбъект.ЭтоГруппа Тогда
		ОсновноеСредствоОбъект.ТипОС = Перечисления.ТипыОС["ОбъектОС"];
		Если ЗначениеЗаполнено(структураОбъект.ГруппаОС) Тогда
			ОсновноеСредствоОбъект.ГруппаОС = Перечисления.ГруппыОС[структураОбъект.ГруппаОС];
		Иначе
			ОсновноеСредствоОбъект.ГруппаОС = Перечисления.ГруппыОС.ПустаяСсылка();
		КонецЕсли;	
		ОсновноеСредствоОбъект.КодПоОКОФ = ПолучитьКодОКОФ(структураОбъект.КодПоОКОФ); 
		Если ЗначениеЗаполнено(структураОбъект.УдалитьАмортизационнаяГруппа) Тогда
			ОсновноеСредствоОбъект.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы[структураОбъект.УдалитьАмортизационнаяГруппа];
		Иначе
			ОсновноеСредствоОбъект.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ПустаяСсылка();
		КонецЕсли;	
	КонецЕсли;
			
	ОсновноеСредствоОбъект.Записать();

КонецПроцедуры

Процедура ЗагрузитьОбъектСтроительства(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты)
	
	Если Не УИДЗаполнен(структураОбъект.УИД) Тогда
		Возврат;
	КонецЕсли;	                       
	
	ОбъектСтроительстваСсылка = НайтиОбъектПоИдентификаторуНов(структураОбъект.УИД,Тип("СправочникСсылка.ОбъектыСтроительства"));
	
	Если ОбъектСтроительстваСсылка = Неопределено Тогда
		Если НЕ структураОбъект.ЭтоГруппа Тогда
			ОбъектСтроительстваОбъект = Справочники.ОбъектыСтроительства.СоздатьЭлемент();
		Иначе
			ОбъектСтроительстваОбъект = Справочники.ОбъектыСтроительства.СоздатьГруппу();
		КонецЕсли;
		ОбъектСтроительстваОбъект.УстановитьСсылкуНового(Справочники.ОбъектыСтроительства.ПолучитьСсылку());
		ЗаписатьИдентификаторВРегистр(ОбъектСтроительстваОбъект.ПолучитьСсылкуНового(), структураОбъект.УИД);		
	Иначе
		Если НЕ структураОбъект.ОбъектИзменен Тогда
			Возврат;
		КонецЕсли;
		ОбъектСтроительстваОбъект = ОбъектСтроительстваСсылка.ПолучитьОбъект();		
	КонецЕсли;

	ОбъектСтроительстваОбъект.ОбменДанными.Загрузка = Истина;
	
	ЗаполнитьЗначенияСвойств(ОбъектСтроительстваОбъект, структураОбъект, "Наименование, ПометкаУдаления");   
	
	Если УИДЗаполнен(структураОбъект.Родитель) Тогда
		ОбъектСтроительстваОбъект.Родитель = НайтиОбъектПоИдентификаторуНов(структураОбъект.Родитель);
		Если НЕ ЗначениеЗаполнено(ОбъектСтроительстваОбъект.Родитель) Тогда
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОбъект.УИД, структураОбъект.Родитель, "Родитель", XmlТипЗнч(ОбъектСтроительстваОбъект.Родитель).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);			
		КонецЕсли;	
	Иначе
		ОбъектСтроительстваОбъект.Родитель = Справочники.ОбъектыСтроительства.ПустаяСсылка();
	КонецЕсли;	
	
	ОбъектСтроительстваОбъект.Записать();

КонецПроцедуры

Процедура ЗагрузитьНематериальныйАктив(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты)
	
	Если Не УИДЗаполнен(структураОбъект.УИД) Тогда
		Возврат;
	КонецЕсли;	
	
	НематериальныйАктивСсылка = НайтиОбъектПоИдентификаторуНов(структураОбъект.УИД,Тип("СправочникСсылка.НематериальныеАктивы"));
	
	Если НематериальныйАктивСсылка = Неопределено Тогда
		Если НЕ структураОбъект.ЭтоГруппа Тогда
			НематериальныйАктивОбъект = Справочники.НематериальныеАктивы.СоздатьЭлемент();
		Иначе
			НематериальныйАктивОбъект = Справочники.НематериальныеАктивы.СоздатьГруппу();
		КонецЕсли;
		НематериальныйАктивОбъект.УстановитьСсылкуНового(Справочники.НематериальныеАктивы.ПолучитьСсылку());
		ЗаписатьИдентификаторВРегистр(НематериальныйАктивОбъект.ПолучитьСсылкуНового(), структураОбъект.УИД);		
	Иначе
		Если НЕ структураОбъект.ОбъектИзменен Тогда
			Возврат;
		КонецЕсли;
		НематериальныйАктивОбъект = НематериальныйАктивСсылка.ПолучитьОбъект();		
	КонецЕсли;
	
	НематериальныйАктивОбъект.ОбменДанными.Загрузка = Истина;
	
	ЗаполнитьЗначенияСвойств(НематериальныйАктивОбъект, структураОбъект, "Наименование, НаименованиеПолное, ПометкаУдаления"); 
	НематериальныйАктивОбъект.ВидНМА = Перечисления.ВидыНМА[структураОбъект.ВидНМА];
	
	Если УИДЗаполнен(структураОбъект.Родитель) Тогда
		НематериальныйАктивОбъект.Родитель = НайтиОбъектПоИдентификаторуНов(структураОбъект.Родитель);
		Если Не ЗначениеЗаполнено(НематериальныйАктивОбъект.Родитель) Тогда
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОбъект.УИД, структураОбъект.Родитель, "Родитель", XmlТипЗнч(НематериальныйАктивОбъект.Родитель).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);			
		КонецЕсли;	
	Иначе
		НематериальныйАктивОбъект.Родитель = Справочники.НематериальныеАктивы.ПустаяСсылка();
	КонецЕсли;	
	
	НематериальныйАктивОбъект.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьСотрудника(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты)

 	Если Не УИДЗаполнен(структураОбъект.УИД) Тогда
		Возврат;
	КонецЕсли;	                       
	
	СотрудникСсылка = НайтиОбъектПоИдентификаторуНов(структураОбъект.УИД,Тип("СправочникСсылка.Сотрудники"));
	
	Если СотрудникСсылка = Неопределено Тогда
		СотрудникОбъект = Справочники.Сотрудники.СоздатьЭлемент();
		СотрудникОбъект.УстановитьСсылкуНового(Справочники.Сотрудники.ПолучитьСсылку());
		ЗаписатьИдентификаторВРегистр(СотрудникОбъект.ПолучитьСсылкуНового(), структураОбъект.УИД);		
		СотрудникОбъект.ГоловнойСотрудник = СотрудникОбъект.ПолучитьСсылкуНового();
	Иначе
		Если НЕ структураОбъект.ОбъектИзменен Тогда
			Возврат;
		КонецЕсли;
		СотрудникОбъект = СотрудникСсылка.ПолучитьОбъект();	
		СотрудникОбъект.ГоловнойСотрудник = СотрудникОбъект.Ссылка;
	КонецЕсли;
			
	СотрудникОбъект.ОбменДанными.Загрузка = Истина;
		
	ЗаполнитьЗначенияСвойств(СотрудникОбъект, структураОбъект);
	
	СотрудникОбъект.ФизическоеЛицо = НайтиОбъектПоИдентификаторуНов(структураОбъект.ФизическоеЛицо);
	Если Не ЗначениеЗаполнено(СотрудникОбъект.ФизическоеЛицо) Тогда
		СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОбъект.УИД, структураОбъект.ФизическоеЛицо, "ФизическоеЛицо", XmlТипЗнч(СотрудникОбъект.ФизическоеЛицо).ИмяТипа);
		ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);			
	КонецЕсли;	
	
	СотрудникОбъект.ГоловнаяОрганизация = НайтиОбъектПоИдентификаторуНов(структураОбъект.ГоловнаяОрганизация,Тип("СправочникСсылка.Организации"));
	
	Если Не ЗначениеЗаполнено(СотрудникОбъект.ГоловнаяОрганизация) Тогда
		СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОбъект.УИД, структураОбъект.ГоловнаяОрганизация, "ГоловнаяОрганизация", XmlТипЗнч(СотрудникОбъект.ГоловнаяОрганизация).ИмяТипа);
		ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);			
	КонецЕсли;
	
	Если структураОбъект.Свойство("ГоловнойСотрудник") И УИДЗаполнен(структураОбъект.ГоловнойСотрудник) Тогда
		СотрудникОбъект.ГоловнойСотрудник = НайтиОбъектПоИдентификаторуНов(структураОбъект.ГоловнойСотрудник);
		Если НЕ ЗначениеЗаполнено(СотрудникОбъект.ГоловнойСотрудник) Тогда
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОбъект.УИД, структураОбъект.ГоловнойСотрудник, "ГоловнойСотрудник", XmlТипЗнч(СотрудникОбъект.ГоловнойСотрудник).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);			
		КонецЕсли;	
	КонецЕсли;
	
	СотрудникОбъект.Записать();

КонецПроцедуры     

Процедура ЗагрузитьСтатьюДДС(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты)

 	Если Не УИДЗаполнен(структураОбъект.УИД) Тогда
		Возврат;
	КонецЕсли;	  
	
	СтатьяДДССсылка = НайтиОбъектПоИдентификаторуНов(структураОбъект.УИД,Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств"));
	
	Если СтатьяДДССсылка = Неопределено Тогда		
		Если структураОбъект.ИмяПредопределенныхДанных = "ВозвратДенежныхСредствОтПоставщика" Тогда
			СтатьяДДСОбъект = Справочники.СтатьиДвиженияДенежныхСредств.ВозвратОтПоставщика;
		ИначеЕсли структураОбъект.ИмяПредопределенныхДанных = "ВозвратПокупателю" Тогда
			СтатьяДДСОбъект = Справочники.СтатьиДвиженияДенежныхСредств.ВозвратОтПоставщика;
		ИначеЕсли структураОбъект.ИмяПредопределенныхДанных = "ОплатаОтПокупателя" Тогда
			СтатьяДДСОбъект = Справочники.СтатьиДвиженияДенежныхСредств.ВозвратОтПоставщика;
		ИначеЕсли структураОбъект.ИмяПредопределенныхДанных = "ОплатаПоставщику" Тогда
			СтатьяДДСОбъект = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщику;
		ИначеЕсли структураОбъект.ИмяПредопределенныхДанных = "ВыплатаЗаработнойПлаты" Тогда
			СтатьяДДСОбъект = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаТруда;
		ИначеЕсли НЕ структураОбъект.ЭтоГруппа Тогда
			СтатьяДДСОбъект = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
		Иначе
			СтатьяДДСОбъект = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьГруппу();
		КонецЕсли;
		Если СтатьяДДСОбъект.ЭтоНовый() Тогда 
			СтатьяДДСОбъект.УстановитьСсылкуНового(Справочники.НематериальныеАктивы.ПолучитьСсылку());
			ЗаписатьИдентификаторВРегистр(СтатьяДДСОбъект.ПолучитьСсылкуНового(), структураОбъект.УИД);
		Иначе
			ЗаписатьИдентификаторВРегистр(СтатьяДДСОбъект.Ссылка, структураОбъект.УИД);
		КонецЕсли;			
	Иначе
		Если НЕ структураОбъект.ОбъектИзменен Тогда
			Возврат;
		КонецЕсли;
		СтатьяДДСОбъект = СтатьяДДССсылка.ПолучитьОбъект();		
	КонецЕсли;
			
	СтатьяДДСОбъект.ОбменДанными.Загрузка = Истина;
		
	ЗаполнитьЗначенияСвойств(СтатьяДДСОбъект, структураОбъект,,"ИмяПредопределенныхДанных");

	Если УИДЗаполнен(структураОбъект.Родитель) Тогда
		СтатьяДДСОбъект.Родитель = НайтиОбъектПоИдентификаторуНов(структураОбъект.Родитель);
		Если НЕ ЗначениеЗаполнено(СтатьяДДСОбъект.Родитель) Тогда
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОбъект.УИД, структураОбъект.Родитель, "Родитель", XmlТипЗнч(СтатьяДДСОбъект.Родитель).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);			
		КонецЕсли;	
	Иначе
		СтатьяДДСОбъект.Родитель = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();	
	КонецЕсли;	
	
	Если Не структураОбъект.ЭтоГруппа Тогда
		Если ЗначениеЗаполнено(структураОбъект.ВидДвиженияДенежныхСредств) И Метаданные.Перечисления.ВидДвиженияДенежныхСредств.ЗначенияПеречисления.Найти(структураОбъект.ВидДвиженияДенежныхСредств) <> Неопределено Тогда
			СтатьяДДСОбъект.ВидДвиженияДенежныхСредств = Перечисления.ВидыДвиженийДенежныхСредств[структураОбъект.ВидДвиженияДенежныхСредств];
		Иначе	
			СтатьяДДСОбъект.ВидДвиженияДенежныхСредств = Перечисления.ВидыДвиженийДенежныхСредств.ПустаяСсылка();			
		КонецЕсли;	
	КонецЕсли;	
	
	СтатьяДДСОбъект.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьБанк(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты)

 	Если Не УИДЗаполнен(структураОбъект.УИД) Тогда
		Возврат;
	КонецЕсли;	                       
	
	НадоДобавитьЗаписьВРегистр = Ложь;
	БанкСсылка = НайтиОбъектПоИдентификаторуНов(структураОбъект.УИД);
	Если БанкСсылка <> Неопределено И Не структураОбъект.ОбъектИзменен Тогда
		Возврат;
	ИначеЕсли БанкСсылка = Неопределено Тогда
		Если структураОбъект.ЭтоГруппа Тогда
			Банк = Справочники.Банки.НайтиПоКоду(структураОбъект.Код);
			Если Не ЗначениеЗаполнено(Банк) Тогда
				БанкОбъект = Справочники.Банки.СоздатьГруппу();
			Иначе
				БанкОбъект = Банк.ПолучитьОбъект();
			КонецЕсли;	
		Иначе	
			БанкОбъект = Справочники.Банки.СоздатьЭлемент();
		КонецЕсли;	
		НадоДобавитьЗаписьВРегистр = Истина;
	Иначе
		БанкОбъект = БанкСсылка.ПолучитьОбъект();	
	КонецЕсли;
	
	БанкОбъект.ОбменДанными.Загрузка = Истина;
		
	ЗаполнитьЗначенияСвойств(БанкОбъект, структураОбъект);
	
	Если УИДЗаполнен(структураОбъект.Родитель) Тогда
		БанкОбъект.Родитель = НайтиОбъектПоИдентификаторуНов(структураОбъект.Родитель);
		Если Не ЗначениеЗаполнено(БанкОбъект.Родитель) Тогда		
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОбъект.УИД, структураОбъект.Родитель, "Родитель", XmlТипЗнч(БанкОбъект.Родитель).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);			
		КонецЕсли;	
	Иначе
		БанкОбъект.Родитель = Справочники.Банки.ПустаяСсылка();
	КонецЕсли;	
	
    Если Не структураОбъект.ЭтоГруппа Тогда

		Если УИДЗаполнен(структураОбъект.Страна) Тогда
			БанкОбъект.Страна = НайтиОбъектПоИдентификаторуНов(структураОбъект.Страна);
			Если НЕ ЗначениеЗаполнено(БанкОбъект.Страна) Тогда
				СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОбъект.УИД, структураОбъект.Страна, "Страна", XmlТипЗнч(БанкОбъект.Страна).ИмяТипа);
				ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);			
			КонецЕсли;
		Иначе
			БанкОбъект.Страна = Справочники.СтраныМира.ПустаяСсылка();
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(БанкОбъект.Ссылка) Тогда //если не новый!
			//уже проставили в заполнении значений свойств 0 или 3 - коррекируем, если ошибка
			Если БанкОбъект.РучноеИзменение = 0 И БанкОбъект.Ссылка.РучноеИзменение <> 3 Тогда
				БанкОбъект.РучноеИзменение = БанкОбъект.Ссылка.РучноеИзменение;
			КонецЕсли;	
		КонецЕсли;

	КонецЕсли;
	
	БанкОбъект.Записать();
	
	Если НадоДобавитьЗаписьВРегистр Тогда
		ЗаписатьИдентификаторВРегистр(БанкОбъект.Ссылка, структураОбъект.УИД);
	КонецЕсли;	

КонецПроцедуры

Процедура ЗагрузитьБанковскийСчет(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты)

 	Если Не УИДЗаполнен(структураОбъект.УИД) Тогда
		Возврат;
	КонецЕсли;	                       
	
	Если структураОбъект.ТипВладельца = "Организация" Тогда
		Владелец = НайтиОбъектПоИдентификаторуНов(структураОбъект.Владелец,Тип("СправочникСсылка.Организации"));
	Иначе
		Владелец = НайтиОбъектПоИдентификаторуНов(структураОбъект.Владелец,Тип("СправочникСсылка.Контрагенты"));
	КонецЕсли;
	
	Если Владелец = Неопределено Тогда
		СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОбъект.УИД, структураОбъект.Владелец, "Владелец", структураОбъект.ТипВладельца);
		ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);
		Возврат;		
	КонецЕсли;		
	
	БанковскийСчетСсылка = НайтиОбъектПоИдентификаторуНов(структураОбъект.УИД,Тип("СправочникСсылка.БанковскиеСчета"),Новый Структура("Владелец",Владелец));
	
	Если БанковскийСчетСсылка = Неопределено Тогда
		БанковскийСчетОбъект = Справочники.БанковскиеСчета.СоздатьЭлемент();
		БанковскийСчетОбъект.УстановитьСсылкуНового(Справочники.БанковскиеСчета.ПолучитьСсылку());
		ЗаписатьИдентификаторВРегистр(БанковскийСчетОбъект.ПолучитьСсылкуНового(), структураОбъект.УИД);		
		БанковскийСчетОбъект.Владелец = Владелец;
	Иначе
		Если НЕ структураОбъект.ОбъектИзменен Тогда
			Возврат;
		КонецЕсли;
		БанковскийСчетОбъект = БанковскийСчетСсылка.ПолучитьОбъект();			
	КонецЕсли;
		
	БанковскийСчетОбъект.ОбменДанными.Загрузка = Истина;
		
	ЗаполнитьЗначенияСвойств(БанковскийСчетОбъект, структураОбъект);
	
	Если ЗначениеЗаполнено(структураОбъект.СчетБанк) Тогда
		БанковскийСчетОбъект.СчетБанк = ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора", структураОбъект.СчетБанк);
	КонецЕсли;	

	Если УИДЗаполнен(структураОбъект.Банк) Тогда
		БанковскийСчетОбъект.Банк = НайтиОбъектПоИдентификаторуНов(структураОбъект.Банк);
		Если Не ЗначениеЗаполнено(БанковскийСчетОбъект.Банк) Тогда
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОбъект.УИД, структураОбъект.Банк, "Банк", XmlТипЗнч(БанковскийСчетОбъект.Банк).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);			
		КонецЕсли;	
	Иначе
		БанковскийСчетОбъект.Банк = Справочники.Банки.ПустаяСсылка();	
	КонецЕсли;	
	
	Если УИДЗаполнен(структураОбъект.ВалютаДенежныхСредств) Тогда
		БанковскийСчетОбъект.ВалютаДенежныхСредств = НайтиОбъектПоИдентификаторуНов(структураОбъект.ВалютаДенежныхСредств);
		Если Не ЗначениеЗаполнено(БанковскийСчетОбъект.ВалютаДенежныхСредств) Тогда
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОбъект.УИД, структураОбъект.ВалютаДенежныхСредств, "ВалютаДенежныхСредств", XmlТипЗнч(БанковскийСчетОбъект.ВалютаДенежныхСредств).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);			
		КонецЕсли;
	Иначе
		БанковскийСчетОбъект.ВалютаДенежныхСредств = Справочники.Валюты.ПустаяСсылка();
	КонецЕсли;	
	
	Если УИДЗаполнен(структураОбъект.БанкДляРасчетов) Тогда
		БанковскийСчетОбъект.БанкДляРасчетов = НайтиОбъектПоИдентификаторуНов(структураОбъект.БанкДляРасчетов);
		Если Не ЗначениеЗаполнено(БанковскийСчетОбъект.БанкДляРасчетов) Тогда
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОбъект.УИД, структураОбъект.БанкДляРасчетов, "БанкДляРасчетов", XmlТипЗнч(БанковскийСчетОбъект.БанкДляРасчетов).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);			
		КонецЕсли;	
	Иначе
		БанковскийСчетОбъект.БанкДляРасчетов = Справочники.Банки.ПустаяСсылка();		
	КонецЕсли;
		
	БанковскийСчетОбъект.Записать();

КонецПроцедуры

Функция ОпределитьВидКонтактнойИнформации(ИсходныйВидКИ)

	ВозвращаемыйВидКИ = Неопределено;
	
	Если ИсходныйВидКИ = "ТелефонКонтактногоЛица" Тогда
		Возврат Справочники.ВидыКонтактнойИнформации.ТелефонРабочийКонтактныеЛица;
	ИначеЕсли ИсходныйВидКИ = "МобильныйТелефонКонтактногоЛица" Тогда
		Возврат Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйКонтактныеЛица;
	ИначеЕсли ИсходныйВидКИ = "EmailКонтактногоЛица" Тогда
		Возврат Справочники.ВидыКонтактнойИнформации.EmailКонтактныеЛица;
	ИначеЕсли ИсходныйВидКИ = "EmailКонтрагента" Тогда
		Возврат Справочники.ВидыКонтактнойИнформации.EmailКонтрагенты;
	ИначеЕсли ИсходныйВидКИ = "ТелефонКонтрагента" Тогда
		Возврат Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
	ИначеЕсли ИсходныйВидКИ = "ФаксКонтрагенты" Тогда
		Возврат Справочники.ВидыКонтактнойИнформации.ФаксКонтрагенты;
	ИначеЕсли ИсходныйВидКИ = "ЮрАдресКонтрагента" Тогда
		Возврат Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
	ИначеЕсли ИсходныйВидКИ = "ФактАдресКонтрагента" Тогда
		Возврат Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
	ИначеЕсли ИсходныйВидКИ = "ПочтовыйАдресКонтрагента" Тогда
		Возврат Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента;
	ИначеЕсли ИсходныйВидКИ = "ДругаяИнформацияКонтрагенты" Тогда
		Возврат Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтрагенты;
	ИначеЕсли ИсходныйВидКИ = "EmailОрганизации" Тогда
		Возврат Справочники.ВидыКонтактнойИнформации.EmailОрганизации;
	ИначеЕсли ИсходныйВидКИ = "ТелефонОрганизации" Тогда
		Возврат Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации;
	ИначеЕсли ИсходныйВидКИ = "ФаксОрганизации" Тогда
		Возврат Справочники.ВидыКонтактнойИнформации.ФаксОрганизации;
	ИначеЕсли ИсходныйВидКИ = "ЮрАдресОрганизации" Тогда
		Возврат Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
	ИначеЕсли ИсходныйВидКИ = "ФактАдресОрганизации" Тогда
		Возврат Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
	ИначеЕсли ИсходныйВидКИ = "ПочтовыйАдресОрганизации" Тогда
		Возврат Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации;
	ИначеЕсли ИсходныйВидКИ = "ДругаяИнформацияОрганизации" Тогда
		Возврат Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияОрганизации;
	ИначеЕсли ИсходныйВидКИ = "ТелефонПользователя" Тогда
		Возврат Справочники.ВидыКонтактнойИнформации.ТелефонПользователя;
	ИначеЕсли ИсходныйВидКИ = "EmailПользователя" Тогда
		Возврат Справочники.ВидыКонтактнойИнформации.EmailПользователя; 
	ИначеЕсли ИсходныйВидКИ = "EMailФизическиеЛица" Тогда
		Возврат Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица;
	ИначеЕсли ИсходныйВидКИ = "ТелефонРабочийФизическиеЛица" Тогда
		Возврат Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица;
	ИначеЕсли ИсходныйВидКИ = "ТелефонМобильныйФизическиеЛица" Тогда
		Возврат Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица;
	ИначеЕсли ИсходныйВидКИ = "АдресЗаПределамиРФФизическиеЛица" Тогда
		Возврат Справочники.ВидыКонтактнойИнформации.АдресЗаПределамиРФФизическиеЛица;
	ИначеЕсли ИсходныйВидКИ = "ТелефонДомашнийФизическиеЛица" Тогда
		Возврат Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица;
	ИначеЕсли ИсходныйВидКИ = "АдресПоПропискеФизическиеЛица" Тогда
		Возврат Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица;
	ИначеЕсли ИсходныйВидКИ = "АдресМестаПроживанияФизическиеЛица" Тогда
		Возврат Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица;
	ИначеЕсли ИсходныйВидКИ = "АдресДляИнформированияФизическиеЛица" Тогда
		Возврат Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияФизическиеЛица;
	//добавить при необходимсоти виды КИ под другие объекты
	КонецЕсли;

	Возврат ВозвращаемыйВидКИ;
	
КонецФункции	

#КонецОбласти

#Область ЗагрузкаДокументов  

//!!!! везде на поисках объектов по УИД если не нашли объект, добавлять в массив запращиваемых
//!!!! по окончании загрузки, если массив запрашиваемых не пустой и транзакция активна - отменяем её и отправляем в ответе массиив 

Процедура ЗагрузитьАвансовыйОтчет(структураАвансовыйОтчет, ОписаниеОшибок, ЗапрашиваемыеОбъекты)

	АвансовыйОтчетСсылка = НайтиОбъектПоИдентификаторуНов(структураАвансовыйОтчет.УИД);
	Если АвансовыйОтчетСсылка <> Неопределено И ОбщегоНазначения.СсылкаСуществует(АвансовыйОтчетСсылка) Тогда
		Если Не структураАвансовыйОтчет.ОбъектИзменен Тогда
			Возврат;
		КонецЕсли;	
		АвансовыйОтчетОбъект = АвансовыйОтчетСсылка.ПолучитьОбъект();		
	Иначе
		АвансовыйОтчетОбъект = Документы.АвансовыйОтчет.СоздатьДокумент();
		АвансовыйОтчетОбъект.УстановитьСсылкуНового(Документы.АвансовыйОтчет.ПолучитьСсылку());	
		ЗаписатьИдентификаторВРегистр(АвансовыйОтчетОбъект.ПолучитьСсылкуНового(), структураАвансовыйОтчет.УИД);
	КонецЕсли;	

	АвансовыйОтчетОбъект.ВыданныеАвансы.Очистить();	
	АвансовыйОтчетОбъект.Товары.Очистить();
	АвансовыйОтчетОбъект.ВозвратнаяТара.Очистить();
	АвансовыйОтчетОбъект.ОплатаПоставщикам.Очистить();
	АвансовыйОтчетОбъект.Прочее.Очистить();
	АвансовыйОтчетОбъект.Билеты.Очистить();
	АвансовыйОтчетОбъект.Суточные.Очистить();

	АвансовыйОтчетОбъект.Номер = структураАвансовыйОтчет.Номер;
	АвансовыйОтчетОбъект.Дата = структураАвансовыйОтчет.Дата;
	АвансовыйОтчетОбъект.ПометкаУдаления = структураАвансовыйОтчет.ПометкаУдаления;
	
	АвансовыйОтчетОбъект.ВалютаДокумента = НайтиОбъектПоИдентификатору(структураАвансовыйОтчет.Валюта, Истина); //!!
	АвансовыйОтчетОбъект.Комментарий = структураАвансовыйОтчет.Комментарий; //!! нужно ди представление выгружаемого объекта
	АвансовыйОтчетОбъект.КурсДокумента = 1;//!!
	АвансовыйОтчетОбъект.КратностьДокумента = 1;//!!
	АвансовыйОтчетОбъект.Организация = НайтиОрганизацию(НайтиОбъектПоИдентификатору(структураАвансовыйОтчет.Организация));
//	АвансовыйОтчетОбъект.Склад = НайтиОбъектПоИдентификатору(структураАвансовыйОтчет.Склад, Истина);  //!!!
	АвансовыйОтчетОбъект.СуммаВключаетНДС = структураАвансовыйОтчет.ЦенаВключаетНДС;
	//АвансовыйОтчетОбъект.СуммаДокумента = структураАвансовыйОтчет.СуммаДокумента;
	АвансовыйОтчетОбъект.ФизЛицо = НайтиОбъектПоИдентификатору(структураАвансовыйОтчет.ПодотчетноеЛицо, Истина);
	АвансовыйОтчетОбъект.Ответственный = НайтиОбъектПоИдентификатору(структураАвансовыйОтчет.Автор, Истина);
	АвансовыйОтчетОбъект.НДСВключенВСтоимость = структураАвансовыйОтчет.ЦенаВключаетНДС;
	АвансовыйОтчетОбъект.НазначениеАванса = структураАвансовыйОтчет.НазначениеАванса;
	АвансовыйОтчетОбъект.КоличествоДокументов = структураАвансовыйОтчет.КоличествоДокументов;
	АвансовыйОтчетОбъект.КоличествоЛистов = структураАвансовыйОтчет.КоличествоЛистов;
	АвансовыйОтчетОбъект.ПодразделениеОрганизации = НайтиОбъектПоИдентификатору(структураАвансовыйОтчет.Подразделение, Истина); ///!!!!
	АвансовыйОтчетОбъект.НДСНеВыделять = структураАвансовыйОтчет.ЦенаВключаетНДС;
	//АвансовыйОтчет.СчетЗатрат =
	//АвансовыйОтчет.ПодразделениеЗатрат =
	//АвансовыйОтчет.Субконто1 =
	//АвансовыйОтчет.Субконто2 =
	//АвансовыйОтчет.Субконто3 =	
	//АвансовыйОтчет.КурсРассчитывается =
	
	//Если структураАвансовыйОтчет.ЭтоКомандировочные Тогда
		//!! возможно учёт именно командировочных не нужен - достаточных данных по командировке в ERP нет, а проводки одинаковы формируются
		//АвансовыйОтчет.ВидОперации = Перечисления.ВидыОперацийАвансовыйОтчет.Командировка;
		//АвансовыйОтчет.ДатаНачалаКомандировки //!!
		//АвансовыйОтчет.ДатаОкончанияКомандировки	//!!
	//	
	//	
	//Иначе

	АвансовыйОтчетОбъект.ВидОперации = Перечисления.ВидыОперацийАвансовыйОтчет.ПокупкаОплатаПрочее;	
	
	Для Каждого Стр Из структураАвансовыйОтчет.ОплатаПоставщикам Цикл
		
		НСтр = АвансовыйОтчетОбъект.ОплатаПоставщикам.Добавить();
		НСтр.Контрагент = НайтиКонтрагента(НайтиОбъектПоИдентификатору(Стр.Контрагент, Истина)); //!!
		НСтр.ДоговорКонтрагента = НайтиОбъектПоИдентификатору(Стр.Договор, Истина);//!! в erp вытаскивать с ОбъектРасчетов.Объект.Договор или ОбъектРасчетов.Объект (если объект = договор)
		//!! запрос договора, если он заполнен
		НСтр.Сумма = Стр.Сумма;
		//НСтр.Содержание = Стр.Комментарий;
		НСтр.КурсВзаиморасчетов = АвансовыйОтчетОбъект.КурсДокумента;
		НСтр.КратностьВзаиморасчетов = АвансовыйОтчетОбъект.КратностьДокумента;
		НСтр.СуммаВзаиморасчетов = НСтр.Сумма;
		НСтр.ВидДокВходящий = Стр.НаименованиеВходящегоДокумента;
		НСтр.ДатаВходящегоДокумента = Стр.ДатаВходящегоДокумента;
		НСтр.НомерВходящегоДокумента = Стр.НомерВходящегоДокумента;
		НСтр.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически; //!! или ПоДокументу
		
	КонецЦикла;	
	
	Для Каждого Стр Из структураАвансовыйОтчет.ПрочиеРасходы Цикл
		
		НСтр = АвансовыйОтчетОбъект.Прочее.Добавить();
		НСтр.ВидДокВходящий = Стр.НаименованиеВходящегоДокумента;
		НСтр.ДатаВходящегоДокумента = Стр.ДатаВходящегоДокумента;
		НСтр.НомерВходящегоДокумента = Стр.НомерВходящегоДокумента;
		НСтр.Сумма = Стр.СуммаСНДС; //!!
		НСтр.СтавкаНДС = Перечисления.СтавкиНДС[Стр.СтавкаНДС]; //!! передавать текстом соотвестсвующее имя элемента
		//НСтр.Содержание = Стр.Комментарий;
		НСтр.Содержание = "-";
        НСтр.ПодразделениеЗатрат = АвансовыйОтчетОбъект.ПодразделениеОрганизации;
		//НСтр.СчетЗатрат = ПланыСчетов.Хозрасчетный.НайтиПоКоду(Стр.Счет); //!!РегистрыСведений.ПорядокОтраженияНаСчетахУчета.СтруктураЗначенийПоАналитикеУчета(АналитикаУчета, СчетаУчета);
		НСтр.СчетЗатрат = ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора", Стр.Счет); //!!РегистрыСведений.ПорядокОтраженияНаСчетахУчета.СтруктураЗначенийПоАналитикеУчета(АналитикаУчета, СчетаУчета);
		//   
		//ЧТО ТУТ?
		//НСтр.Субконто1 = ????; 
		//НСтр.СубконтоНУ1 = ????; 
		//--ЧТО ТУТ?
		//
		//где АналитикаУчета = СтатьяРасходов.ГруппаФинансовогоУчетаРегл, СчетаУчета = Новый Массив(); СчетаУчета.Добавить("Расходы")
		//!! для кассы АналитикаУчета = Касса, СчетаУчета = Новый Массив(); СчетаУчета.Добавить("ДенежныеСредства")
		//
		НСтр.СчетЗатратНУ = НСтр.СчетЗатрат;

	КонецЦикла;
	
	//!!
	Для Каждого Стр Из структураАвансовыйОтчет.Товары Цикл	
		
	КонецЦикла;	
		
		//!!
		//Заполнение авансов?!
	//КонецЕсли;
	
	Попытка
		Если структураАвансовыйОтчет.Проведен Тогда
			Попытка
				АвансовыйОтчетОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				АвансовыйОтчетОбъект.Записать(РежимЗаписиДокумента.Запись); 
				//
				//ОписаниеОшибок = "Не удалось провести документ " + Строка(АвансовыйОтчетОбъект.Ссылка) + ". Документ был просто записан"; 
				ОписаниеОшибок.errorCodeObj = 604;
				ОписаниеОшибок.errorObj = структураАвансовыйОтчет.Представление + " (" + структураАвансовыйОтчет.УИД + ")";
				ОписаниеОшибок.errorDescriptionObj = "Не удалось провести документ " + Строка(АвансовыйОтчетОбъект.Ссылка) + ". Документ был просто записан"; 
				
			КонецПопытки;			
		ИначеЕсли НЕ структураАвансовыйОтчет.Проведен И АвансовыйОтчетОбъект.Проведен Тогда
			АвансовыйОтчетОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе
			АвансовыйОтчетОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
						
	Исключение  
		//
		//ОписаниеОшибок = ОписаниеОшибки();
		ОписаниеОшибок.errorCodeObj = 605; 
		ОписаниеОшибок.errorObj = структураАвансовыйОтчет.Представление + " (" + структураАвансовыйОтчет.УИД + ")";
		ОписаниеОшибок.errorDescriptionObj = ОписаниеОшибки(); 
		
		//Возврат Неопределено;
	КонецПопытки;
	
	//Возврат АвансовыйОтчетОбъект.Ссылка; //!! нужно ли что-то возвращать и делать ли вообще выгруку через функцию
	
КонецПроцедуры	

Процедура ЗагрузитьРеализацию(структураРеализация, ОписаниеОшибок, ЗапрашиваемыеОбъекты)
	
	//  настройкиЗагрузки = ПолучитьВнешнююНастройку("НастройкиЗагрузкиДокументовИзУТ");
	//
	//структураОбязательныхПараметров = Новый Структура("Номер,Дата,Представление,Контрагент,Склад,Ответственный,Проведен,ПометкаУдаления,Товары"
	//	,"Строка","Дата","Строка","Строка","Строка","Строка","Булево","Булево"
	//	,Новый Структура("Номенклатура,Количество,Цена,Сумма,СуммаНДС","Строка","Число","Число","Число","Число"));
	//ОписаниеОшибок = "";
	//ПроверитьЗаполненностьОбязательныхПараметров(структураРеализация,структураОбязательныхПараметров,ОписаниеОшибок);
	//		
	//Если ЗначениеЗаполнено(ОписаниеОшибок) Тогда	
	//	Возврат Неопределено;	
	//КонецЕсли;
	//
	//	
	//Шаблон = ДатыЗапретаИзменения.ШаблонДанныхДляПроверки();
	//новСтр = Шаблон.Добавить();
	//новСтр.Дата = структураРеализация.Дата;
	//Если ДатыЗапретаИзменения.НайденЗапретИзмененияДанных(Шаблон) Тогда
	//	ОписаниеОшибок = "Невозможно выгрузить документ закрытого периода в базу ""Бухгалтерия""";
	//	Возврат Неопределено;
	//КонецЕсли;
	
	Реализации = НайтиОбъектПоИдентификатору(структураРеализация.УИД);
	Если Реализации <> Неопределено Тогда
		//Если ДокументЗапрещеноИзменять(Реализация) Тогда
		//	ОписаниеОшибок = "Документ найден, но в базе ""Бухгалтерия"" установлен запрет на его изменение";
		//	Возврат Реализация;
		//КонецЕсли; 
		мсвРеализаций = Реализации.ВыгрузитьКолонку("Ссылка");
		Если Не структураРеализация.ОбъектИзменен Тогда
			НужноОбновить = Ложь;
			Для Каждого Реал Из мсвРеализаций Цикл
				Если Не ОбщегоНазначения.СсылкаСуществует(Реал) Тогда
					НужноОбновить = Истина;
					Прервать;
				КонецЕсли;	               
			КонецЦикла;	                   
			Если Не НужноОбновить Тогда
				//Возврат мсвРеализаций;
				Возврат;
			КонецЕсли;	
		КонецЕсли;	
		//РеализацияОбъект = Реализация.ПолучитьОбъект();	//!!	
	Иначе
		//РеализацияОбъект = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
		//РеализацияОбъект.УстановитьСсылкуНового(Документы.РеализацияТоваровУслуг.ПолучитьСсылку());	
		//ЗаписатьИдентификаторВРегистр(РеализацияОбъект.ПолучитьСсылкуНового(),структураРеализация.УИД); 
		мсвРеализаций = Новый Массив;
	КонецЕсли;

	Организация = НайтиОрганизацию(НайтиОбъектПоИдентификатору(структураРеализация.Организация));	
	ПодразделениеОрганизации = Неопределено;
	Контрагент = Неопределено;
	ДоговорКонтрагента = Неопределено; 
	ВалютаДокумента = НайтиОбъектПоИдентификатору(структураРеализация.Валюта, Истина);
	Комиссия = ?(структураРеализация.ХозОперация = "ПередачаНаКомиссию", Истина, Ложь);
	
	Если УИДЗаполнен(структураРеализация.Подразделение) Тогда
		//РеализацияОбъект.ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию(структураРеализация.Подразделение,Истина);
		Подразделения = НайтиОбъектПоИдентификатору(структураРеализация.Подразделение);
		Для Каждого Стр Из Подразделения Цикл
			Если Стр.Ссылка.Владелец = Организация Тогда
				ПодразделениеОрганизации = Стр.Ссылка;
				Прервать;
			КонецЕсли;	
        КонецЦикла;
	КонецЕсли;	

	Если УИДЗаполнен(структураРеализация.Контрагент) Тогда
		Контрагент = НайтиКонтрагента(НайтиОбъектПоИдентификатору(структураРеализация.Контрагент));	
	КонецЕсли;	
	
	Если УИДЗаполнен(структураРеализация.ДоговорКонтрагента) Тогда
		ДоговорКонтрагента = НайтиОбъектПоИдентификатору(структураРеализация.Договор, Истина);
	Иначе                                                                                                     
		ПараметрыДоговора = Новый Структура;
		ПараметрыДоговора.Вставить("ВидДоговора", ?(Комиссия, "СКомиссионером", "СПокупателем")); // или с поставщиком, если для поступлений
		ПараметрыДоговора.Вставить("Валюта", ВалютаДокумента); 
		Если Комиссия Тогда
			//!! вставить условия комиссонного договора, брать из соглашения
			//ПараметрыДоговора.Вставить("
		КонецЕсли;	
		ДоговорКонтрагента = НайтиСоздатьОсновнойДоговорКонтрагента(Организация, Контрагент, ПараметрыДоговора);
	КонецЕсли;	
		
	сч = 0;
	
	Для Каждого ТоварыПоСкладу из структураРеализация.ТоварыПоСкладам Цикл
		
		Склад = НайтиОбъектПоИдентификатору(ТоварыПоСкладу.Склад, Истина);
		
		РеализацияОбъект = Неопределено;
		//НадоДобавитьЗаписьВРегистр = Ложь;
		
		Для Каждого Реал Из мсвРеализаций Цикл
			
			Если Реал.Склад = Склад ИЛИ (Реал.Склад = Справочники.Склады.ПустаяСсылка() И Склад = Неопределено) Тогда
				РеализацияОбъект = Реал.ПолучитьОбъект();
				Прервать;
			КонецЕсли;		
			
		КонецЦикла;	
		
		Если РеализацияОбъект = Неопределено Тогда
			РеализацияОбъект = Документы.РеализацияТоваровУслуг.СоздатьДокумент();                          
			//НадоДобавитьЗаписьВРегистр = Истина;
			РеализацияОбъект.УстановитьСсылкуНового(Документы.РеализацияТоваровУслуг.ПолучитьСсылку());	//!!
			ЗаписатьИдентификаторВРегистр(РеализацияОбъект.ПолучитьСсылкуНового(),структураРеализация.УИД);
			РеализацияОбъект.Склад = Склад;
		КонецЕсли;	
			
		РеализацияОбъект.Номер = СтрЗаменить(структураРеализация.Номер, "00-", "-") + ?(Сч=0, "", "/" + Сч); //предполагается, что сч будет не больше 9
		РеализацияОбъект.Дата = структураРеализация.Дата;
		РеализацияОбъект.ПометкаУдаления = структураРеализация.ПометкаУдаления;
		РеализацияОбъект.ВалютаДокумента = ВалютаДокумента;
				
		РеализацияОбъект.ПодразделениеОрганизации = ПодразделениеОрганизации;
		РеализацияОбъект.Организация = Организация;
		РеализацияОбъект.Контрагент = Контрагент;
		РеализацияОбъект.ДоговорКонтрагента = ДоговорКонтрагента;
		
		//РеализацияОбъект.ДоговорКонтрагента = НайтиСоздатьДоговор(Контрагент,Организация,Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
						
		РеализацияОбъект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
		РеализацияОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора", структураРеализация.СчетУчетаРасчетовСКонтрагентом); 
		РеализацияОбъект.СчетУчетаРасчетовПоАвансам = ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора", структураРеализация.РасчетыПоАвансамПолученным);
		РеализацияОбъект.Ответственный = Справочники.Пользователи.НайтиПоНаименованию(структураРеализация.Ответственный); //!!
		
		Если структураРеализация.Свойство("ЦенаВключаетНДС") Тогда
			РеализацияОбъект.СуммаВключаетНДС = структураРеализация.ЦенаВключаетНДС;
		Иначе
			РеализацияОбъект.СуммаВключаетНДС = Истина;
		КонецЕсли;	
		
		//!!
		//Если настройкиЗагрузки.Свойство("ДокументБезНДС") И ТипЗнч(настройкиЗагрузки.ДокументБезНДС) = Тип("Булево") Тогда
		//	РеализацияОбъект.ДокументБезНДС = настройкиЗагрузки.ДокументБезНДС;
		//КонецЕсли;	
		////Притула Р.В. Конец  01.02.2021
		
		//РеализацияОбъект.Комментарий = "#Загружен из УТ. " + структураРеализация.Представление;
		РеализацияОбъект.Комментарий = СформироватьКомментарий(РеализацияОбъект.Комментарий, "#Загружен из УТ. " + структураРеализация.Представление); 
		
		РеализацияОбъект.ПометкаУдаления = структураРеализация.ПометкаУдаления;
		
		РеализацияОбъект.Товары.Очистить();
		РеализацияОбъект.Услуги.Очистить();
		
		ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(РеализацияОбъект.Организация, РеализацияОбъект.Дата);
		СтавкаНДС = УчетНДСКлиентСервер.СтавкаНДСПоУмолчанию(РеализацияОбъект.Дата, ПлательщикНДС);
		
		ЕстьТовары = Ложь;
		ЕстьУслуги = Ложь;
		
		Для Каждого стрТовар Из ТоварыПоСкладу.Товары Цикл
							
			Номенклатура = НайтиОбъектПоИдентификатору(стрТовар.Номенклатура);
			
			Если Номенклатура.Услуга Тогда
				новСтрТовары = РеализацияОбъект.Услуги.Добавить();
				ЕстьУслуги = Истина;
			Иначе	
				новСтрТовары = РеализацияОбъект.Товары.Добавить();
				ЕстьТовары = Истина;
			КонецЕсли;	
			
			Если ЗначениеЗаполнено(Номенклатура) Тогда
				новСтрТовары.Номенклатура = Номенклатура;
			Иначе	
				ОписаниеОшибок = ?(ЗначениеЗаполнено(ОписаниеОшибок),ОписаниеОшибок + Символы.ПС,"") + 
				"Не найдена номенклатура с идентификатором " + стрТовар.Номенклатура;
			КонецЕсли;
			
			новСтрТовары.Количество = стрТовар.Количество;
			новСтрТовары.Цена = стрТовар.Цена;
			новСтрТовары.Сумма = стрТовар.Сумма;
			новСтрТовары.СтавкаНДС = СтавкаНДС;
			новСтрТовары.СуммаНДС = стрТовар.СуммаНДС;
			
			новСтрТовары.СчетДоходов = ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД;
			новСтрТовары.СчетУчетаНДСПоРеализации = ПланыСчетов.Хозрасчетный.Продажи_НДС;
			новСтрТовары.СчетРасходов = ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД;		
			Если Не Номенклатура.Услуга Тогда
				новСтрТовары.СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыНаСкладах;
				
				КорректныйГТД = ПроверкаГТД(стрТовар.НомерГТД, стрТовар.СтранаПроисхождения);
						
				Если КорректныйГТД И ЗначениеЗаполнено(стрТовар.НомерГТД) Тогда
					
					НомерГТД = Справочники.НомераГТД.НайтиПоКоду(стрТовар.НомерГТД);
					Если НомерГТД.Пустая() Тогда
						
						НомерГТДОбъект = Справочники.НомераГТД.СоздатьЭлемент();
						НомерГТДОбъект.Код = стрТовар.НомерГТД;
						НомерГТДОбъект.Записать();
						НомерГТД = НомерГТДОбъект.Ссылка;
						
					КонецЕсли;
					
					новСтрТовары.НомерГТД = НомерГТД;
				КонецЕсли;
				
				Если КорректныйГТД И ЗначениеЗаполнено(стрТовар.НомерГТД) И ЗначениеЗаполнено(стрТовар.СтранаПроисхождения) Тогда
					Страна = Справочники.СтраныМира.НайтиПоНаименованию(стрТовар.СтранаПроисхождения);
					Если Страна.Пустая() Тогда
						СтранаОбъект = Справочники.СтраныМира.СоздатьЭлемент();
						СтранаОбъект.Наименование = стрТовар.СтранаПроисхождения;
						СтранаОбъект.Код = "--";
						СтранаОбъект.Записать();
						Страна = СтранаОбъект.Ссылка;
					КонецЕсли;
					новСтрТовары.СтранаПроисхождения = Страна;				
				КонецЕсли;
							
			Иначе 
				новСтрТовары.Содержание = Номенклатура.НаименованиеПолное;
			КонецЕсли;
						
		КонецЦикла;
		
		
		
		Если ЕстьТовары и НЕ ЕстьУслуги Тогда
			РеализацияОбъект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Товары;
		ИначеЕсли ЕстьУслуги и НЕ ЕстьТовары Тогда
			РеализацияОбъект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Услуги;
		Иначе
			РеализацияОбъект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(ОписаниеОшибок) Тогда
			//Возврат Неопределено;
			Возврат;
		КонецЕсли;
		
		Попытка
			Если структураРеализация.Проведен Тогда
				Попытка
					РеализацияОбъект.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					РеализацияОбъект.Записать(РежимЗаписиДокумента.Запись);
					ОписаниеОшибок = "Не удалось провести документ " + Строка(РеализацияОбъект.Ссылка) + ". Документ был просто записан, необходимо запустить базу ПФ и разобраться почему документ не был проведен";
				КонецПопытки;
				
			ИначеЕсли НЕ структураРеализация.Проведен И РеализацияОбъект.Проведен Тогда
				РеализацияОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Иначе
				РеализацияОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли; 
			
			//Если НадоДобавитьЗаписьВРегистр Тогда
			//	ЗаписатьИдентификаторВРегистр(РеализацияОбъект.Ссылка, структураРеализация.УИД);
			//КонецЕсли;	
			
		Исключение
			ОписаниеОшибок = ОписаниеОшибки();
			//Возврат Неопределено;
		КонецПопытки;		
		
		//??!!
		//если будем выгружать счета и привязывать через них оплаты к реализациями, то должно формироваться при печати УПД как в ERP
		//Основание = "";
		//структураРеализация.Свойство("Основание", Основание);
		//Если ЗначениеЗаполнено(Основание) Тогда
		//	УстановитьЗначениеДопСведенияОбъекта(РеализацияОбъект.Ссылка, "ОснованиеПлатежа", Основание);
		//	ПривязатьПлатежиПоОснованию(РеализацияОбъект.Ссылка, Основание);
		//КонецЕсли;	
		
		//Возврат РеализацияОбъект.Ссылка;  
	
	КонецЦикла;

	//Возврат мсвРеализаций;
		
КонецПроцедуры

Процедура ЗагрузитьВозвратТоваровОтПокупателя(структураВозврат, ОписаниеОшибок, ЗапрашиваемыеОбъекты) 

	//Возврат товаров от клиента ТЗ00-000001 от 01.02.2021 12:00:00
	//Возврат товаров от клиента OИ00-000049 от 03.02.2021 23:59:59	
	//!! для этих возвратов сформировать двжения либо операцией, либо ручной корректировкой - в документах отгрузки более одного дока, в БП так не катит
	
	ВозвратОтПокупателяСсылка = НайтиОбъектПоИдентификатору(структураВозврат.УИД, Истина);
	Если ВозвратОтПокупателяСсылка <> Неопределено И ОбщегоНазначения.СсылкаСуществует(ВозвратОтПокупателяСсылка) Тогда
		Если Не структураВозврат.ОбъектИзменен Тогда
			//Объект есть в базе и по нему не зарегистрированы изменения
			Возврат;			
		КонецЕсли;	
		ВозвратОтПокупателяОбъект = ВозвратОтПокупателяСсылка.ПолучитьОбъект();		
	Иначе
		//!! надо ли?
		ВозвратОтПокупателяОбъект = Документы.ВозвратТоваровОтПокупателя.СоздатьДокумент();
		ВозвратОтПокупателяОбъект.УстановитьСсылкуНового(Документы.ВозвратТоваровОтПокупателя.ПолучитьСсылку());	
		ЗаписатьИдентификаторВРегистр(ВозвратОтПокупателяОбъект.ПолучитьСсылкуНового(), структураВозврат.УИД);
	КонецЕсли;	

	ВозвратОтПокупателяОбъект.Товары.Очистить();

	ВозвратОтПокупателяОбъект.Номер = структураВозврат.Номер;
	ВозвратОтПокупателяОбъект.Дата = структураВозврат.Дата;
	ВозвратОтПокупателяОбъект.ПометкаУдаления = структураВозврат.ПометкаУдаления;
	
	Организация = НайтиОрганизацию(НайтиОбъектПоИдентификатору(структураВозврат.Организация));	
	ПодразделениеОрганизации = Неопределено;
	Контрагент = Неопределено;
	ДоговорКонтрагента = Неопределено;
	Склад = Неопределено;
	
	ВалютаДокумента = НайтиОбъектПоИдентификатору(структураВозврат.Валюта, Истина);
	
	Комиссия = ?(структураВозврат.ХозОперация = "ПередачаНаКомиссию", Истина, Ложь);
	
	Если УИДЗаполнен(структураВозврат.Подразделение) Тогда
		Подразделения = НайтиОбъектПоИдентификатору(структураВозврат.Подразделение);
		Для Каждого Стр Из Подразделения Цикл
			Если Стр.Ссылка.Владелец = Организация Тогда
				ПодразделениеОрганизации = Стр.Ссылка;
				Прервать;
			КонецЕсли;	
        КонецЦикла;
	КонецЕсли;	

	Если УИДЗаполнен(структураВозврат.Контрагент) Тогда
		Контрагент = НайтиКонтрагента(НайтиОбъектПоИдентификатору(структураВозврат.Контрагент));	
	КонецЕсли;	
	
	Если УИДЗаполнен(структураВозврат.ДоговорКонтрагента) Тогда
		ДоговорКонтрагента = НайтиОбъектПоИдентификатору(структураВозврат.Договор, Истина);
	Иначе                                                                                                     
		ПараметрыДоговора = Новый Структура;
		ПараметрыДоговора.Вставить("ВидДоговора", ?(Комиссия, "СКомиссионером", "СПокупателем")); // или с поставщиком, если для поступлений
		ПараметрыДоговора.Вставить("Валюта", ВалютаДокумента); 
		Если Комиссия Тогда
			//!! вставить условия комиссионного договора, брать из соглашения
			//ПараметрыДоговора.Вставить("
		КонецЕсли;	
		ДоговорКонтрагента = НайтиСоздатьОсновнойДоговорКонтрагента(Организация, Контрагент, ПараметрыДоговора);
	КонецЕсли;

	Если УИДЗаполнен(структураВозврат.Склад) Тогда
		Склад = НайтиОбъектПоИдентификатору(структураВозврат.Склад, Истина);
	КонецЕсли;	
		
	ВозвратОтПокупателяОбъект.Организация = Организация;
	ВозвратОтПокупателяОбъект.ПодразделениеОрганизации = ПодразделениеОрганизации;
	ВозвратОтПокупателяОбъект.Контрагент = Контрагент;
	ВозвратОтПокупателяОбъект.ДоговорКонтрагента = ДоговорКонтрагента;
	ВозвратОтПокупателяОбъект.Склад = Склад;
    //ВозвратОтПокупателяОбъект.Комментарий = структураВозврат.Комментарий + Символы.ПС + структураВозврат.Представление; //!! здесь и у всех других документов - нужно ли сохранять комментарий, который есть в БП
	
	//ВозвратТоваровОтПокупателя.ВидОперации КАК ВидОперации,
	////Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.Товары; // если от покупателя
	////Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ОтгруженныеТовары; // если от комиссионера
	////Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.Оборудование; //вроде не нужно вообще

	//ВозвратТоваровОтПокупателя.ДеятельностьНаПатенте //!!
	//ВозвратТоваровОтПокупателя.Патент //!!
  	//ВозвратТоваровОтПокупателя.Сделка // !!

	ВозвратОтПокупателяОбъект.СуммаВключаетНДС = структураВозврат.ЦенаВключаетНДС;
	//ВозвратОтПокупателяОбъект.СуммаДокумента КАК СуммаДокумента, //!!?? посчитать, как сумму по товарам или записать как есть в erp?
	ВозвратОтПокупателяОбъект.ВалютаДокумента = ВалютаДокумента;
	ВозвратОтПокупателяОбъект.КурсВзаиморасчетов = структураВозврат.структураВозврат;
	ВозвратОтПокупателяОбъект.КратностьВзаиморасчетов = структураВозврат.КратностьВзаиморасчетов;
	
	//!! счета учёта, скорее всего, отличаются для разных видом операций
	//ВозвратОтПокупателяОбъект.СчетУчетаРасчетовСКонтрагентом 
	//ВозвратОтПокупателяОбъект.СчетУчетаРасчетовПоАвансам 
	//ВозвратОтПокупателяОбъект.СчетУчетаРасчетовПоТаре
	//ВозвратОтПокупателяОбъект.СчетУчетаНДС
	
	//ВозвратОтПокупателяОбъект.ОтразитьВКнигеПокупок //!!??
	//ВозвратОтПокупателяОбъект.ПокупателемВыставляетсяСчетФактураНаВозврат //!!
	//ВозвратОтПокупателяОбъект.ПокупателюВыставляетсяКорректировочныйСчетФактура//!!
	
	Если УИДЗаполнен(структураВозврат.ДокументРеализации) Тогда
		ВозвратОтПокупателяОбъект = НайтиОбъектПоИдентификатору(структураВозврат.ДокументРеализации, Истина); 	
		//!! учесть 2 момента
		//1. реализации с нескольких складов
		//2. передачи товаров, которые будут грузиться как реализация + поступление
	КонецЕсли;	
	
	Если УИДЗаполнен(структураВозврат.Менеджер) Тогда
		ВозвратОтПокупателяОбъект.Ответственный = НайтиОбъектПоИдентификатору(структураВозврат.Менеджер, Истина);
		//Если НЕ ЗначениеЗаполнено(ВозвратТоваровОтПокупателя.Ответственный) Тогда
		////Запросить 	
		//КонецЕсли;
	КонецЕсли;	
	
	
	
	Для Каждого Стр Из структураВозврат.Товары Цикл
		//!!!!
	КонецЦикла;	
	
	
КонецПроцедуры	

Процедура ЗагрузитьОприходованиеТоваров(структураОприходование, ОписаниеОшибок, ЗапрашиваемыеОбъекты)
	
	НадоДобавитьЗаписьВРегистр = Ложь;
	ОприходованиеТоваровСсылка = НайтиОбъектПоИдентификатору(структураОприходование.УИД, Истина);
	Если ОприходованиеТоваровСсылка <> Неопределено И ОбщегоНазначения.СсылкаСуществует(ОприходованиеТоваровСсылка) Тогда
		Если Не структураОприходование.ОбъектИзменен Тогда
			//Объект есть в базе и по нему не зарегистрированы изменения
			Возврат;			
		КонецЕсли;	
		ОприходованиеТоваровОбъект = ОприходованиеТоваровСсылка.ПолучитьОбъект();		
	Иначе
		ОприходованиеТоваровОбъект = Документы.ОприходованиеТоваров.СоздатьДокумент();
		НадоДобавитьЗаписьВРегистр = Истина;
	КонецЕсли;	

	ОприходованиеТоваровОбъект.Товары.Очистить();

	ОприходованиеТоваровОбъект.Номер = структураОприходование.Номер;
	ОприходованиеТоваровОбъект.Дата = структураОприходование.Дата;
	ОприходованиеТоваровОбъект.ПометкаУдаления = структураОприходование.ПометкаУдаления;
	
	Организация = НайтиОрганизацию(НайтиОбъектПоИдентификатору(структураОприходование.Организация));	
	ПодразделениеОрганизации = Неопределено;
	Склад = Неопределено;
	СтатьяПрочихДоходовРасходов = Неопределено;
		
	Если УИДЗаполнен(структураОприходование.Подразделение) Тогда
		Подразделения = НайтиОбъектПоИдентификатору(структураОприходование.Подразделение);
		Для Каждого Стр Из Подразделения Цикл
			Если Стр.Ссылка.Владелец = Организация Тогда
				ПодразделениеОрганизации = Стр.Ссылка;
				Прервать;
			КонецЕсли;	
		КонецЦикла;                  
		
		Если ПодразделениеОрганизации = Неопределено Тогда
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОприходование.УИД, структураОприходование.Подразделение, "Подразделение", XmlТипЗнч(ОприходованиеТоваровОбъект.ПодразделениеОрганизации).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);
		КонецЕсли;	
		
	КонецЕсли;	

	Если УИДЗаполнен(структураОприходование.Склад) Тогда
		Склад = НайтиОбъектПоИдентификатору(структураОприходование.Склад, Истина); 
		Если Склад = Неопределено Тогда
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОприходование.УИД, структураОприходование.Склад, "Склад", XmlТипЗнч(ОприходованиеТоваровОбъект.Склад).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);
		КонецЕсли;	
	КонецЕсли;
	
	Если УИДЗаполнен(структураОприходование.СтатьяДоходов) Тогда
		СтатьяПрочихДоходовРасходов = НайтиОбъектПоИдентификатору(структураОприходование.СтатьяДоходов, Истина); 
		Если СтатьяПрочихДоходовРасходов = Неопределено Тогда
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОприходование.УИД, структураОприходование.СтатьяДоходов, "СтатьяДоходов", XmlТипЗнч(ОприходованиеТоваровОбъект.СтатьяПрочихДоходовРасходов).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);
		КонецЕсли;	
	КонецЕсли;	

	ОприходованиеТоваровОбъект.Организация = Организация;
	ОприходованиеТоваровОбъект.Склад = Склад;
	ОприходованиеТоваровОбъект.ПодразделениеОрганизации = ПодразделениеОрганизации;
	ОприходованиеТоваровОбъект.СтатьяПрочихДоходовРасходов = СтатьяПрочихДоходовРасходов;
	ОприходованиеТоваровОбъект.Основание = структураОприходование.Основание;
	
	Для Каждого Стр Из структураОприходование.Товары Цикл	
		
		Нстр = ОприходованиеТоваровОбъект.Товары.Добавить();
		
		Если УИДЗаполнен(Стр.Номенклатура) Тогда
			Номенклатура = НайтиОбъектПоИдентификатору(Стр.Номенклатура, Истина);
			Если Номенклатура <> Неопределено Тогда
				Нстр.Номенклатура = Номенклатура;	
			Иначе
				СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОприходование.УИД, структураОприходование.Номенклатура, "Номенклатура", XmlТипЗнч(Нстр.Номенклатура).ИмяТипа);
				ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);
			КонецЕсли;					
		КонецЕсли;
		
		Нстр.Количество = Стр.Количество;
		Нстр.Сумма = Стр.Сумма;
		Нстр.Коэффициент = 1;
		Нстр.Цена = Нстр.Сумма/Нстр.Количество;
		//Нстр.Цена = Стр.Цена; //нужно высчитывать из суммы, т.к. может быть указана цена за упаковку
		
		Нстр.СчетУчета = ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора", Нстр.СчетУчета);
		
		ЗаполнитьНомерГТД(Нстр, Стр.НомерГТД, ЗапрашиваемыеОбъекты, структураОприходование.УИД);
		
	КонецЦикла;	
	
	Попытка
		Если структураОприходование.Проведен Тогда
			Попытка
				ОприходованиеТоваровОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ОприходованиеТоваровОбъект.Записать(РежимЗаписиДокумента.Запись); 
				ОписаниеОшибок.errorCodeObj = 604;
				ОписаниеОшибок.errorObj = структураОприходование.Представление + " (" + структураОприходование.УИД + ")";
				ОписаниеОшибок.errorDescriptionObj = "Не удалось провести документ " + Строка(ОприходованиеТоваровОбъект.Ссылка) + ". Документ был просто записан"; 
			КонецПопытки;			
		ИначеЕсли НЕ структураОприходование.Проведен И ОприходованиеТоваровОбъект.Проведен Тогда
			ОприходованиеТоваровОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе
			ОприходованиеТоваровОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
		
		Если НадоДобавитьЗаписьВРегистр Тогда
			ЗаписатьИдентификаторВРегистр(ОприходованиеТоваровОбъект.Ссылка, структураОприходование.УИД);
		КонецЕсли;	
		
	Исключение  
		ОписаниеОшибок.errorCodeObj = 605;
		ОписаниеОшибок.errorObj = структураОприходование.Представление + " (" + структураОприходование.УИД + ")";
		ОписаниеОшибок.errorDescriptionObj = ОписаниеОшибки(); 
	КонецПопытки;
	
КонецПроцедуры	

Процедура ЗагрузитьСписаниеНедостач(структураСписание, ОписаниеОшибок, ЗапрашиваемыеОбъекты)
	
	НадоДобавитьЗаписьВРегистр = Ложь;
	СписаниеТоваровСсылка = НайтиОбъектПоИдентификатору(структураСписание.УИД, Истина);
	Если СписаниеТоваровСсылка <> Неопределено И ОбщегоНазначения.СсылкаСуществует(СписаниеТоваровСсылка) Тогда
		Если Не структураСписание.ОбъектИзменен Тогда
			//Объект есть в базе и по нему не зарегистрированы изменения
			Возврат;			
		КонецЕсли;	
		СписаниеТоваровОбъект = СписаниеТоваровСсылка.ПолучитьОбъект();		
	Иначе
		СписаниеТоваровОбъект = Документы.СписаниеТоваров.СоздатьДокумент();
		НадоДобавитьЗаписьВРегистр = Истина;
	КонецЕсли;	

	СписаниеТоваровОбъект.Товары.Очистить();

	СписаниеТоваровОбъект.Номер = структураСписание.Номер;
	СписаниеТоваровОбъект.Дата = структураСписание.Дата;
	СписаниеТоваровОбъект.ПометкаУдаления = структураСписание.ПометкаУдаления;
	
	Организация = НайтиОрганизацию(НайтиОбъектПоИдентификатору(структураСписание.Организация));	
	ПодразделениеОрганизации = Неопределено;
	Склад = Неопределено;
	//СтатьяПрочихДоходовРасходов = Неопределено;//!!
		
	Если УИДЗаполнен(структураСписание.Подразделение) Тогда
		Подразделения = НайтиОбъектПоИдентификатору(структураСписание.Подразделение);
		Для Каждого Стр Из Подразделения Цикл
			Если Стр.Ссылка.Владелец = Организация Тогда
				ПодразделениеОрганизации = Стр.Ссылка;
				Прервать;
			КонецЕсли;	
		КонецЦикла;                  
		
		Если ПодразделениеОрганизации = Неопределено Тогда
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураСписание.УИД, структураСписание.Подразделение, "Подразделение", XmlТипЗнч(СписаниеТоваровОбъект.ПодразделениеОрганизации).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);
		КонецЕсли;	
		
	КонецЕсли;	

	Если УИДЗаполнен(структураСписание.Склад) Тогда
		Склад = НайтиОбъектПоИдентификатору(структураСписание.Склад, Истина); 
		Если Склад = Неопределено Тогда
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураСписание.УИД, структураСписание.Склад, "Склад", XmlТипЗнч(СписаниеТоваровОбъект.Склад).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);
		КонецЕсли;	
	КонецЕсли;
	
	Если УИДЗаполнен(структураСписание.СтатьяДоходов) Тогда
		СтатьяПрочихДоходовРасходов = НайтиОбъектПоИдентификатору(структураСписание.СтатьяДоходов, Истина); 
		Если СтатьяПрочихДоходовРасходов = Неопределено Тогда
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураСписание.УИД, структураСписание.СтатьяДоходов, "СтатьяДоходов", XmlТипЗнч(СписаниеТоваровОбъект.СтатьяПрочихДоходовРасходов).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);
		КонецЕсли;	
	КонецЕсли;	

	СписаниеТоваровОбъект.Организация = Организация;
	СписаниеТоваровОбъект.Склад = Склад;
	СписаниеТоваровОбъект.ПодразделениеОрганизации = ПодразделениеОрганизации;
	СписаниеТоваровОбъект.СтатьяПрочихДоходовРасходов = СтатьяПрочихДоходовРасходов;
	СписаниеТоваровОбъект.Основание = структураСписание.Основание;

	СписаниеТоваровОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеТоваров.СписаниеСоСклада;
	
	Для Каждого Стр Из структураСписание.Товары Цикл	
		
		Нстр = СписаниеТоваровОбъект.Товары.Добавить();
		
		Если УИДЗаполнен(Стр.Номенклатура) Тогда
			Номенклатура = НайтиОбъектПоИдентификатору(Стр.Номенклатура, Истина);
			Если Номенклатура <> Неопределено Тогда
				Нстр.Номенклатура = Номенклатура;	
			Иначе
				СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураСписание.УИД, структураСписание.Номенклатура, "Номенклатура", XmlТипЗнч(Нстр.Номенклатура).ИмяТипа);
				ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);
			КонецЕсли;					
		КонецЕсли;
		
		Нстр.Количество = Стр.Количество;
		Нстр.Сумма = Стр.Сумма;
		Нстр.Коэффициент = 1;
		Нстр.Цена = Нстр.Сумма/Нстр.Количество;
		//Нстр.Цена = Стр.Цена; //нужно высчитывать из суммы, т.к. может быть указана цена за упаковку
		
		Нстр.СчетУчета = ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора", Нстр.СчетУчета);
		
		ЗаполнитьНомерГТД(Нстр, Стр.НомерГТД, ЗапрашиваемыеОбъекты, структураСписание.УИД);
		
	КонецЦикла;	
	
	Попытка
		Если структураСписание.Проведен Тогда
			Попытка
				СписаниеТоваровОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				СписаниеТоваровОбъект.Записать(РежимЗаписиДокумента.Запись); 
				ОписаниеОшибок.errorCodeObj = 604;
				ОписаниеОшибок.errorObj = структураСписание.Представление + " (" + структураСписание.УИД + ")";
				ОписаниеОшибок.errorDescriptionObj = "Не удалось провести документ " + Строка(СписаниеТоваровОбъект.Ссылка) + ". Документ был просто записан"; 
			КонецПопытки;			
		ИначеЕсли НЕ структураСписание.Проведен И СписаниеТоваровОбъект.Проведен Тогда
			СписаниеТоваровОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе
			СписаниеТоваровОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
		
		Если НадоДобавитьЗаписьВРегистр Тогда
			ЗаписатьИдентификаторВРегистр(СписаниеТоваровОбъект.Ссылка, структураСписание.УИД);
		КонецЕсли;	
		
	Исключение  
		ОписаниеОшибок.errorCodeObj = 605;
		ОписаниеОшибок.errorObj = структураСписание.Представление + " (" + структураСписание.УИД + ")";
		ОписаниеОшибок.errorDescriptionObj = ОписаниеОшибки(); 
	КонецПопытки;
	
КонецПроцедуры	

Процедура ЗагрузитьОплатуПлатежнойКартой(структураЭквайринг, ОписаниеОшибок, ЗапрашиваемыеОбъекты)
	
	НадоДобавитьЗаписьВРегистр = Ложь;
	ОплатаПлатежнойКартойСсылка = НайтиОбъектПоИдентификатору(структураЭквайринг.УИД, Истина);
	Если ОплатаПлатежнойКартойСсылка <> Неопределено И ОбщегоНазначения.СсылкаСуществует(ОплатаПлатежнойКартойСсылка) Тогда
		Если Не структураЭквайринг.ОбъектИзменен Тогда
			//Объект есть в базе и по нему не зарегистрированы изменения
			Возврат;			
		КонецЕсли;	
		ОплатаПлатежнойКартойОбъект = ОплатаПлатежнойКартойСсылка.ПолучитьОбъект();		
	Иначе
		ОплатаПлатежнойКартойОбъект = Документы.ОплатаПлатежнойКартой.СоздатьДокумент();
		НадоДобавитьЗаписьВРегистр = Истина;
	КонецЕсли;	
	
	ОплатаПлатежнойКартойОбъект.РасшифровкаПлатежа.Очистить();

	ОплатаПлатежнойКартойОбъект.Номер = структураЭквайринг.Номер;
	ОплатаПлатежнойКартойОбъект.Дата = структураЭквайринг.Дата;
	ОплатаПлатежнойКартойОбъект.ПометкаУдаления = структураЭквайринг.ПометкаУдаления;

	Если структураЭквайринг.ХозяйтсвеннаяОперация = "ПоступлениеОплатыОтКлиента" Тогда
		ОплатаПлатежнойКартойОбъект.ВидОперации = Перечисления.ВидыОперацийОплатаПлатежнойКартой.ОплатаПокупателя;
	Иначе
		ОплатаПлатежнойКартойОбъект.ВидОперации = Перечисления.ВидыОперацийОплатаПлатежнойКартой.ВозвратПокупателю;
	КонецЕсли;
	
	
	Организация = НайтиОрганизацию(НайтиОбъектПоИдентификатору(структураЭквайринг.Организация));	
	ПодразделениеОрганизации = Неопределено;
	Контрагент = Неопределено;
	Ответственный = Неопределено;
	ДоговорКонтрагента = Неопределено;
	ВалютаДокумента = НайтиОбъектПоИдентификатору(структураЭквайринг.Валюта, Истина);
    
	Если ВалютаДокумента = Неопределено И УИДЗаполнен(структураЭквайринг.Валюта) Тогда
		СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураЭквайринг.УИД, структураЭквайринг.Валюта, "Валюта", XmlТипЗнч(ОплатаПлатежнойКартойОбъект.ВалютаДокумента).ИмяТипа);
		ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);
	КонецЕсли;		
	
	Подразделения = НайтиОбъектПоИдентификатору(структураЭквайринг.Подразделение);
	Если Подразделения <> Неопределено Тогда
		Для Каждого Стр Из Подразделения Цикл
			Если Стр.Ссылка.Владелец = Организация Тогда
				ПодразделениеОрганизации = Стр.Ссылка;
				Прервать;
			КонецЕсли;	
		КонецЦикла;                  
	КонецЕсли;	
	
	Если ПодразделениеОрганизации = Неопределено И УИДЗаполнен(структураЭквайринг.Подразделение) Тогда
		СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураЭквайринг.УИД, структураЭквайринг.Подразделение, "Подразделение", XmlТипЗнч(ОплатаПлатежнойКартойОбъект.ПодразделениеОрганизации).ИмяТипа);
		ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);
	КонецЕсли;	
		
	Контрагент = НайтиКонтрагента(НайтиОбъектПоИдентификатору(структураЭквайринг.Контрагент));	
	Если Контрагент = Неопределено И УИДЗаполнен(структураЭквайринг.Контрагент) Тогда
		СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураЭквайринг.УИД, структураЭквайринг.Контрагент, "Контрагент", XmlТипЗнч(ОплатаПлатежнойКартойОбъект.Контрагент).ИмяТипа);
		ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);
	КонецЕсли;	
	
	
	ПараметрыДоговора = Новый Структура;
	ПараметрыДоговора.Вставить("ВидДоговора", "СПокупателем");
	ПараметрыДоговора.Вставить("Валюта", ВалютаДокумента); 
	
	ДоговорКонтрагента = НайтиСоздатьОсновнойДоговорКонтрагента(Организация, Контрагент, ПараметрыДоговора);

	Ответственный = НайтиОбъектПоИдентификатору(структураЭквайринг.Ответственный);
	
	ОплатаПлатежнойКартойОбъект.Организация = Организация;
	ОплатаПлатежнойКартойОбъект.ПодразделениеОрганизации = ПодразделениеОрганизации;
	ОплатаПлатежнойКартойОбъект.Контрагент = Контрагент;
	ОплатаПлатежнойКартойОбъект.ДоговорКонтрагента = ДоговорКонтрагента;
	
	ОплатаПлатежнойКартойОбъект.СуммаДокумента = структураЭквайринг.СуммаДокумента;
	
	//Эквайер = НайтиОбъектПоИдентификатору(структураЭквайринг.Эквайер);
	ДоговорЭквайринга = НайтиОбъектПоИдентификатору(структураЭквайринг.ДоговорЭквайринга); 
	Если ДоговорЭквайринга = Неопределено И УИДЗаполнен(структураЭквайринг.ДоговорЭквайринга) Тогда
		СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураЭквайринг.УИД, структураЭквайринг.ДоговорЭквайринга, "ДоговорЭквайринга", XmlТипЗнч(ОплатаПлатежнойКартойОбъект.ДоговорЭквайринга).ИмяТипа);
		ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);
	КонецЕсли;	
	
	ОплатаПлатежнойКартойОбъект.ВидОплаты = НайтиСоздатьВидОплаты(ДоговорЭквайринга);
	
	СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;
	СчетУчетаРасчетовПоАвансам = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным;
	
	Для Каждого Стр Из структураЭквайринг.РасшифровкаПлатежа Цикл	
		
		Нстр = ОплатаПлатежнойКартойОбъект.РасшифровкаПлатежа.Добавить();
		Нстр.ДоговорКонтрагента = ДоговорКонтрагента;
		Нстр.Сделка = НайтиОбъектПоИдентификатору(Стр.Сделка);
		Если Нстр.Сделка = Неопределено И УИДЗаполнен(Стр.Сделка) Тогда
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураЭквайринг.УИД, Стр.Сделка, "Сделка", "");
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);	
		КонецЕсли;
		
		Нстр.СчетНаОплату = НайтиОбъектПоИдентификатору(Стр.СчетНаОплату); 
		Если Нстр.СчетНаОплату = Неопределено И УИДЗаполнен(Стр.СчетНаОплату) Тогда
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураЭквайринг.УИД, Стр.СчетНаОплату, "СчетНаОплату", XmlТипЗнч(Нстр.СчетНаОплату).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);	
		КонецЕсли;
				
		Если ЗначениеЗаполнено(Нстр.Сделка) Тогда
			Нстр.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.ПоДокументу;
		Иначе
			Нстр.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
		КонецЕсли;	
		
		Нстр.СуммаПлатежа = Стр.СуммаПлатежа;
		Нстр.СуммаВзаиморасчетов = Стр.СуммаВзаиморасчетов;
		Нстр.СуммаНДС = Стр.СуммаНДС;
		Нстр.КурсВзаиморасчетов = Стр.КурсВзаиморасчетов;
		Нстр.КратностьВзаиморасчетов = Стр.КратностьВзаиморасчетов;
		Если ЗначениеЗаполнено(Стр.СтавкаНДС) Тогда
			Нстр.СтавкаНДС = Перечисления.СтавкиНДС[Стр.СтавкаНДС];
		КонецЕсли;	

		Нстр.СчетУчетаРасчетовСКонтрагентом = СчетУчетаРасчетовСКонтрагентом;
		Нстр.СчетУчетаРасчетовПоАвансам = СчетУчетаРасчетовПоАвансам;
		
	КонецЦикла;	
		
	
	Попытка
		Если структураЭквайринг.Проведен Тогда
			Попытка
				ОплатаПлатежнойКартойОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ОплатаПлатежнойКартойОбъект.Записать(РежимЗаписиДокумента.Запись); 
				ОписаниеОшибок.errorCodeObj = 604;
				ОписаниеОшибок.errorObj = структураЭквайринг.Представление + " (" + структураЭквайринг.УИД + ")";
				ОписаниеОшибок.errorDescriptionObj = "Не удалось провести документ " + Строка(ОплатаПлатежнойКартойОбъект.Ссылка) + ". Документ был просто записан"; 
			КонецПопытки;			
		ИначеЕсли НЕ структураЭквайринг.Проведен И ОплатаПлатежнойКартойОбъект.Проведен Тогда
			ОплатаПлатежнойКартойОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе
			ОплатаПлатежнойКартойОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
		
		Если НадоДобавитьЗаписьВРегистр Тогда
			ЗаписатьИдентификаторВРегистр(ОплатаПлатежнойКартойОбъект.Ссылка, структураЭквайринг.УИД);
		КонецЕсли;	
		
	Исключение  
		ОписаниеОшибок.errorCodeObj = 605;
		ОписаниеОшибок.errorObj = структураЭквайринг.Представление + " (" + структураЭквайринг.УИД + ")";
		ОписаниеОшибок.errorDescriptionObj = ОписаниеОшибки(); 
	КонецПопытки;
	
КонецПроцедуры	

//Самойлов А.С. Начало 2022-09-19 #
Процедура ЗагрузитьПриобретениеТоваровУслуг(структураДокумент, ОписаниеОшибок, ЗапрашиваемыеОбъекты) 
	
	ДокументСсылка = НайтиОбъектПоИдентификаторуНов(структураДокумент.УИД);	

	Если ДокументСсылка <> Неопределено И ОбщегоНазначения.СсылкаСуществует(ДокументСсылка) Тогда
		Если Не структураДокумент.ОбъектИзменен Тогда
			//Объект есть в базе и по нему не зарегистрированы изменения
			Возврат;			
		КонецЕсли;	
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		
		СчетФактура = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруПолученный(ДокументСсылка);
		Если СчетФактура <> Неопределено
			И СчетФактура.Проведен Тогда
			
			СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
			СчетФактураОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			
		КонецЕсли;
		
	Иначе
		ДокументОбъект = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
		ДокументОбъект.УстановитьСсылкуНового(Документы.ПоступлениеТоваровУслуг.ПолучитьСсылку());	
		ЗаписатьИдентификаторВРегистр(ДокументОбъект.ПолучитьСсылкуНового(), структураДокумент.УИД);
	КонецЕсли;                                    
	
	ЗаполнитьЗначенияСвойств(ДокументОбъект,структураДокумент,
		"Номер,
		|Дата,
		|НомерВходящегоДокумента,
		|ДатаВходящегоДокумента,
		|Комментарий");
	
	ДокументОбъект.КурсВзаиморасчетов = структураДокумент.КурсЧислитель;
	ДокументОбъект.КратностьВзаиморасчетов = структураДокумент.КурсЗнаменатель;
	ДокументОбъект.СуммаВключаетНДС = структураДокумент.ЦенаВключаетНДС;
			
	ДокументОбъект.ВидОПерации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект,"Организация",структураДокумент,"Организация",Тип("СправочникСсылка.Организации"),ЗапрашиваемыеОбъекты);
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект,"Склад",структураДокумент,"Склад",Тип("СправочникСсылка.Склады"),ЗапрашиваемыеОбъекты);
		
	Если УИДЗаполнен(структураДокумент.Подразделение) Тогда
		Подразделение = НайтиОбъектПоИдентификаторуНов(структураДокумент.Подразделение,Тип("СправочникСсылка.ПодразделенияОрганизаций"),Новый Структура("Владелец",ДокументОбъект.Организация)); 
		Если Подразделение <> Неопределено Тогда
			ДокументОбъект.ПодразделениеОрганизации = Подразделение;	
		Иначе
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураДокумент.УИД, структураДокумент.Подразделение, "Подразделение", XmlТипЗнч(ДокументОбъект.ПодразделениеОрганизации).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);
		КонецЕсли;
	Иначе
		ДокументОбъект.ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	КонецЕсли;	
		
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект,"Контрагент",структураДокумент,"Контрагент",Тип("СправочникСсылка.Контрагенты"),ЗапрашиваемыеОбъекты);
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект,"ВалютаДокумента",структураДокумент,"Валюта",,ЗапрашиваемыеОбъекты);
	
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект,"СчетУчетаРасчетовСКонтрагентом",структураДокумент,"СчетУчетаРасчетов",,ЗапрашиваемыеОбъекты);
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект,"СчетУчетаРасчетовПоАвансам",структураДокумент,"СчетУчетаАвансов",,ЗапрашиваемыеОбъекты);
	
	ПараметрыДоговора = Новый Структура;
	ПараметрыДоговора.Вставить("ВидДоговора","СПоставщиком"); 
	ПараметрыДоговора.Вставить("Валюта", ДокументОбъект.ВалютаДокумента); 
	
	ДокументОбъект.ДоговорКонтрагента = НайтиСоздатьОсновнойДоговорКонтрагента(ДокументОбъект.Организация, ДокументОбъект.Контрагент, ПараметрыДоговора);
	
	ДокументОбъект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	
	
	
	ДокументОбъект.Товары.Очистить();
	ДокументОбъект.Услуги.Очистить();   
	
	соответствиеРаспределитьНаСебестоимость = Новый Соответствие;
	
	Для Каждого структураСтрокаТовар Из структураДокумент.Товары Цикл
		
		Если НЕ структураСтрокаТовар.ЭтоУслуга Тогда
			 	
			новСтрТовар = ДокументОбъект.Товары.Добавить();
			
			ЗаполнитьЗначенияСвойств(новСтрТовар,структураСтрокаТовар,
				"Количество,
				|Цена,
				|Сумма,
				|СуммаНДС");
			
			новСтрТовар.СтавкаНДС = Перечисления.СтавкиНДС[структураСтрокаТовар.СтавкаНДС];
			
			ЗаполнитьРеквизитПоДаннымERP(новСтрТовар,"Номенклатура",структураСтрокаТовар,"Номенклатура",,ЗапрашиваемыеОбъекты);
			
			ЗаполнитьНомерГТД(новСтрТовар, структураСтрокаТовар.НомерГТД, ЗапрашиваемыеОбъекты, структураДокумент.УИД);
			
		Иначе
			
			новСтрТовар = ДокументОбъект.Услуги.Добавить();
					
			ЗаполнитьЗначенияСвойств(новСтрТовар,структураСтрокаТовар,
				"Количество,
				|Цена,
				|Сумма,
				|СуммаНДС");
			
			новСтрТовар.СтавкаНДС = Перечисления.СтавкиНДС[структураСтрокаТовар.СтавкаНДС];
						
			ЗаполнитьРеквизитПоДаннымERP(новСтрТовар,"Номенклатура",структураСтрокаТовар,"Номенклатура",,ЗапрашиваемыеОбъекты);
			
			Если структураСтрокаТовар.РаспределитьНаСебестоимость Тогда
				
				СтатьяРасходов = НайтиОбъектПоИдентификаторуНов(структураСтрокаТовар.СтатьяРасходов,Тип("СправочникСсылка.СтатьиЗатрат"));
				Если СтатьяРасходов = Неопределено Тогда                  				
					СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", "", структураСтрокаТовар.СтатьяРасходов, "СтатьяРасходов", XmlТипЗнч(Справочники.СтатьиЗатрат.ПустаяСсылка()).ИмяТипа);
					ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта); 
					Продолжить;
				КонецЕсли;                                                         
				
				Сумма = новСтрТовар.Сумма;
				Если ДокументОбъект.СуммаВключаетНДС Тогда
					Сумма = Сумма - новСтрТовар.СуммаНДС;
				КонецЕсли;
				
				строкаСоответствия = соответствиеРаспределитьНаСебестоимость.Получить(СтатьяРасходов);   
								
				Если строкаСоответствия = Неопределено Тогда
					соответствиеРаспределитьНаСебестоимость.Вставить(СтатьяРасходов,Сумма);
				Иначе
					строкаСоответствия.Значение = строкаСоответствия.Значение + Сумма;
				КонецЕсли;
								
			КонецЕсли;
						
		КонецЕсли;
		
	КонецЦикла;
	//СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(Документы.ПоступлениеТоваровУслуг,	
	
	ДокументОбъект.ДополнительныеСвойства.Вставить("ЗаполнитьСчетаУчетаПередЗаписью",Истина);
	
    Попытка
		Если структураДокумент.Проведен Тогда
			//Эта схема в транзакции не работает
			//Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
			СоздатьРаспределениеНаСебестоимость(ДокументОбъект.Ссылка,соответствиеРаспределитьНаСебестоимость);
			
			Если ЗначениеЗаполнено(структураДокумент.НомерСФ)
				И структураДокумент.ПроведенСФ Тогда
				
				ПараметрыСозданияСчетаФактуры = УчетНДСКлиентСервер.НовыеПараметрыСозданияПолученногоСчетаФактуры();
				ПараметрыСозданияСчетаФактуры.Основание = ДокументОбъект.Ссылка;
				ПараметрыСозданияСчетаФактуры.НомерСчетаФактурыПолученного = структураДокумент.НомерСФ;
				ПараметрыСозданияСчетаФактуры.ДатаСчетаФактурыПолученного  = структураДокумент.ДатаСФ;
				ПараметрыСозданияСчетаФактуры.Продавец = Неопределено;
				
				Результат = УчетНДСВызовСервера.СоздатьСчетФактуруПолученныйНаОсновании(
					ПараметрыСозданияСчетаФактуры);	
				
			КонецЕсли;
			//Исключение
			//	ДокументОбъект.Записать(РежимЗаписиДокумента.Запись); 
			//	ОписаниеОшибок.errorCodeObj = 604;
			//	ОписаниеОшибок.errorObj = структураДокумент.Представление + " (" + структураДокумент.УИД + ")";
			//	ОписаниеОшибок.errorDescriptionObj = "Не удалось провести документ " + Строка(ДокументОбъект.Ссылка) + ". Документ был просто записан"; 
			//КонецПопытки;			
		ИначеЕсли НЕ структураДокумент.Проведен И ДокументОбъект.Проведен Тогда
			ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;						
	Исключение  
		ОписаниеОшибок.errorCodeObj = 605;
		ОписаниеОшибок.errorObj = структураДокумент.Представление + " (" + структураДокумент.УИД + ")";
		ОписаниеОшибок.errorDescriptionObj = ОписаниеОшибки(); 
	КонецПопытки;
		
КонецПроцедуры 

Процедура СоздатьРаспределениеНаСебестоимость(ДокументПоступление,соответствиеСтатейЗатрат)
	
	ЗапросОперацияБух = Новый Запрос;
	ЗапросОперацияБух.Текст =
	"ВЫБРАТЬ
	|	ОперацияБух.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ОперацияБух КАК ОперацияБух
	|ГДЕ
	|	ОперацияБух.Содержание ПОДОБНО ""%"" + &Содержание + ""%""
	|";
	
	ЗапросОперацияБух.УстановитьПараметр("Содержание","{" + ДокументПоступление.УникальныйИдентификатор() + "}");
	
	ВыборкаОперацияБух = ЗапросОперацияБух.Выполнить().Выбрать();
	
	Если ВыборкаОперацияБух.Следующий() Тогда
		ОперацияБухСсылка = ВыборкаОперацияБух.Ссылка;
	Иначе
		ОперацияБухСсылка = Документы.ОперацияБух.ПустаяСсылка();
	КонецЕсли;
		
	Если соответствиеСтатейЗатрат.Количество() = 0 Тогда
		Если НЕ ОперацияБухСсылка.Пустая()
			И НЕ ОперацияБухСсылка.ПометкаУдаления Тогда
			ОперацияБух = ОперацияБухСсылка.ПолучитьОбъект();
			ОперацияБух.ПометкаУдаления = Истина;			
			ОперацияБух.Записать();
			ОперацияБух.Движения.Хозрасчетный.Записать(); 
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ОперацияБухСсылка.Пустая() Тогда
		ОперацияБух = Документы.ОперацияБух.СоздатьДокумент();
	Иначе
		ОперацияБух = ОперацияБухСсылка.ПолучитьОбъект();
		ОперацияБух.ПометкаУдаления = Ложь;	
	КонецЕсли;
	
	ОперацияБух.Дата = ДокументПоступление.Дата + 1;
	ОперацияБух.Организация = ДокументПоступление.Организация;
	ОперацияБух.Содержание = "Распределение стоимости услуг на себестоимость товаров по поступлению " + ДокументПоступление.Номер + " от " + Формат(ДокументПоступление.Дата,"ДФ=дд.ММ.гггг") 
		+ " {" + ДокументПоступление.УникальныйИдентификатор() + "}";
	ОперацияБух.Комментарий = "Создан автоматически загрузкой данных из ERP";
	
	СуммаПоТоварам = ДокументПоступление.Товары.Итог("Сумма");
	Если ДокументПоступление.СуммаВключаетНДС Тогда
		СуммаПоТоварам = СуммаПоТоварам - ДокументПоступление.Товары.Итог("СуммаНДС");
	КонецЕсли;
		
	
	Для Каждого записьСтатьяЗатрат Из соответствиеСтатейЗатрат Цикл
		
		СтатьяЗатрат = записьСтатьяЗатрат.Ключ;
		СуммаКРаспределению = записьСтатьяЗатрат.Значение;
		
		ОсталосьРаспределить = СуммаКРаспределению;
		
		Для Каждого стрТовар Из ДокументПоступление.Товары Цикл
			
			новДвижение = ОперацияБух.Движения.Хозрасчетный.Добавить();
			
			новДвижение.Период = ОперацияБух.Дата;
			новДвижение.Организация = ДокументПоступление.Организация;
            новДвижение.ПодразделениеДт = ДокументПоступление.ПодразделениеОрганизации;
			новДвижение.ПодразделениеКт = ДокументПоступление.ПодразделениеОрганизации;
			
			новДвижение.СчетДт = стрТовар.СчетУчета;
			новДвижение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура] = стрТовар.Номенклатура;
			новДвижение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады] = ДокументПоступление.Склад;
			
			новДвижение.СчетКт = ПланыСчетов.Хозрасчетный.ИздержкиОбращения;
			новДвижение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат] = СтатьяЗатрат;
			
			СуммаТовар = стрТовар.Сумма;
			Если ДокументПоступление.СуммаВключаетНДС Тогда
				СуммаТовар = СуммаТовар - стрТовар.СуммаНДС;
			КонецЕсли;
			
			новДвижение.Сумма = СуммаКРаспределению * СуммаТовар / СуммаПоТоварам;
			новДвижение.СуммаНУДт = новДвижение.Сумма;
			новДвижение.СуммаНУДт = новДвижение.Сумма;
			ОсталосьРаспределить = ОсталосьРаспределить - новДвижение.Сумма;			
			
		КонецЦикла;		
		
		Если ОсталосьРаспределить <> 0 Тогда
			новДвижение.Сумма =  новДвижение.Сумма + ОсталосьРаспределить;
			новДвижение.СуммаНУДт = новДвижение.Сумма;
			новДвижение.СуммаНУДт = новДвижение.Сумма;
		КонецЕсли;
		
	КонецЦикла;   
	
	ОперацияБух.Записать();
	ОперацияБух.Движения.Хозрасчетный.Записать();	
		
КонецПроцедуры
//Самойлов А.С. Конец  2022-09-19

#КонецОбласти

#Область ЗагрузкаОстатков
Процедура ЗагрузитьВводОстатков(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты)
	
	ВводОбъект = Документы.ВводНачальныхОстатков.СоздатьДокумент();
	ВводОбъект.Дата = Дата(2020,12,31,23,59,59);
	ВводОбъект.ОтражатьВБухгалтерскомУчете = Истина;
	ВводОбъект.ОтражатьВНалоговомУчете = Истина;
	ВводОбъект.ОтражатьПоСпециальнымРегистрам = Истина;

	СчетОстатков = ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора", структураОбъект.Счет);
	ВспомогательныйСчет = ПланыСчетов.Хозрасчетный.Вспомогательный;
	
	НайденныеОбъекты = НайтиОбъектПоИдентификатору(структураОбъект.Организация);
  	ВводОбъект.Организация = НайтиОрганизацию(НайденныеОбъекты); 
	
	ЭтоИП = СтрНайти(ВводОбъект.Организация.Наименование, "ИП") > 0;
	
	Если УИДЗаполнен(структураОбъект.Подразделение) Тогда
		НайденныеОбъекты = НайтиОбъектПоИдентификатору(структураОбъект.Подразделение);
		Для Каждого Стр Из НайденныеОбъекты Цикл
			Если Стр.Ссылка.Владелец = ВводОбъект.Организация Тогда
				ВводОбъект.ПодразделениеОрганизации = Стр.Ссылка;
				Прервать;
			КонецЕсли;	
        КонецЦикла;
	КонецЕсли;	
	ВводОбъект.Комментарий = "Ввод остатков по счету " + СчетОстатков + " по " + ВводОбъект.Организация + ?(ЗначениеЗаполнено(ВводОбъект.ПодразделениеОрганизации)," (" + ВводОбъект.ПодразделениеОрганизации +")","");	
	ВводОбъект.РазделУчета = ОпределитьРазделУчета(СчетОстатков);
		
	Табчасть = Неопределено;	
	ИмяТЧ = "";
	
	Если ВводОбъект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НезавершенноеПроизводство
			ИЛИ ВводОбъект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ДенежныеСредства
			ИЛИ ВводОбъект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСУчредителями
			ИЛИ ВводОбъект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Капитал
			ИЛИ ВводОбъект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ОтложенныеНалоговыеАктивыОбязательства
			ИЛИ ВводОбъект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ПрочиеСчетаБухгалтерскогоУчета
			ИЛИ ВводОбъект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.СпецоснасткаВЭксплуатации Тогда

		Табчасть = ВводОбъект.БухСправка;
		ИмяТЧ = "БухСправка";
		
	ИначеЕсли ВводОбъект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПоставщикамиИПодрядчиками
			ИЛИ ВводОбъект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПокупателямиИЗаказчиками
			ИЛИ ВводОбъект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПрочимиДебиторамиИКредиторами Тогда
			
		Табчасть = ВводОбъект.РасчетыСКонтрагентами;
		ИмяТЧ = "РасчетыСКонтрагентами";
		
	ИначеЕсли ВводОбъект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям
			ИЛИ ВводОбъект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным
			ИЛИ ВводОбъект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСНачисленный Тогда
	
		Табчасть = ВводОбъект.ДанныеПоНДС;
		ИмяТЧ = "ДанныеПоНДС";
		
	ИначеЕсли ВводОбъект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ОсновныеСредства Тогда
		
		Табчасть = ВводОбъект.ОС;
		ИмяТЧ = "ОС";
		
	ИначеЕсли ВводОбъект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НематериальныеАктивыИНИОКР Тогда
		
		Табчасть = ВводОбъект.НМА;
		ИмяТЧ = "НМА";
		
	ИначеЕсли ВводОбъект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ТоварыОтгруженные Тогда
		
		Табчасть = ВводОбъект.МПЗОтгруженные;
		ИмяТЧ = "МПЗОтгруженные";
		
	ИначеЕсли ВводОбъект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасходыБудущихПериодов Тогда
		
		Табчасть = ВводОбъект.РасходыБудущихПериодов;
		ИмяТЧ = "РасходыБудущихПериодов";
		
	ИначеЕсли ВводОбъект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыПоНалогамИСборам Тогда
		
		Табчасть = ВводОбъект.РасчетыПоНалогамИСборам;	
		ИмяТЧ = "РасчетыПоНалогамИСборам";
		
	ИначеЕсли ВводОбъект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПодотчетнымиЛицами Тогда
		
		Табчасть = ВводОбъект.РасчетыСПодотчетнымиЛицами;
		ИмяТЧ = "РасчетыСПодотчетнымиЛицами";
		
	ИначеЕсли ВводОбъект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПерсоналомПоОплатеТрудаИДепонентам Тогда
		
		Табчасть = ВводОбъект.РасчетыПоЗаработнойПлате;
		ИмяТЧ = "РасчетыПоЗаработнойПлате";
		
	ИначеЕсли ВводОбъект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ПрочиеРасходыНалоговогоУчетаУСНиИП Тогда
		
		Табчасть = ВводОбъект.ДопРасходыУСН;
		ИмяТЧ = "ДопРасходыУСН";
		
	ИначеЕсли ВводОбъект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеВложения 
		ИЛИ ВводОбъект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Материалы Тогда
		
		Табчасть = ВводОбъект.НоменклатураНаСкладе;
		ИмяТЧ = "НоменклатураНаСкладе";
		
	ИначеЕсли ВводОбъект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Товары
		ИЛИ ВводОбъект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ГотоваяПродукцияИПолуфабрикаты Тогда
		
		//!!??
		//НоменклатураНаСкладе
		//Топливо
		//МатериалыПереданныеВПереработку
		//СпецодеждаИСпецоснасткаВЭксплуатации
		//ТоварыВРозничнойТорговлеАТТ
		//ТоварыВРозничнойТорговлеНТТ
		
		Если СчетОстатков.КодБыстрогоВыбора = "41К" ИЛИ СчетОстатков.КодБыстрогоВыбора = "4101" Тогда

			Табчасть = ВводОбъект.НоменклатураНаСкладе;
			ИмяТЧ = "НоменклатураНаСкладе"	
			
		КонецЕсли;	
		
	КонецЕсли;	
		
	//ДвиженияХоз = ВводОбъект.Движения.Хозрасчетный;
	//Нстр = ДвиженияХоз.Добавить();
	//Нстр.СчетДт = СчетОстатков;
	Сообщить(ИмяТЧ);

	Для Каждого Стр Из структураОбъект.Остатки Цикл
		
		//Нстр = ДвиженияХоз.Добавить();
		//Нстр.Активность = Истина;
		//Нстр.Период = ВводОбъект.Дата;
		//ЗаполнитьЗначенияСвойств(Нстр, Стр);
		//Нстр.Организация = ВводОбъект.Организация;
		//Нстр.ПодразделениеДт = ВводОбъект.ПодразделениеОрганизации;
		//Нстр.СчетДт = СчетОстатков;
		//Если Не СчетОстатков.Забалансовый Тогда
		//	Нстр.СчетКт = ВспомогательныйСчет;
		//КонецЕсли;	
				
		НСтр = Табчасть.Добавить();
		Попытка
			НСтр.СчетУчета = СчетОстатков;			
		Исключение
		КонецПопытки;
		ЗаполнитьЗначенияСвойств(НСтр, Стр); 
		
		Если Стр.Свойство("Валюта") И УИДЗаполнен(Стр.Валюта) Тогда
			НайденныеОбъекты = НайтиОбъектПоИдентификатору(Стр.Валюта);
			//Нстр.ВалютаДт = НайденныеОбъекты[0].Ссылка;
			НСтр.Валюта = НайденныеОбъекты[0].Ссылка;
		КонецЕсли;
		
		Контрагент = Неопределено;
		Договор = Неопределено;
		
		Если ИмяТЧ = "РасходыБудущихПериодов" ИЛИ ИмяТЧ = "БухСправка" Тогда

			НомерСубконто = 1;
			Для Каждого СК из СчетОстатков.ВидыСубконто Цикл
				
				Если СтрНайти(Стр["ТипСубконто" + НомерСубконто], "Enum") > 0 Тогда
					НСтр["Субконто" + НомерСубконто] = Перечисления[Сред(Стр["ТипСубконто" + НомерСубконто], 9, СтрДлина(Стр["ТипСубконто" + НомерСубконто]))][Стр["ПредставлениеСубконто" + НомерСубконто]];			
					НомерСубконто = НомерСубконто + 1;  
					Продолжить;
				КонецЕсли;				
				
				Если Не Стр.Свойство("Субконто" + НомерСубконто) Тогда
					Прервать;
				КонецЕсли;	
				УИДСубконто = Стр["Субконто" + НомерСубконто];
				Если УИДЗаполнен(УИДСубконто) Тогда
					Если СтрНайти(Стр["ТипСубконто" + НомерСубконто], "DocumentRef") > 0 Тогда
						НСтр["Субконто" + НомерСубконто] = НайтиСоздатьДокументРасчетовСКонтрагентом(ВводОбъект.Организация, Контрагент, Договор, Стр["ПредставлениеСубконто"+НомерСубконто]);	
					Иначе		
						НайденныеОбъекты = НайтиОбъектПоИдентификатору(УИДСубконто);			
						//Нстр.СубконтоДт[Ск.Ключ] = НайденныеОбъекты[0].Ссылка;
						Если Стр["ТипСубконто" + НомерСубконто] = "CatalogRef.Организации" ИЛИ Стр["ТипСубконто" + НомерСубконто] = "CatalogRef.Контрагенты" Тогда     
							НСтр["Субконто" + НомерСубконто] = НайтиКонтрагента(НайденныеОбъекты);
							Контрагент = НСтр["Субконто" + НомерСубконто]; 
						Иначе	
							НСтр["Субконто" + НомерСубконто] = НайденныеОбъекты[0].Ссылка; 
						КонецЕсли;	                                                        
						Если ТипЗнч(НСтр["Субконто" + НомерСубконто]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
							Договор = НСтр["Субконто" + НомерСубконто]; 
						КонецЕсли;	
					КонецЕсли;	
				КонецЕсли;
				НомерСубконто = НомерСубконто + 1;
			КонецЦикла;	
			
		КонецЕсли;
		
		Если ИмяТЧ = "РасходыБудущихПериодов" Тогда
			НСтр.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписано;
		КонецЕсли;	
		
		Если ИмяТЧ = "РасходыБудущихПериодов" ИЛИ ИмяТЧ = "БухСправка" Тогда
            //!!
			Если ЭтоИП Тогда
				НСтр.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются; //!!
			Иначе
				НСтр.ОтражениеВУСН = Перечисления.ОтражениеВУСН.НеПринимаются; //!!
			КонецЕсли;	
		КонецЕсли;		
		
		Если ИмяТЧ = "РасчетыСКонтрагентами" Тогда
			
			Если Нстр.СуммаКт <> 0 Тогда
				Нстр.Сумма = 0;
			КонецЕсли;	
			
			Если УИДЗаполнен(Стр.Субконто1) Тогда
				НайденныеОбъекты = НайтиОбъектПоИдентификатору(Стр.Субконто1);			
			    НСтр.Контрагент = НайтиКонтрагента(НайденныеОбъекты);
				Контрагент = НСтр.Контрагент;
			КонецЕсли;
			
			Если Стр.Свойство("Субконто2") И УИДЗаполнен(Стр.Субконто2) Тогда
				Если СтрНайти(Стр.ТипСубконто2, "DocumentRef") > 0 Тогда
					НСтр.Документ = НайтиСоздатьДокументРасчетовСКонтрагентом(ВводОбъект.Организация, Контрагент, Договор);	
				ИначеЕсли СтрНайти(Стр.ТипСубконто2, "Договор") > 0 Тогда
					НайденныеОбъекты = НайтиОбъектПоИдентификатору(Стр.Субконто2);			
				    НСтр.ДоговорКонтрагента = НайденныеОбъекты[0].Ссылка;
					Договор = НСтр.ДоговорКонтрагента;					
				КонецЕсли;	
			КонецЕсли;
			
			Если Стр.Свойство("Субконто3") И УИДЗаполнен(Стр.Субконто3) Тогда
				Если СтрНайти(Стр.ТипСубконто3, "DocumentRef") > 0 Тогда
					НСтр.Документ = НайтиСоздатьДокументРасчетовСКонтрагентом(ВводОбъект.Организация, Контрагент, Договор);
				КонецЕсли;	
			КонецЕсли;
						
		КонецЕсли;
		
		Если ИмяТЧ = "ДанныеПоНДС" Тогда
			
			Если УИДЗаполнен(Стр.Субконто1) Тогда
				НайденныеОбъекты = НайтиОбъектПоИдентификатору(Стр.Субконто1);			
			    НСтр.Контрагент = НайтиКонтрагента(НайденныеОбъекты);
				Контрагент = НСтр.Контрагент;
			КонецЕсли;
			
			Комментарий = "";
			Если Стр.Субконто2 <> "" И (СчетОстатков.КодБыстрогоВыбора = "76АВ" ИЛИ СчетОстатков.КодБыстрогоВыбора = "1903" ИЛИ СчетОстатков.КодБыстрогоВыбора = "1904") Тогда
				Комментарий = Стр.ПредставлениеСубконто2;
			КонецЕсли;			
			
			Если СчетОстатков.КодБыстрогоВыбора = "76АВ" Тогда
				Если Стр.Сумма <> Стр.НДС Тогда
					НСтр.НДС = Стр.Сумма;
					НСтр.СуммаБезНДС = Стр.Сумма / Стр.НДС * Стр.СуммаБезНДС;
				КонецЕсли;	
			КонецЕсли;		
			
			НСтр.НомерСФ = СокрЛП(НСтр.НомерСФ);
			
			Пока СтрДлина(НСтр.НомерСФ) < 12 Цикл //!!
				НСтр.НомерСФ = НСтр.НомерСФ + "_";
			КонецЦикла;	
			
			НСтр.СчетФактура = НайтиСоздатьДокументРасчетовСКонтрагентом(ВводОбъект.Организация, Контрагент, Договор, Комментарий);			
			Если Стр.Свойство("СтавкаНДС") Тогда
				НСтр.СтавкаНДС = Перечисления.СтавкиНДС[Стр.СтавкаНДС];
			КонецЕсли;
			НСтр.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные;
			НСтр.КодВидаОперации = "02"; 
			
		КонецЕсли;	
		
		Если ИмяТЧ = "ОС" Тогда
			
			Если УИДЗаполнен(Стр.Субконто1) Тогда //Основное средство
				НайденныеОбъекты = НайтиОбъектПоИдентификатору(Стр.Субконто1);
				Нстр.ОсновноеСредство = НайденныеОбъекты[0].Ссылка; 
				Нстр.ИнвентарныйНомерРегл = НайденныеОбъекты[0].Ссылка.Код; 
				
				Нстр.ПервоначальнаяСтоимостьБУ = Стр.Сумма;
				Нстр.ПервоначальнаяСтоимостьНУ = Стр.Сумма; 
				//     
				Если ЗначениеЗаполнено(Стр.НомерДокументаПринятияКУчету) Тогда
					Нстр.НомерДокументаПринятияКУчетуРегл = Стр.НомерДокументаПринятияКУчету; 
					Нстр.ДатаПринятияКУчетуРегл = Дата(Лев(Стр.ДатаДокументаПринятияКУчету, 4), Сред(Стр.ДатаДокументаПринятияКУчету, 6, 2), Сред(Стр.ДатаДокументаПринятияКУчету, 9, 2));
					Нстр.НазваниеДокументаПринятияКУчетуРегл = Стр.ВидДокументаПринятияКУчету;
				КонецЕсли;
				//
				Нстр.НакопленнаяАмортизацияБУ = -Стр.СуммаАмортизация;
				Нстр.НакопленнаяАмортизацияНУ = -Стр.СуммаНУАмортизация;
				
				Нстр.НачислятьАмортизациюБУ = Истина;
				Нстр.НачислятьАмортизациюНУ = Истина;
				
				АмортизацияСчет2001 = Справочники.СпособыОтраженияРасходовПоАмортизации.НайтиПоНаименованию("Амортизация (счет 20.01)", Истина); 
				Нстр.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.Линейный;    
				Нстр.СпособОтраженияРасходовПоАмортизации = АмортизацияСчет2001; 
				
				Нстр.СпособПоступленияРегл = Перечисления.СпособыПоступленияАктивов[Стр.СпособПоступления];
				//
				Нстр.СрокИспользованияДляВычисленияАмортизацииБУ = Стр.СрокИспользованияБУ;
				Нстр.СрокПолезногоИспользованияБУ = Стр.СрокИспользованияБУ;
				Нстр.СрокПолезногоИспользованияНУ = Стр.СрокИспользованияНУ;
				
				Нстр.СчетАмортизацииБУ = ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора", Стр.КодБыстрогоДоступаСчетАмортизации);
				Нстр.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора", Стр.КодБыстрогоДоступаСчетУчета);
				
				Нстр.ТекущаяСтоимостьБУ = Стр.Сумма;
				Нстр.ТекущаяСтоимостьНУ = Стр.Сумма; 
				
				Нстр.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС[Стр.ПорядокУчетаБУ];
				Нстр.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации;
				
				Нстр.СостояниеПринятияКУчетуРегл = Справочники.СобытияОС.НайтиПоНаименованию("Принятие к учету с вводом в эксплуатацию", Истина);	
				
				Если УИДЗаполнен(Стр.ДокументЛизингаКонтрагент) Тогда
					КонтрагентЛизинга = НайтиОбъектПоИдентификатору(Стр.ДокументЛизингаКонтрагент);
					Нстр.Контрагент = КонтрагентЛизинга[0].Ссылка; 
					//
					ДоговорЛизинга = НайтиОбъектПоИдентификатору(Стр.ДокументЛизингаДоговор);
					Нстр.ДоговорКонтрагента = ДоговорЛизинга[0].Ссылка;
					
					Нстр.СпособОтраженияРасходовПоАренднымПлатежам = АмортизацияСчет2001;
					Нстр.КорректировкаСтоимостиНУ = Стр.СуммаНУКорректировка; 
				КонецЕсли;
				Нстр.СпециальныйКоэффициентНУ = Стр.СпециальныйКоэффициентНУ;
				
			КонецЕсли;
			
		КонецЕсли;	
		
		Если ИмяТЧ = "РасчетыПоЗаработнойПлате" Тогда
			НайденныеОбъекты = НайтиОбъектПоИдентификатору(Стр.Субконто1);
			Нстр.РаботникОрганизации = НайденныеОбъекты[0].Ссылка;
			Нстр.ПериодРегистрации = Дата(2020, 12, 01, 0,0,0);
			Нстр.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк;
			
			НайденныеОбъекты = НайтиОбъектПоИдентификатору(Стр.Сотрудник);
			Нстр.Сотрудник = НайденныеОбъекты[0].Ссылка;
		КонецЕсли;	
		
		Если ИмяТЧ = "РасчетыПоНалогамИСборам" Тогда
			
			Если Нстр.СуммаКт <> 0 Тогда
				Нстр.Сумма = 0;
			КонецЕсли;	

			Если ЭтоИП Тогда
				НСтр.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются; //!!
			Иначе
				НСтр.ОтражениеВУСН = Перечисления.ОтражениеВУСН.НеПринимаются; //!!
			КонецЕсли;	
			
			Если СчетОстатков.КодБыстрогоВыбора = "6911" 
					ИЛИ СчетОстатков.КодБыстрогоВыбора = "69065"
					ИЛИ СчетОстатков.КодБыстрогоВыбора = "69031"
					ИЛИ СчетОстатков.КодБыстрогоВыбора = "69027"
					ИЛИ СчетОстатков.КодБыстрогоВыбора = "69021"
					ИЛИ СчетОстатков.КодБыстрогоВыбора = "6901"
					ИЛИ СчетОстатков.КодБыстрогоВыбора = "6811"
					ИЛИ СчетОстатков.КодБыстрогоВыбора = "6807"
					ИЛИ СчетОстатков.КодБыстрогоВыбора = "68041"
					ИЛИ СчетОстатков.КодБыстрогоВыбора = "6802"
					ИЛИ СчетОстатков.КодБыстрогоВыбора = "68011" Тогда
				Нстр.ВидПлатежаВБюджет = Перечисления.ВидыПлатежейВГосБюджет[Стр.ПредставлениеСубконто1];
			КонецЕсли;	
			
			Если СчетОстатков.КодБыстрогоВыбора = "69065" И ЗначениеЗаполнено(Стр.ПредставлениеСубконто2) Тогда
				Нстр.УдалитьВидСтраховогоВзносаИП = Перечисления.УдалитьВидыСтраховыхВзносовИП[Стр.ПредставлениеСубконто2];
			КонецЕсли;	
			
			Если (СчетОстатков.КодБыстрогоВыбора = "6811" 
					ИЛИ СчетОстатков.КодБыстрогоВыбора = "6807"
					ИЛИ СчетОстатков.КодБыстрогоВыбора = "68011")				
					И УИДЗаполнен(Стр.Субконто2) Тогда
				НайденныеОбъекты = НайтиОбъектПоИдентификатору(Стр.Субконто2);					
				Нстр.РегистрацияВНалоговомОргане = НайденныеОбъекты[0].Ссылка;
			КонецЕсли;	
			
			Если СчетОстатков.КодБыстрогоВыбора = "68041" Тогда
				Если ЗначениеЗаполнено(Стр.ПредставлениеСубконто2) Тогда
					Нстр.УровеньБюджета = Перечисления.УровниБюджетов[Стр.ПредставлениеСубконто2];
				КонецЕсли;
				Если ЗначениеЗаполнено(Стр.Субконто3) Тогда
					НайденныеОбъекты = НайтиОбъектПоИдентификатору(Стр.Субконто3);					
					Нстр.РегистрацияВНалоговомОргане = НайденныеОбъекты[0].Ссылка;
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
		
		Если ИмяТЧ = "МПЗОтгруженные" Тогда
			
			Если СчетОстатков.КодБыстрогоВыбора = "4501" Тогда
				Если УИДЗаполнен(Стр.Субконто1) Тогда
					НайденныеОбъекты = НайтиОбъектПоИдентификатору(Стр.Субконто1);
					Нстр.Покупатель = НайтиКонтрагента(НайденныеОбъекты);
					Нстр.ДокументОтгрузки = НайтиСоздатьДокументРасчетовСКонтрагентом(ВводОбъект.Организация, Нстр.Покупатель, Договор, "Передача на комиссию");//!!не уверен, нужно ли это
				КонецЕсли;
				
				Если УИДЗаполнен(Стр.Субконто2) Тогда
					НайденныеОбъекты = НайтиОбъектПоИдентификатору(Стр.Субконто2);
					Нстр.Номенклатура = НайденныеОбъекты[0].Ссылка;
				КонецЕсли;	
				
			КонецЕсли;	
		КонецЕсли;	
		
		Если ИмяТЧ = "НоменклатураНаСкладе" Тогда
			
			Если структураОбъект.Счет = "0803" Тогда
				Нстр.Номенклатура = НайтиОбъектСтроительства(НайтиОбъектПоИдентификатору(Стр.Субконто1));
				Нстр.СпособСтроительства = Перечисления.СпособыСтроительства.Подрядный;
			Иначе
				НайденныеОбъекты = НайтиОбъектПоИдентификатору(Стр.Субконто1);
				Нстр.Номенклатура = НайденныеОбъекты[0].Ссылка;
			КонецЕсли;	
			
			Если СтрНайти(Стр.ТипСубконто2, "Склад") > 0 Тогда
				НайденныеОбъекты = НайтиОбъектПоИдентификатору(Стр.Субконто2);			
				НСтр.Склад = НайденныеОбъекты[0].Ссылка;
			КонецЕсли;
			
			Если СчетОстатков.КодБыстрогоВыбора = "41К" ИЛИ СчетОстатков.КодБыстрогоВыбора = "4101" Тогда
				Если УИДЗаполнен(Стр.Субконто1) Тогда
					НайденныеОбъекты = НайтиОбъектПоИдентификатору(Стр.Субконто1);
					Нстр.Номенклатура = НайденныеОбъекты[0].Ссылка;
				КонецЕсли;
				
				Если УИДЗаполнен(Стр.Субконто2) Тогда
					НайденныеОбъекты = НайтиОбъектПоИдентификатору(Стр.Субконто2);
					Нстр.Склад = НайденныеОбъекты[0].Ссылка;
				КонецЕсли;	
				
				Если ЭтоИП Тогда
					НСтр.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются; //!!
                	НСтр.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписано;
					Если Стр.ДанныеПартий.Количество() = 0 Тогда
						
						НСтр.Партия = НайтиСоздатьДокументРасчетовСКонтрагентом(ВводОбъект.Организация, Справочники.Контрагенты.ПустаяСсылка(), Неопределено, "Неопределенная партия");
						НСтр.НДС = НСтр.Сумма / 120 * 20;
						
					Иначе
						
						КоличествоВсего = НСтр.Количество;
						СуммаВсего = НСтр.Сумма;
						
						Для Каждого СтрПартии из Стр.ДанныеПартий Цикл
							КА = Неопределено;
							Дог = Неопределено;							
							Если УИДЗаполнен(СтрПартии.Контрагент) Тогда
								НайденныеОбъекты = НайтиОбъектПоИдентификатору(СтрПартии.Контрагент);
								КА = НайтиКонтрагента(НайденныеОбъекты);	
							КонецЕсли;	                        
							Если КА = Неопределено Тогда
								КА = Справочники.Контрагенты.ПустаяСсылка();
							КонецЕсли;	
							
							Если УИДЗаполнен(СтрПартии.Договор) Тогда
								НайденныеОбъекты = НайтиОбъектПоИдентификатору(СтрПартии.Договор);
								Дог = НайденныеОбъекты[0].Ссылка;	
							КонецЕсли;	                        
							
							Если КоличествоВсего <> СтрПартии.ОстатокПартии Тогда
								ДопСтрока = Табчасть.Добавить();
								ЗаполнитьЗначенияСвойств(ДопСтрока, НСтр);
							КонецЕсли;
							
							НСтр.Количество = СтрПартии.ОстатокПартии;
							НСтр.Сумма = СтрПартии.СтоимостьРегл;
							НСтр.НДС = СтрПартии.НДС;
							НСтр.Партия = НайтиСоздатьДокументРасчетовСКонтрагентом(ВводОбъект.Организация, КА, Дог, СтрПартии.Партия);
							
							//уменьшить общее количество и сумму, проставить количество и партию в НСТР, приравнять ДопСтроку к НСтр
							КоличествоВсего = КоличествоВсего - НСтр.Количество;
							СуммаВсего = СуммаВсего - НСтр.Сумма;
							
							Если КоличествоВсего <> 0 Тогда

								ДопСтрока.Количество = КоличествоВсего;
								ДопСтрока.Сумма = СуммаВсего;
								НСтр = ДопСтрока;
								
							КонецЕсли;	
							
						КонецЦикла;	
						
						Если Не ЗначениеЗаполнено(НСтр.Партия) Тогда
							НСтр.Партия = НайтиСоздатьДокументРасчетовСКонтрагентом(ВводОбъект.Организация, Справочники.Контрагенты.ПустаяСсылка(), Неопределено, "Неопределенная партия");
							НСтр.НДС = НСтр.Сумма / 120 * 20;
						КонецЕсли;	
						
					КонецЕсли;	
				КонецЕсли;	
					
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЦикла;
	//ВводОбъект.ОбменДанными.Загрузка = Истина;
	//ВводОбъект.Записать(РежимЗаписиДокумента.Запись);
	//ВводОбъект.ОбменДанными.Загрузка = Ложь;
	ВводОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры

Функция НайтиСоздатьДокументРасчетовСКонтрагентом(Организация, Контрагент, Договор = Неопределено, Комментарий = "")

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДокументРасчетовСКонтрагентом.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом
		|ГДЕ
		|	ДокументРасчетовСКонтрагентом.Организация = &Организация
		|	И ДокументРасчетовСКонтрагентом.Контрагент = &Контрагент
		|	И ДокументРасчетовСКонтрагентом.Комментарий Подобно """" + &Комментарий + ""%""
		|	И ВЫБОР
		|			КОГДА &ДоговорКонтрагента = НЕОПРЕДЕЛЕНО
		|				ТОГДА ДокументРасчетовСКонтрагентом.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|			ИНАЧЕ ДокументРасчетовСКонтрагентом.ДоговорКонтрагента = &ДоговорКонтрагента
		|		КОНЕЦ";
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", Договор);
	ЗАпрос.УстановитьПараметр("Комментарий", Комментарий);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() ТОгда
		Возврат Выборка.Ссылка;
	Иначе     
		
		ДокРасчетов = Документы.ДокументРасчетовСКонтрагентом.СоздатьДокумент();
		ДокРасчетов.Организация = Организация;
		ДокРасчетов.Контрагент = Контрагент;
		ДокРасчетов.ДоговорКонтрагента = Договор;
		ДокРасчетов.ВалютаДокумента = ДокРасчетов.ДоговорКонтрагента.ВалютаВзаиморасчетов;//??
		ДокРасчетов.Дата = Дата(2020,12,31,23,59,59);
		ДокРасчетов.Комментарий = Комментарий;
		ДокРасчетов.Записать(РежимЗаписиДокумента.Проведение);
		
		Возврат ДокРасчетов.Ссылка;
		
	КонецЕсли;	
	
КонецФункции	

Процедура ЗаполнитьСписокРазделов(СписокРазделов)

	СписокРазделов.Очистить();

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ГотоваяПродукцияИПолуфабрикаты;
	СтрокаРаздела.КодыГрупп   = ",43,21,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ДенежныеСредства;
	СтрокаРаздела.КодыГрупп   = ",50,51,52,53,54,55,56,57,58,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Капитал;
	СтрокаРаздела.КодыГрупп   = ",80,81,82,83,84,85,86,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеВложения;
	СтрокаРаздела.КодыГрупп   = ",07,08,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Материалы;
	СтрокаРаздела.КодыГрупп   = ",10,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным;
	СтрокаРаздела.КодыСчетов     = ",76.АВ,76.ВА,";
	СтрокаРаздела.КодыИсключений = ",76,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям;
	СтрокаРаздела.КодыГрупп      = ",19,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.НезавершенноеПроизводство;
	СтрокаРаздела.КодыГрупп      = ",20,23,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.НематериальныеАктивыИНИОКР;
	СтрокаРаздела.КодыГрупп      = ",04,05,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.ОтложенныеНалоговыеАктивыОбязательства;
	СтрокаРаздела.КодыГрупп      = ",09,77,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.ОсновныеСредства;
	СтрокаРаздела.КодыГрупп      = ",01,02,03,";
	СтрокаРаздела.КодыСчетов     = ",010,";
	СтрокаРаздела.КодыИсключений = ",10,11,001,011,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.РасходыБудущихПериодов;
	СтрокаРаздела.КодыГрупп      = ",97,";
	СтрокаРаздела.КодыСчетов     = ",76.01.2,76.01.9,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыПоНалогамИСборам;
	СтрокаРаздела.КодыГрупп      = ",68,69,";
	СтрокаРаздела.КодыИсключений = ",68.22,68.32,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПерсоналомПоОплатеТрудаИДепонентам;
	СтрокаРаздела.КодыГрупп      = ",70,";
	СтрокаРаздела.КодыСчетов     = ",76.04,";
	СтрокаРаздела.КодыИсключений = ",76,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПодотчетнымиЛицами;
	СтрокаРаздела.КодыГрупп      = ",71,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПокупателямиИЗаказчиками;
	СтрокаРаздела.КодыГрупп      = ",62,";
	СтрокаРаздела.КодыИсключений = ",62.03,62.Р,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПоставщикамиИПодрядчиками;
	СтрокаРаздела.КодыГрупп      = ",60,";
	СтрокаРаздела.КодыИсключений = ",60.03,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПрочимиДебиторамиИКредиторами;
	СтрокаРаздела.КодыГрупп      = ",76,";
	СтрокаРаздела.КодыИсключений = ",76.03,76.04,76.01.2,76.01.9,76.01.1,76.07.1,76.07.9,76.10,76.14,76.27.1,76.37.1,76.37.9,76.21,76.41,76.АВ,76.ВА,76.Н,76.ОТ,76.51,76.52,76.ОК,76.К,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСУчредителями;
	СтрокаРаздела.КодыГрупп      = ",75,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.Товары;
	СтрокаРаздела.КодыГрупп      = ",41,42,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.ТоварыОтгруженные;
	СтрокаРаздела.КодыГрупп      = ",45,";
	
	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.СпецоснасткаВЭксплуатации;
	СтрокаРаздела.КодыГрупп      = "";
	СтрокаРаздела.КодыСчетов     = ",МЦ.03,";
	СтрокаРаздела.КодыИсключений = ",МЦ,";

КонецПроцедуры

Функция ОпределитьРазделУчета(Счет)
	
	СписокРазделов = Новый ТаблицаЗначений;
	СписокРазделов.Колонки.Добавить("КодыГрупп");
	СписокРазделов.Колонки.Добавить("КодыСчетов");
	СписокРазделов.Колонки.Добавить("КодыИсключений");
	СписокРазделов.Колонки.Добавить("РазделУчета");
	
	ЗаполнитьСписокРазделов(СписокРазделов);
	
	КодСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет).Код;
	ПозицияТочки = СтрНайти(КодСчета, ".");
	КодРодителя = ?(ПозицияТочки = 0, КодСчета, Лев(КодСчета, ПозицияТочки - 1));

	Для Каждого СтрокаРаздела Из СписокРазделов Цикл

		Если СтрНайти(СтрокаРаздела.КодыСчетов, "," + КодСчета + ",") > 0 Тогда
			Если СтрНайти(СтрокаРаздела.КодыИсключений, "," + КодСчета + ",") = 0 Тогда
				Возврат СтрокаРаздела.РазделУчета;
			КонецЕсли;
		КонецЕсли;

		Если СтрНайти(СтрокаРаздела.КодыГрупп, "," + КодРодителя + ",") > 0 Тогда
			Если СтрНайти(СтрокаРаздела.КодыИсключений, "," + КодСчета + ",") = 0 Тогда
				Возврат СтрокаРаздела.РазделУчета;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.ПрочиеСчетаБухгалтерскогоУчета");

КонецФункции
#КонецОбласти

//!!
Функция ПолучитьВидОплаты(Параметры = Неопределено)
	
	Если Параметры = Неопределено Тогда
		Выборка = Справочники.ВидыОплатОрганизаций.Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		//Притула Р.В. Начало 28.01.2021 #18705
		Запрос = Новый Запрос;
		Запрос.Текст =  "ВЫБРАТЬ Первые 1
			|    ВидыОплатОрганизаций.Ссылка КАК Ссылка
			|ИЗ
			|    Справочник.ВидыОплатОрганизаций КАК ВидыОплатОрганизаций
			|ГДЕ
			|    ВидыОплатОрганизаций.ДоговорКонтрагента.Номер = &Номер";
		
		Запрос.УстановитьПараметр("Номер", Параметры.НомерТерминала);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		Иначе
			Возврат Неопределено;
		КонецЕсли;	
		//Притула Р.В. Конец  28.01.2021		
	КонецЕсли;	
	
КонецФункции	
//!!
Функция ПолучитьОснованиеПлатежа(Основание)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Первые 1
			|    ДополнительныеСведения.Объект КАК Объект
			|ИЗ
			|    РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
			|ГДЕ
			|    ДополнительныеСведения.Свойство.Заголовок = ""ОснованиеПлатежа""
			|    И ДополнительныеСведения.Объект ССЫЛКА Документ.РеализацияТоваровУслуг
			|    И ДополнительныеСведения.Значение = &Основание"; 
	
	Запрос.УстановитьПараметр("Основание", Основание);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Объект;
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
	
КонецФункции	
//!!
Процедура ПривязатьПлатежиПоОснованию(Реализация, Основание)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
			|    ДополнительныеСведения.Объект КАК Объект
			|ИЗ
			|    РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
			|ГДЕ
			|    ДополнительныеСведения.Свойство.Заголовок = ""ОснованиеПлатежа""
			|    И ДополнительныеСведения.Значение = &Основание
			|    И (ДополнительныеСведения.Объект ССЫЛКА Документ.ОплатаПлатежнойКартой
			|            ИЛИ ДополнительныеСведения.Объект ССЫЛКА Документ.ПриходныйКассовыйОрдер)
			|    И (ДополнительныеСведения.Объект.ДокументОснование = НЕОПРЕДЕЛЕНО
			|            ИЛИ ДополнительныеСведения.Объект.ДокументОснование = ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка))";
	
	Запрос.УстановитьПараметр("Основание", Основание);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Документ = Выборка.Объект.ПолучитьОбъект();
		Документ.ДокументОснование = Реализация;
		Документ.РасшифровкаПлатежа[0].СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.ПоДокументу;
		Документ.РасшифровкаПлатежа[0].Сделка = Реализация;

		Попытка
			Если Документ.Проведен Тогда
				Документ.Записать(РежимЗаписиДокумента.Проведение);
			Иначе
				Документ.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;				
		Исключение		
		КонецПопытки;		
		
	КонецЦикла;	
	
КонецПроцедуры	

//!! оставляем так? или добавляем комментарий из erp? или не фиксируем комментарий в БП?
Функция СформироватьКомментарий(Комментарий, Представление)
	Если СтрНайти(Комментарий, Представление) = 0 Тогда
		Возврат Комментарий + Представление;
	Иначе
		Возврат Комментарий;
	КонецЕсли;	
КонецФункции	

Процедура ЗагрузитьОбъектПоСтруктуре(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты)

	Если структураОбъект.ТипОбъекта = "Номенклатура" Тогда
		ЗагрузитьНомеклатуру(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	ИначеЕсли структураОбъект.ТипОбъекта = "ЕдиницаИзмерения" Тогда 
		ЗагрузитьЕдиницуИзмерения(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	ИначеЕсли структураОбъект.ТипОбъекта = "Валюта" Тогда
		ЗагрузитьВалюту(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	ИначеЕсли структураОбъект.ТипОбъекта = "Организация" Тогда
		ЗагрузитьОрганизацию(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	ИначеЕсли структураОбъект.ТипОбъекта = "Подразделение" Тогда
		ЗагрузитьПодразделение(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	ИначеЕсли структураОбъект.ТипОбъекта = "РегистрацияВНалоговомОргане" Тогда
		ЗагрузитьРегистрациюВНалоговомОргане(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	ИначеЕсли структураОбъект.ТипОбъекта = "УчетнаяЗаписьДокументооборота" Тогда
		ЗагрузитьУчетнуюЗаписьДокументооборота(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	ИначеЕсли структураОбъект.ТипОбъекта = "СерверДокументооборота" Тогда
		ЗагрузитьСерверДокументооборота(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	ИначеЕсли структураОбъект.ТипОбъекта = "НалоговыйОрган" Тогда
		ЗагрузитьНалоговыйОрган(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	ИначеЕсли структураОбъект.ТипОбъекта = "Контрагент" Тогда
		ЗагрузитьКонтрагента(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	ИначеЕсли структураОбъект.ТипОбъекта = "Договор" Тогда
		ЗагрузитьДоговор(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	ИначеЕсли структураОбъект.ТипОбъекта = "Страна" Тогда
		ЗагрузитьСтрану(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	ИначеЕсли структураОбъект.ТипОбъекта = "Склад" Тогда
		ЗагрузитьСклад(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты); 
	ИначеЕсли структураОбъект.ТипОбъекта = "РасходыБудущихПериодов" Тогда
		ЗагрузитьРасходыБудущихПериодов(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	ИначеЕсли структураОбъект.ТипОбъекта = "ПрочиеДоходыИРасходы" Тогда
		ЗагрузитьПрочиеДоходыИРасходы(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	ИначеЕсли структураОбъект.ТипОбъекта = "ФизическоеЛицо" Тогда
		ЗагрузитьФизЛицо(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	ИначеЕсли структураОбъект.ТипОбъекта = "Резервы" Тогда
		ЗагрузитьРезервыОценочныеОбязательства(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	ИначеЕсли структураОбъект.ТипОбъекта = "ОбъектЭксплуатации" Тогда 
		ЗагрузитьОсновноеСредство(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	ИначеЕсли структураОбъект.ТипОбъекта = "ОбъектСтроительства" Тогда 
		ЗагрузитьОбъектСтроительства(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты); 
	ИначеЕсли структураОбъект.ТипОбъекта = "НематериальныйАктив" Тогда 
		ЗагрузитьНематериальныйАктив(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	ИначеЕсли структураОбъект.ТипОбъекта = "Сотрудник" Тогда 
		ЗагрузитьСотрудника(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	ИначеЕсли структураОбъект.ТипОбъекта = "СтатьяДДС" Тогда 
		ЗагрузитьСтатьюДДС(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	ИначеЕсли структураОбъект.ТипОбъекта = "Банк" Тогда 
		ЗагрузитьБанк(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);	
	ИначеЕсли структураОбъект.ТипОбъекта = "БанковскийСчет" Тогда 
		ЗагрузитьБанковскийСчет(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);		
	//Самойлов А.С. Начало 2022-09-28 #
	ИначеЕсли структураОбъект.ТипОбъекта = "СтатьяЗатрат" Тогда
		ЗагрузитьСтатьюЗатрат(структураОбъект,ОписаниеОшибок,ЗапрашиваемыеОбъекты);		
	ИначеЕсли структураОбъект.ТипОбъекта = "ПриобретениеТоваровУслуг" Тогда
		ЗагрузитьПриобретениеТоваровУслуг(структураОбъект,ОписаниеОшибок,ЗапрашиваемыеОбъекты);		
	//Самойлов А.С. Конец  2022-09-28
	ИначеЕсли структураОбъект.ТипОбъекта = "АвансовыйОтчет" Тогда
		ЗагрузитьАвансовыйОтчет(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	ИначеЕсли структураОбъект.ТипОбъекта = "Реализация" Тогда
		ЗагрузитьРеализацию(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	ИначеЕсли структураОбъект.ТипОбъекта = "ВозвратТоваровОтКлиента" Тогда	
		ЗагрузитьВозвратТоваровОтПокупателя(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	ИначеЕсли структураОбъект.ТипОбъекта = "ОприходованиеТоваров" Тогда
		ЗагрузитьОприходованиеТоваров(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	ИначеЕсли структураОбъект.ТипОбъекта = "СписаниеНедостач" Тогда
		ЗагрузитьСписаниеНедостач(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	ИначеЕсли структураОбъект.ТипОбъекта = "ЭкварийнговаяОперация" Тогда
		ЗагрузитьОплатуПлатежнойКартой(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	ИначеЕсли структураОбъект.ТипОбъекта = "ВводОстатков" Тогда
		ЗагрузитьВводОстатков(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	Иначе
		ОписаниеОшибок.errorCodeObj = "404";
		ОписаниеОшибок.errorObj = структураОбъект.УИД;
		ОписаниеОшибок.errorDescriptionObj = "Для типа выгружаемого объекта " + структураОбъект.ТипОбъекта + " не задан алгоритм загрузки";  //!!+ добавить представление объекта
	КонецЕсли;	

КонецПроцедуры	

Функция UploadObjectsPOST(Запрос)
		
	МассивОшибокЗагрузки = Новый Массив; //Массив структур ошибок по объектам
	МассивЗапрашиваемыхОбъектов = Новый Массив;
	
	СтруктураОтвет = Новый Структура("errorCode, errorDescription, errorObj, requestedObj", 0, "", МассивОшибокЗагрузки, МассивЗапрашиваемыхОбъектов);
	СтруктураЗапрос = ПолучитьТелоЗапросаКакСтруктуру(Запрос);	
	Если СтруктураЗапрос = Неопределено Тогда
		СтруктураОтвет.errorCode = 601;
		СтруктураОтвет.errorDescription = "Ошибка парсинга JSON тела запроса";
		Возврат ПреобразоватьСтруктуруВHTTPОтвет(структураОтвет).ПолучитьТелоКакСтроку();
	КонецЕсли;
	
	СтруктураОбязательныхПараметров = Новый Структура("Объекты", Новый Структура("УИД, ТипОбъекта", "Строка", "Строка"));
	ОписаниеОшибок = "";
	ПроверитьЗаполненностьОбязательныхПараметров(СтруктураЗапрос, СтруктураОбязательныхПараметров, ОписаниеОшибок);
	
	Если ЗначениеЗаполнено(ОписаниеОшибок) Тогда
		СтруктураОтвет.errorCode = 602;
		СтруктураОтвет.errorDescription = ОписаниеОшибок;
		Возврат ПреобразоватьСтруктуруВHTTPОтвет(СтруктураОтвет);
	КонецЕсли;
	
	//ОписаниеОшибок = ""; //новый структура код, описание, уид и представление в erp, представление в БП
	
	НачатьТранзакцию();

	Для Каждого СтруктураОбъект Из СтруктураЗапрос.Объекты Цикл 
		ОписаниеОшибок = Новый Структура("errorCodeObj, errorObj, errorDescriptionObj", 0, СтруктураОбъект.УИД, "");
		ЗагрузитьОбъектПоСтруктуре(СтруктураОбъект, ОписаниеОшибок, МассивЗапрашиваемыхОбъектов);
		
		Если ОписаниеОшибок.errorCodeObj <> 0 Тогда
			СтруктураОтвет.errorObj.Добавить(ОписаниеОшибок);
		КонецЕсли;
	КонецЦикла;		

	Если ТранзакцияАктивна() Тогда
	
		Если МассивЗапрашиваемыхОбъектов.Количество() > 0 ИЛИ СтруктураОтвет.errorObj.Количество() > 0 Тогда
			СтруктураОтвет.requestedObj = МассивЗапрашиваемыхОбъектов;
			ОтменитьТранзакцию();
		Иначе
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	КонецЕсли;	
	
	//Если ЗначениеЗаполнено(ОписаниеОшибок) Тогда
	Если СтруктураОтвет.errorObj.Количество() > 0 Тогда
		СтруктураОтвет.errorCode = 600;
		СтруктураОтвет.errorDescription = "Объекты загрузки содержат ошибки!";	

		Возврат ПреобразоватьСтруктуруВHTTPОтвет(СтруктураОтвет);
	КонецЕсли;	
	
	//Возврат ПреобразоватьСтруктуруВHTTPОтвет(структураОтвет).ПолучитьТелоКакСтроку();
	Возврат ПреобразоватьСтруктуруВHTTPОтвет(СтруктураОтвет);
	
	#Область Предыдущий_код
	//структураОтвет = Новый Структура;
	//структураОтвет.Вставить("ErrorCode",0);
	//структураОтвет.Вставить("ErrorDescription","");
	//
	//структураЗапрос = ПолучитьТелоЗапросаКакСтруктуру(Запрос);
	//
	//Если структураЗапрос = Неопределено Тогда
	//	
	//	структураОтвет.errorCode = 601;
	//	структураОтвет.errorDescription = "Ошибка парсинга JSON тела запроса";
	//	Возврат ПреобразоватьСтруктуруВHTTPОтвет(структураОтвет);
	//	
	//КонецЕсли;
	//
	//структураОбязательныхПараметров = Новый Структура("Объекты",Новый Структура("УИД, Тип", "Строка", "Строка"));
	//ОписаниеОшибок = "";
	//ПроверитьЗаполненностьОбязательныхПараметров(структураЗапрос,структураОбязательныхПараметров,ОписаниеОшибок);
	//		
	//Если ЗначениеЗаполнено(ОписаниеОшибок) Тогда
	//
	//	структураОтвет.errorCode = 602;
	//	структураОтвет.errorDescription = ОписаниеОшибок;
	//	Возврат ПреобразоватьСтруктуруВHTTPОтвет(структураОтвет);
	//
	//КонецЕсли;
	//
	//Для Каждого структураОбъект Из структураЗапрос.Объекты Цикл
	//	
	//	ОписаниеОшибок = "";
	//	
	//	Если структураОбъект.Тип = "Номенклатура" Тогда
	//		                                                                       
	//		ЗагрузитьПозициюНоменклатуры(структураОбъект,ОписаниеОшибок);
	//		
	//	ИначеЕсли структураОбъект.Тип = "Контрагент" Тогда
	//		
	//		ЗагрузитьКонтрагента(структураОбъект,ОписаниеОшибок);  
	//		
	//	ИначеЕсли структураОбъект.Тип = "БанковскийСчет" Тогда
	//		
	//		ЗагрузитьБанковскийСчет(структураОбъект,ОписаниеОшибок);  
	//		
	//	ИначеЕсли структураОбъект.Тип = "ВидНачисленияОплатыТруда" Тогда
	//		
	//		ЗагрузитьВидНачисленияОплатыТруда(структураОбъект,ОписаниеОшибок);  
	//		
	//	ИначеЕсли структураОбъект.Тип = "Договор" Тогда
	//		
	//		ЗагрузитьДоговор(структураОбъект,ОписаниеОшибок);  
	//		
	//	ИначеЕсли структураОбъект.Тип = "ОсновноеСредство" Тогда
	//		
	//		ЗагрузитьОсновноеСредство(структураОбъект,ОписаниеОшибок);  
	//		
	//	ИначеЕсли структураОбъект.Тип = "ОбъектСтроительства" Тогда
	//		
	//		ЗагрузитьОбъектСтроительства(структураОбъект,ОписаниеОшибок);  
	//		
	//	ИначеЕсли структураОбъект.Тип = "ФизическоеЛицо" Тогда
	//		
	//		ЗагрузитьФизическоеЛицо(структураОбъект,ОписаниеОшибок);  

	//	ИначеЕсли структураОбъект.Тип = "РегистрацияВНалоговомОргане" Тогда
	//		
	//		ЗагрузитьРегистрациюВНалоговомОргане(структураОбъект,ОписаниеОшибок);  

	//	//ИначеЕсли виды активов и обязательств, виды платежей в бюджет, виды страховых взносов, нематериальные активы и расходы на НИОКР, 
	//	//группы номенклатуры, виды резервов или оценочных обязательств, прибыли и убытки, статьи расходов, статьи доходов, ?убыток предыдушего периода
	//	//склады, подразделения, способы строительства, статьи ДДС, уровни бюджетов
	//		
	//		
	//	ИначеЕсли структураОбъект.Тип = "АвансовыйОтчет" Тогда
	//		
	//		ЗагрузитьАвансовыйОтчет(структураОбъект,ОписаниеОшибок);
	//		
	//	ИначеЕсли структураОбъект.Тип = "КорректировкаДолга" Тогда  //взаимозачеты и корректировки задолженности
	//		
	//		ЗагрузитьКорректировкаДолга(структураОбъект,ОписаниеОшибок); 
	//		
	//	ИначеЕсли структураОбъект.Тип = "ТребованиеНакладная" Тогда  //внутреннее потребление
	//		
	//		ЗагрузитьКорректировкаДолга(структураОбъект,ОписаниеОшибок);
	//		
	//	ИначеЕсли структураОбъект.Тип = "ПередачаМатериаловВЭксплуатацию" Тогда  //внутреннее потребление
	//		
	//		ЗагрузитьКорректировкаДолга(структураОбъект,ОписаниеОшибок);
	//		
	//	ИначеЕсли структураОбъект.Тип = "ВозвратОтКлиента" Тогда
	//		
	//		ЗагрузитьВозвратОтКлиента(структураОбъект,ОписаниеОшибок);
	//		
	//	ИначеЕсли структураОбъект.Тип = "ВозвратПоставщику" Тогда
	//		
	//		ЗагрузитьВозвратПоставщику(структураОбъект,ОписаниеОшибок);
	//	
	//	ИначеЕсли структураОбъект.Тип = "КорректировкаПоступления" Тогда //корректировка приобретения
	//		
	//		ЗагрузитьКорректировкуПоступления(структураОбъект,ОписаниеОшибок);
	//	
	//	ИначеЕсли структураОбъект.Тип = "КорректировкаРеализации" Тогда
	//		
	//		ЗагрузитьКорректировкуРеализации(структураОбъект,ОписаниеОшибок);
	//		
	//	ИначеЕсли структураОбъект.Тип = "МодернизацияОС" Тогда
	//		
	//		ЗагрузитьМодернизациюОС(структураОбъект,ОписаниеОшибок);
	//		
	//	ИначеЕсли структураОбъект.Тип = "НачислениеДивидендов" Тогда
	//		
	//		ЗагрузитьНачислениеДивидендов(структураОбъект,ОписаниеОшибок);

	//	ИначеЕсли структураОбъект.Тип = "ОприходованиеТоваров" Тогда // оприходование излишков товаров
	//		
	//		ЗагрузитьОприходованиеТоваров(структураОбъект,ОписаниеОшибок);
	//		
	//	ИначеЕсли структураОбъект.Тип = "ОтражениеЗарплатыВБухучете" Тогда
	//		
	//		ЗагрузитьОтражениеЗарплатыВБухучете(структураОбъект,ОписаниеОшибок);
	//		
	//	ИначеЕсли структураОбъект.Тип = "ОтчетКомиссионера" Тогда
	//		
	//		ЗагрузитьОтчетКомиссионера(структураОбъект,ОписаниеОшибок);
	//		
	//	ИначеЕсли структураОбъект.Тип = "Перемещение" Тогда
	//		
	//		ЗагрузитьПеремещение(структураОбъект,ОписаниеОшибок);
	//		
	//	ИначеЕсли структураОбъект.Тип = "ПоступлениеНаРС" Тогда
	//		
	//		ЗагрузитьПоступлениеНаРС(структураОбъект,ОписаниеОшибок);
	//	
	//	ИначеЕсли структураОбъект.Тип = "Поступление" Тогда //поступление услун по аренде, приобретение товаров, приобретение услуг и прочих активов + передача товаров
	//		
	//		ЗагрузитьПоступление(структураОбъект,ОписаниеОшибок); 
	//		
	//	ИначеЕсли структураОбъект.Тип = "ПриходныйКассовыйОрдер" Тогда
	//		
	//		ЗагрузитьПКО(структураОбъект,ОписаниеОшибок);
	//		
	//	ИначеЕсли структураОбъект.Тип = "РасходныйКассовыйОрдер" Тогда
	//		
	//		ЗагрузитьРКО(структураОбъект,ОписаниеОшибок);
	//		
	//	ИначеЕсли структураОбъект.Тип = "Реализация" Тогда //реализация + передача товаров
	//		
	//		ЗагрузитьРеализацию(структураОбъект,ОписаниеОшибок);
	//					
	//	ИначеЕсли структураОбъект.Тип = "РезервыОтпусков" Тогда
	//		
	//		ЗагрузитьРезервыОтпусков(структураОбъект,ОписаниеОшибок);
	//							
	//	ИначеЕсли структураОбъект.Тип = "Комплектация" Тогда
	//		
	//		ЗагрузитьКомплектацию(структураОбъект,ОписаниеОшибок);
	//		
	//	ИначеЕсли структураОбъект.Тип = "СчетФактураВыданный" Тогда
	//		
	//		ЗагрузитьСчетФактуруВыданный(структураОбъект,ОписаниеОшибок);

	//	ИначеЕсли структураОбъект.Тип = "СчетФактураПолученный" Тогда
	//		
	//		ЗагрузитьСчетФактуруПолученный(структураОбъект,ОписаниеОшибок);
	//							
	//	ИначеЕсли структураОбъект.Тип = "ЭквайринговаяОперация" Тогда
	//		
	//		ЗагрузитьЭквайринговуюОперацию(структураОбъект,ОписаниеОшибок); 
	//			
	//	ИначеЕсли структураОбъект.Тип = "ОперацияБух" Тогда //выкуп товаров с хранения, заключение договора аренды, записи книг покупок и продаж, операция (рег.учет), отгрузка с хранения, отражение прочих доходов и расходов, приемка на хранение 
	//		
	//		ЗагрузитьОперациюБух(структураОбъект,ОписаниеОшибок);

	//	ИначеЕсли структураОбъект.Тип = "СчетПокупателю" Тогда //заказ клиента 
	//		
	//		ЗагрузитьСчетПокупателю(структураОбъект,ОписаниеОшибок);

	//	ИначеЕсли структураОбъект.Тип = "СчетОтПоставщика" Тогда //заказ поставщику 
	//		
	//		ЗагрузитьСчетОтПоставщика(структураОбъект,ОписаниеОшибок);
	//		
	//	Иначе
	//		
	//		структураОтвет.errorCode = 603;
	//		структураОтвет.errorDescription = "Неизвестный тип объекта - " + структураОбъект.Тип;
	//		Возврат ПреобразоватьСтруктуруВHTTPОтвет(структураОтвет);	
	//			
	//	КонецЕсли;
	//	
	//	Если ЗначениеЗаполнено(ОписаниеОшибок) Тогда
	//		
	//		Если СтрНайти(ОписаниеОшибок,"Не удалось провести документ") = 0 Тогда			
	//			структураОтвет.errorCode = 604;
	//		Иначе
	//			структураОтвет.errorCode = 605;
	//		КонецЕсли;
	//			
	//		структураОтвет.errorDescription = "При загрузке объекта " + структураОбъект.Тип + " с идентификатором " + структураОбъект.УИД + " возникли ошибки " 
	//				+ Символы.ПС + ОписаниеОшибок;					
	//		Возврат ПреобразоватьСтруктуруВHTTPОтвет(структураОтвет);	
	//		
	//	КонецЕсли;		
	//	
	//КонецЦикла;	
	//
	////!! обернуть в попытку и отправлять описание ошибки в случае исключения - то же самое выпилить в Эксклюзиве
	//
	//Возврат ПреобразоватьСтруктуруВHTTPОтвет(структураОтвет);
	#КонецОбласти
	
КонецФункции

Функция VersionGET(Запрос)
	
	структураОтвет = Новый Структура;
	структураОтвет.Вставить("ErrorCode", 0);
	структураОтвет.Вставить("ErrorDescription", "");
	
	УстановитьПривилегированныйРежим(Истина);
	мсвРасширений = РасширенияКонфигурации.Получить(Новый Структура("Имя", "ОбменСУТ"));
	
	Если мсвРасширений.Количество() = 0 Тогда
		Версия = "Не установлено";
	Иначе
		Версия = мсвРасширений[0].Версия;
	КонецЕсли;	
	
	структураОтвет.Вставить("Version", Версия);
	структураОтвет.Вставить("ConfigurationVersion", Метаданные.Версия); 
	
	СисИнфо = Новый СистемнаяИнформация;	
	структураОтвет.Вставить("PlatformVersion", СисИнфо.ВерсияПриложения); 
	
	Возврат ПреобразоватьСтруктуруВHTTPОтвет(структураОтвет);
	
КонецФункции

#Область Пользователи
Процедура ДобавитьДанныеПользователяВСтруктуру(структураСДанными,Пользователь)
	
	структураСДанными.Вставить("Name",Пользователь.Имя);
	структураСДанными.Вставить("Active",Пользователь.АутентификацияСтандартная);
	
КонецПроцедуры

Функция UserСоздать(Запрос)
	
	структураОтвет = Новый Структура;
	структураОтвет.Вставить("ErrorCode",0);
	структураОтвет.Вставить("ErrorDescription","");
	
	структураЗапрос = ПолучитьТелоЗапросаКакСтруктуру(Запрос);
	
	Если структураЗапрос = Неопределено Тогда
		
		структураОтвет.errorCode = 602;
		структураОтвет.errorDescription = "Ошибка парсинга JSON тела запроса";
		Возврат ПреобразоватьСтруктуруВHTTPОтвет(структураОтвет);
		
	КонецЕсли;
	
	структураОбязательныхПараметров = Новый Структура("Name,Password,Active","Строка","Строка","Булево");
	ОписаниеОшибок = "";
	ПроверитьЗаполненностьОбязательныхПараметров(структураЗапрос,структураОбязательныхПараметров,ОписаниеОшибок);
	
	Если ЗначениеЗаполнено(ОписаниеОшибок) Тогда
		
		структураОтвет.errorCode = 101;
		структураОтвет.errorDescription = ОписаниеОшибок;
		Возврат ПреобразоватьСтруктуруВHTTPОтвет(структураОтвет);
		
	КонецЕсли;
	
	новыйПользователь = ПользователиИнформационнойБазы.СоздатьПользователя();
	новыйПользователь.Имя = структураЗапрос.Name;
	новыйПользователь.ПолноеИмя = структураЗапрос.Name;
	новыйПользователь.СохраняемоеЗначениеПароля = структураЗапрос.Password;
	новыйПользователь.АутентификацияСтандартная = структураЗапрос.Active; //!!??
	//новыйПользователь.АутентификацияОС = Истина;
	новыйПользователь.АутентификацияОС = Ложь;
	//новыйПользователь.ПользовательОС = "\\jira\" + структураЗапрос.Name;  //!! переносим из ERP, там эти данные есть
	новыйПользователь.ЗапрещеноИзменятьПароль = Истина;
	новыйПользователь.ПоказыватьВСпискеВыбора = Ложь;
	
	Попытка
		новыйПользователь.Записать();
	Исключение
		структураОтвет.errorCode = 102;
		структураОтвет.errorDescription = "Ошибка при записи нового пользователя:" + Символы.ПС + ОписаниеОшибки();
		Возврат ПреобразоватьСтруктуруВHTTPОтвет(структураОтвет);
	КонецПопытки;
	
	ПользовательИзСправочника = Справочники.Пользователи.НайтиПоНаименованию(новыйПользователь.Имя);
	
	Если НЕ ПользовательИзСправочника.Пустая() Тогда		
		ПользовательОбъект = ПользовательИзСправочника.ПолучитьОбъект();		
	Иначе		
		ПользовательОбъект = Справочники.Пользователи.СоздатьЭлемент();		
	КонецЕсли;
	
	ПользовательОбъект.Наименование = структураЗапрос.Name;
	ПользовательОбъект.Недействителен = НЕ структураЗапрос.Active; //!!??
	ПользовательОбъект.ИдентификаторПользователяИБ = новыйПользователь.УникальныйИдентификатор;
	ПользовательОбъект.ПометкаУдаления = Ложь;
	ПользовательОбъект.ОбменДанными.Загрузка = Истина;
	
	ПользовательОбъект.Записать(); 
	ПользовательИзСправочника = ПользовательОбъект.Ссылка;
	новыйПользователь.Записать();
	
	ДобавитьДанныеПользователяВСтруктуру(структураОтвет,новыйПользователь);	
	Возврат ПреобразоватьСтруктуруВHTTPОтвет(структураОтвет);	
	
КонецФункции

Функция UserПолучить(Запрос)
	
	структураОтвет = Новый Структура;
	структураОтвет.Вставить("ErrorCode",0);
	структураОтвет.Вставить("ErrorDescription","");
	
	Попытка		
		структураПараметры = Новый Структура;		
		Для Каждого Параметр Из Запрос.ПараметрыЗапроса Цикл			
			Если ТипЗнч(Параметр.Ключ) = Тип("Строка") Тогда				
				структураПараметры.Вставить(Параметр.Ключ,Параметр.Значение);						
			КонецЕсли;				
		КонецЦикла;		
	Исключение		
		структураОтвет.errorCode = 601;
		структураОтвет.errorDescription = "Не удалось разобрать строку с параметрами";
		Возврат ПреобразоватьСтруктуруВHTTPОтвет(структураОтвет);		
	КонецПопытки;
	
	структураОбязательныхПараметров = Новый Структура("Name","Строка");
	ОписаниеОшибок = "";
	ПроверитьЗаполненностьОбязательныхПараметров(структураПараметры,структураОбязательныхПараметров,ОписаниеОшибок);
	
	Если ЗначениеЗаполнено(ОписаниеОшибок) Тогда
		
		структураОтвет.errorCode = 101;
		структураОтвет.errorDescription = ОписаниеОшибок;
		Возврат ПреобразоватьСтруктуруВHTTPОтвет(структураОтвет);
		
	КонецЕсли;
	
	Пользователь = ПользователиИнформационнойБазы.НайтиПоИмени(структураПараметры.Name);
	
	Если Пользователь = Неопределено Тогда
		структураОтвет.errorCode = 103;
		структураОтвет.errorDescription = "Не найден пользователь с именем " + структураПараметры.Name;		
		Возврат ПреобразоватьСтруктуруВHTTPОтвет(структураОтвет);
	КонецЕсли;
	
	ДобавитьДанныеПользователяВСтруктуру(структураОтвет,Пользователь);
	Возврат ПреобразоватьСтруктуруВHTTPОтвет(структураОтвет);	
	
КонецФункции

#КонецОбласти

Функция НайтиОбъектПоИдентификатору(П1 = Неопределено,П2 = Неопределено,П3 = Неопределено,П4 = Неопределено)
	Возврат Неопределено;
КонецФункции
Функция НайтиОрганизацию(П1 = Неопределено,П2 = Неопределено,П3 = Неопределено,П4 = Неопределено)
	Возврат Неопределено;
КонецФункции
Функция НайтиКонтрагента(П1 = Неопределено,П2 = Неопределено,П3 = Неопределено,П4 = Неопределено)
	Возврат Неопределено;
КонецФункции
Функция НайтиОбъектСтроительства(П1 = Неопределено,П2 = Неопределено,П3 = Неопределено,П4 = Неопределено)
	Возврат Неопределено;
КонецФункции