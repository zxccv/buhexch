//************************************************
//Общие функции
//************************************************    

#Область ОбщиеФункции

Функция ПреобразоватьСтруктуруВHTTPОтвет(структураОтвет, КодОтвета = 200)
	
	Ответ = Новый HTTPСервисОтвет(КодОтвета);
	
	Ответ.Заголовки.Вставить("Accept-Language", "ru");
    Ответ.Заголовки.Вставить("Accept-Charset","utf-8");
    Ответ.Заголовки.Вставить("Content-Language", "ru");
    Ответ.Заголовки.Вставить("Content-Charset", "utf-8");
    Ответ.Заголовки.Вставить("Content-type", "application/json; charset=utf-8");

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
		
	ЗаписатьJSON(ЗаписьJSON, структураОтвет);
	
	Ответ.УстановитьТелоИзСтроки(ЗаписьJSON.Закрыть(),КодировкаТекста.UTF8);
	
	Возврат Ответ;
	
КонецФункции

Функция ПолучитьТелоЗапросаКакСтруктуру(Запрос);
	
	Попытка
		ТелоЗапроса = Запрос.ПолучитьТелоКакСтроку();
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ТелоЗапроса);
		
		ИменаСвойствСоЗначениямиДата = ПолучитьИменаСвойствСоЗначениямиДата();
		
		//структураЗапрос = ПрочитатьJSON(ЧтениеJSON,,"Дата,ДатаВходящегоДокумента,ДатаСФ,ДатаРождения,ДатаРегистрации,СвидетельствоДатаВыдачи");
		структураЗапрос = ПрочитатьJSON(ЧтениеJSON,,ИменаСвойствСоЗначениямиДата);
		
		Возврат структураЗапрос;
		
	Исключение
		
		Возврат Неопределено;
		                        
	КонецПопытки;
	
КонецФункции

Функция ПолучитьИменаСвойствСоЗначениямиДата()
	
	МассивДаты = Новый Массив;
	МассивДаты.Добавить("Дата");
	МассивДаты.Добавить("ДатаВходящегоДокумента");
	МассивДаты.Добавить("ДатаСФ");
	МассивДаты.Добавить("ДатаРождения");
	МассивДаты.Добавить("ДатаРегистрации");
	МассивДаты.Добавить("СвидетельствоДатаВыдачи");
	МассивДаты.Добавить("ДатаПодключения");
	МассивДаты.Добавить("ЛицензияДатаНачала");
	МассивДаты.Добавить("ЛицензияДатаОкончания");
	МассивДаты.Добавить("ЛицензияДатаБлокировки");
	МассивДаты.Добавить("ДатаОткрытия");
	МассивДаты.Добавить("ДатаЗакрытия");
	МассивДаты.Добавить("ДатаВыплаты");
	МассивДаты.Добавить("Период");
	МассивДаты.Добавить("ДатаОплаты");
	МассивДаты.Добавить("ДатаСобытия");
	МассивДаты.Добавить("КорректируемыйПериод");
	МассивДаты.Добавить("ДатаДокументаОплаты");
	МассивДаты.Добавить("ДатаСчетаФактурыКомиссионера");
	МассивДаты.Добавить("ДатаВыставленияПолучения");
	МассивДаты.Добавить("ДатаСчетаФактуры");
	МассивДаты.Добавить("ДатаИсправления");
	МассивДаты.Добавить("ДатаКорректировочногоСчетаФактуры");
	МассивДаты.Добавить("ДатаИсправленияКорректировочногоСчетаФактуры"); 
	МассивДаты.Добавить("ДатаСчетаФактурыПродавца");	
	МассивДаты.Добавить("ДатаПостановкиНаУчет");	
	МассивДаты.Добавить("ПериодРегистрации");	
	МассивДаты.Добавить("ПериодВзаиморасчетов");	
	МассивДаты.Добавить("МесяцНалоговогоПериода");	
	//МассивДаты.Добавить("");	
	//МассивДаты.Добавить("");	
	//МассивДаты.Добавить("");	
	//МассивДаты.Добавить("");	
	//МассивДаты.Добавить("");	
	//МассивДаты.Добавить("");	
	
	Возврат СтрСоединить(МассивДаты,",");
		
КонецФункции	

Процедура ПроверитьЗаполненностьОбязательныхПараметров(структураЗапрос, структураОбязательныхПараметров, ОписаниеОшибок, ПутьКЗначениям = "")
	
	Для Каждого ОбязательныйПараметр Из структураОбязательныхПараметров Цикл
		
		Если НЕ структураЗапрос.Свойство(ОбязательныйПараметр.Ключ) Тогда
			Если ОписаниеОшибок <> "" Тогда
				ОписаниеОшибок = ОписаниеОшибок + Символы.ПС;
			КонецЕсли;
			ОписаниеОшибок = ОписаниеОшибок + ПутьКЗначениям + "Отсутствует обязательный параметр " + ОбязательныйПараметр.Ключ;
			Продолжить;
		КонецЕсли;
		
		ПроверяемоеЗначение = структураЗапрос[ОбязательныйПараметр.Ключ];
		
		Если Тип(ОбязательныйПараметр.Значение) = Тип("Структура") Тогда
			
			Если ТипЗнч(ПроверяемоеЗначение) = Тип("Массив") Тогда
				
				Для Н = 0 По ПроверяемоеЗначение.Количество() - 1 Цикл
					
					ПроверитьЗаполненностьОбязательныхПараметров(ПроверяемоеЗначение[Н],ОбязательныйПараметр.Значение,ОписаниеОшибок,ПутьКЗначениям + ОбязательныйПараметр.Ключ + "[" + Н + "].");	
					
				КонецЦикла;
				
			ИначеЕсли ТипЗнч(ПроверяемоеЗначение) = Тип("Структура") Тогда
				
				ПроверитьЗаполненностьОбязательныхПараметров(ПроверяемоеЗначение,ОбязательныйПараметр.Значение,ОписаниеОшибок,ПутьКЗначениям + ОбязательныйПараметр.Ключ + ".");
				
			Иначе
				Если ОписаниеОшибок <> "" Тогда
					ОписаниеОшибок = ОписаниеОшибок + Символы.ПС;
				КонецЕсли;
				ОписаниеОшибок = ОписаниеОшибок + ПутьКЗначениям + "Неправильный тип значения обязательного параметра " + ОбязательныйПараметр.Ключ + ", в этом параметре должен быть массив или структура";
				Продолжить;
			КонецЕсли;
			
		Иначе
								
			Если ТипЗнч(ПроверяемоеЗначение) = Тип("Массив") Тогда
				
				Для Каждого ПроверяемыйЭлемент Из ПроверяемоеЗначение Цикл
					
					Если ТипЗнч(ПроверяемыйЭлемент) <> Тип(ОбязательныйПараметр.Значение) Тогда
				
						Если ОписаниеОшибок <> "" Тогда
							ОписаниеОшибок = ОписаниеОшибок + Символы.ПС;
						КонецЕсли;
						ОписаниеОшибок = ОписаниеОшибок + ПутьКЗначениям + "Неправильный тип значения обязательного параметра " + ОбязательныйПараметр.Ключ + ", должно быть значение типа " + ОбязательныйПараметр.Значение;
						Прервать;
				
					КонецЕсли;	
					
				КонецЦикла;
				
			ИначеЕсли Тип(ОбязательныйПараметр.Значение) = Тип("УникальныйИдентификатор") Тогда
				
				Попытка
					УИД = Новый УникальныйИдентификатор(ПроверяемоеЗначение);
				Исключение
					Если ОписаниеОшибок <> "" Тогда
						ОписаниеОшибок = ОписаниеОшибок + Символы.ПС;
					КонецЕсли;
					ОписаниеОшибок = ОписаниеОшибок + ПутьКЗначениям + "Неправильный тип значения обязательного параметра " + ОбязательныйПараметр.Ключ + ", должно быть значение типа УникальныйИдентификатор";
					Продолжить;		
				КонецПопытки;
				
			ИначеЕсли ТипЗнч(ПроверяемоеЗначение) <> Тип(ОбязательныйПараметр.Значение) Тогда
				
				Если ОписаниеОшибок <> "" Тогда
					ОписаниеОшибок = ОписаниеОшибок + Символы.ПС;
				КонецЕсли;
				ОписаниеОшибок = ОписаниеОшибок + ПутьКЗначениям + "Неправильный тип значения обязательного параметра " + ОбязательныйПараметр.Ключ + ", должно быть значение типа " + ОбязательныйПараметр.Значение;
				Продолжить;	
				
			КонецЕсли;
						
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьВнешнююНастройку(НаименованиеНастройки,ЭтоТЗ = Истина, ОднаСтрокаВернутьСтруктуру = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Настройка = ХранилищеОбщихНастроек.Загрузить("НастройкиЭксклюзив",НаименованиеНастройки,,"НастройкиЭксклюзив");
		
	Если НЕ ЭтоТЗ Тогда
		Если Настройка <> Неопределено Тогда
			Возврат Настройка;
		Иначе
			ВызватьИсключение "Настройка " + НаименованиеНастройки + " не найдена";
		КонецЕсли;
	КонецЕсли;
		      	
	Если ТипЗнч(Настройка) = Тип("ТаблицаЗначений") И Настройка.Количество() > 0 Тогда		
		
		Если ОднаСтрокаВернутьСтруктуру Тогда
			структураНастройка = Новый Структура;
			Для Каждого Колонка Из Настройка.Колонки Цикл
				структураНастройка.Вставить(Колонка.Имя,Настройка[0][Колонка.Имя]);				
			КонецЦикла;
			Возврат структураНастройка;
		Иначе
			Возврат Настройка;
		КонецЕсли;
				
	Иначе
		ВызватьИсключение "Настройка " + НаименованиеНастройки + " не найдена";
	КонецЕсли;
	
КонецФункции

Процедура УстановитьЗначениеДопСведенияОбъекта(Объект, НаименованиеДопСведения, Значение = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Объект = Объект;
	МенеджерЗаписи.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Заголовок", НаименованиеДопСведения);
	Если Значение <> Неопределено Тогда
		МенеджерЗаписи.Значение = Значение;
		МенеджерЗаписи.Записать();
	Иначе
		МенеджерЗаписи.Удалить();
	КонецЕсли;

	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ПолучитьЗначениеДопСведенияОбъекта(Объект, НаименованиеДопСведения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Объект);
	НаборЗаписей.Отбор.Свойство.Установить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Заголовок", НаименованиеДопСведения));
	НаборЗаписей.Прочитать();
	ВозвращаемоеЗначение = Неопределено;
	
	Если НаборЗаписей.Количество() И ЗначениеЗаполнено(НаборЗаписей[0].Значение) Тогда
		ВозвращаемоеЗначение = НаборЗаписей[0].Значение;	
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

//Функция ДокументЗапрещеноИзменять(Документ)
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст =
//	"ВЫБРАТЬ
//	|	ДополнительныеСведения.Значение КАК Значение
//	|ИЗ
//	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
//	|ГДЕ
//	|	ДополнительныеСведения.Объект = &Объект
//	|	И ДополнительныеСведения.Свойство = &Свойство";
//	
//	Запрос.УстановитьПараметр("Объект",Документ);
//	Запрос.УстановитьПараметр("Свойство",ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя","НеЗагружатьИзмененияИзУТ"));
//	
//	Выборка = Запрос.Выполнить().Выбрать();
//	
//	Если Выборка.Следующий() И Выборка.Значение = Истина Тогда
//		Возврат Истина;
//	Иначе
//		Возврат Ложь;
//	КонецЕсли;
//	
//КонецФункции

Функция НайтиОбъектПоИдентификаторуНов(УИД, ТипОбъекта = Неопределено, СтруктураОтбор = Неопределено)
	
	Если Не УИДЗаполнен(УИД) Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПубличныеИдентификаторыСинхронизируемыхОбъектов.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.ПубличныеИдентификаторыСинхронизируемыхОбъектов КАК ПубличныеИдентификаторыСинхронизируемыхОбъектов
	|ГДЕ
	|	ПубличныеИдентификаторыСинхронизируемыхОбъектов.Идентификатор = &УИД
	|	И ПубличныеИдентификаторыСинхронизируемыхОбъектов.УзелИнформационнойБазы = НЕОПРЕДЕЛЕНО";
	
	Запрос.УстановитьПараметр("УИД", Лев(УИД, 36));
	                                    	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
			
	Если ТипОбъекта = Неопределено 
		И СтруктураОтбор = Неопределено Тогда
		
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			Возврат Выборка.Ссылка;
		Иначе 
			ВызватьИсключение "Найдено больше одного объекта с идентификатором " + УИД;
		КонецЕсли;
		
	Иначе
		
		ПодходящиеОбъекты = Новый Массив;
		
		Пока Выборка.Следующий() Цикл
			
			Если ТипОбъекта <> Неопределено 
				И ТипЗнч(Выборка.Ссылка) <> ТипОбъекта Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтруктураОтбор <> Неопределено Тогда
				
				НеПодходит = Ложь;
				
				Для Каждого ЭлементОтбора Из СтруктураОтбор Цикл
					
					Если Выборка.Ссылка[ЭлементОтбора.Ключ] <> ЭлементОтбора.Значение Тогда
						НеПодходит = Истина;
						Прервать;
					КонецЕсли;
					
				КонецЦикла;   
				
				Если НеПодходит Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			ПодходящиеОбъекты.Добавить(Выборка.Ссылка);
			
		КонецЦикла;      
		
		Если ПодходящиеОбъекты.Количество() = 1 Тогда
			Возврат ПодходящиеОбъекты[0];
		ИначеЕсли ПодходящиеОбъекты.Количество() = 0 Тогда
			Возврат Неопределено;
		Иначе
			ВызватьИсключение "Найдено больше одного объекта с идентификатором " + УИД;
		КонецЕсли;  	
		
	КонецЕсли;
	
КонецФункции  

Функция НайтиСоздатьОбъектДокумента(УИДДокумента, ТипДокумента)
	
	ДокументСсылка = НайтиОбъектПоИдентификаторуНов(УИДДокумента, Тип("ДокументСсылка." + ТипДокумента));	
	
	Если ДокументСсылка <> Неопределено И ОбщегоНазначения.СсылкаСуществует(ДокументСсылка) Тогда
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	Иначе
		ДокументОбъект = Документы[ТипДокумента].СоздатьДокумент();
		ДокументОбъект.УстановитьСсылкуНового(Документы[ТипДокумента].ПолучитьСсылку());	
		ЗаписатьИдентификаторВРегистр(ДокументОбъект.ПолучитьСсылкуНового(), УИДДокумента);
	КонецЕсли;	
	
	Возврат ДокументОбъект;
	
КонецФункции

Процедура ЗаполнитьРеквизитПоДаннымERP(Объект, ИмяРеквизита, ОбъектERP, ИмяРеквизитаERP, ТипРеквизита = Неопределено, ЗапрашиваемыеОбъекты = Неопределено, ТипПриемника = "")  
	
	Если НЕ ОбъектERP.Свойство(ИмяРеквизитаERP)
		ИЛИ НЕ ЗначениеЗаполнено(ОбъектERP[ИмяРеквизитаERP]) Тогда
		
		Объект[ИмяРеквизита] = Неопределено;
		Возврат;
		
	КонецЕсли;
	
	Если ТипЗнч(Объект[ИмяРеквизита]) = Тип("ПланСчетовСсылка.Хозрасчетный") Тогда
		Если ЗначениеЗаполнено(ОбъектERP[ИмяРеквизитаERP]) Тогда
			Объект[ИмяРеквизита] = ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора", ОбъектERP[ИмяРеквизитаERP]);	
		Иначе 
			Объект[ИмяРеквизита] = ПланыСчетов.Хозрасчетный.ПустаяСсылка();	
		КонецЕсли;
		Возврат;
	КонецЕсли;  
	
	Если ТипРеквизита <> Неопределено Тогда
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипРеквизита);
		Если Метаданные.Перечисления.Содержит(ОбъектМетаданных) Тогда  
			
			Если ЗначениеЗаполнено(ОбъектERP[ИмяРеквизитаERP])	
				И Метаданные.Перечисления[ТипПриемника].ЗначенияПеречисления.Найти(ОбъектERP[ИмяРеквизитаERP]) <> Неопределено Тогда
				Объект[ИмяРеквизита] = Перечисления[ТипПриемника][ОбъектERP[ИмяРеквизитаERP]];
			Иначе	
				Объект[ИмяРеквизита] = Перечисления[ТипПриемника].ПустаяСсылка();			
			КонецЕсли;	
			
			Возврат;
		КонецЕсли;
	КонецЕсли;
			
	Если УИДЗаполнен(ОбъектERP[ИмяРеквизитаERP]) Тогда                        
		Значение = НайтиОбъектПоИдентификаторуНов(ОбъектERP[ИмяРеквизитаERP], ТипРеквизита);
	
		Если Значение <> Неопределено Тогда
			Объект[ИмяРеквизита] = Значение;
		Иначе
			Объект[ИмяРеквизита] = Неопределено;
			Если ЗапрашиваемыеОбъекты <> Неопределено Тогда
				Если ОбъектERP.Свойство("УИД") Тогда
					УИДВладельца = ОбъектERP.УИД;
				Иначе
					УИДВладельца = "";
				КонецЕсли;      
				//Савина Н. #1 Начало 28.09.2022
				Если ТипПриемника <> "" Тогда
					СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", УИДВладельца, ОбъектERP[ИмяРеквизитаERP], ИмяРеквизитаERP, XmlТипЗнч(ТипПриемника).ИмяТипа);
				Иначе
					СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", УИДВладельца, ОбъектERP[ИмяРеквизитаERP], ИмяРеквизитаERP, "");
				КонецЕсли;
				//Савина Н. Конец 28.09.2022
				ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Объект[ИмяРеквизита] = Неопределено;
	КонецЕсли;
			
КонецПроцедуры

Процедура ЗаписатьИдентификаторВРегистр(Ссылка, УИД)
	
	мзИдентификаторы = РегистрыСведений.ПубличныеИдентификаторыСинхронизируемыхОбъектов.СоздатьМенеджерЗаписи();
	мзИдентификаторы.Идентификатор = Лев(УИД, 36);
	мзИдентификаторы.Ссылка = Ссылка;
	мзИдентификаторы.УзелИнформационнойБазы = Неопределено;
	мзИдентификаторы.Записать();
	
КонецПроцедуры   

Функция УИДЗаполнен(УИДСтрока)
	
	Если УИДСтрока = "" ИЛИ Лев(УИДСтрока, 36) = "00000000-0000-0000-0000-000000000000" Тогда
		Возврат Ложь;
	Иначе            
		Возврат Истина;
	КонецЕсли;	
	
КонецФункции	

Процедура ЗаполнитьНомерГТД(Нстр, структураГТД, ЗапрашиваемыеОбъекты, УИДВладельца)
	
	Если СокрЛП(структураГТД.Код) = "" ИЛИ СтрНайти(структураГТД.Код, "-") > 0 ИЛИ СтрНайти(структураГТД.Код, "_") > 0 Тогда
		НСтр.НомерГТД = Справочники.НомераГТД.ПустаяСсылка();
		Возврат;
	КонецЕсли;
	
	Страна = Неопределено;
	Если УИДЗаполнен(структураГТД.СтранаПроисхождения) Тогда
		Страна = НайтиОбъектПоИдентификаторуНов(структураГТД.СтранаПроисхождения);
		Если Страна = Неопределено Тогда
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", УИДВладельца, структураГТД.СтранаПроисхождения, "СтранаПроисхождения", XmlТипЗнч(Нстр.СтранаПроисхождения).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);
		КонецЕсли;	
	КонецЕсли;	
	
	Нстр.СтранаПроисхождения = Страна;
	
	НомерГТД = Справочники.НомераГТД.НайтиПоКоду(СокрЛП(структураГТД.Код));
	Если Не ЗначениеЗаполнено(НомерГТД) Тогда
		НомерГТДОбъект = Справочники.НомераГТД.СоздатьЭлемент();		
		ЗаполнитьЗначенияСвойств(НомерГТДОбъект, структураГТД);
		НомерГТДОбъект.Код = СокрЛП(структураГТД.Код); 
		НомерГТДОбъект.Записать();
		НомерГТД = НомерГТДОбъект.Ссылка;
	Иначе                                           
		Если НомерГТД.ПометкаУдаления <> структураГТД.ПометкаУдаления ИЛИ НомерГТД.СтранаВвозаНеРФ <> структураГТД.СтранаВвозаНеРФ Тогда
			НомерГТДОбъект = НомерГТД.ПолучитьОбъект();
			ЗаполнитьЗначенияСвойств(НомерГТДОбъект, структураГТД, "ПометкаУдаления, СтранаВвозаНеРФ");
			НомерГТДОбъект.Записать();
		КонецЕсли;	
	КонецЕсли;	
	
	Нстр.НомерГТД = НомерГТД;
	
КонецПроцедуры

Функция ПроверкаГТД(НомерГТД, СтранаПроисхождения)

	//!! исправить проверку
	Если (ТипЗнч(НомерГТД)<>Тип("Строка") ИЛИ СтрНайти(НомерГТД, "-") > 0 ИЛИ СтрНайти(НомерГТД, "_") > 0)
			И  СтранаПроисхождения = "РОССИЯ" Тогда //!!
		Возврат Ложь;
	КонецЕсли;	
	
	Возврат Истина;
	
КонецФункции  

Функция НайтиСоздатьОсновнойДоговорКонтрагента(Организация, Контрагент, Параметры)
	
	Если Не ЗначениеЗаполнено(Организация) ИЛИ Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Неопределено; // или пустую ссылку?
	КонецЕсли;	
	
	ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов[Параметры.ВидДоговора];
	Валюта = Параметры.Валюта;
	
	//ищем подходящий договор
	ЗапросДоговор = Новый Запрос;
	ЗапросДоговор.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПубличныеИдентификаторыСинхронизируемыхОбъектов КАК ПубличныеИдентификаторыСинхронизируемыхОбъектов
	|		ПО (ДоговорыКонтрагентов.Ссылка = ПубличныеИдентификаторыСинхронизируемыхОбъектов.Ссылка)
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец = &Владелец
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &Валюта
	|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора
	|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления
	|	И ПубличныеИдентификаторыСинхронизируемыхОбъектов.Ссылка ЕСТЬ NULL
	|"; 
	
	ЗапросДоговор.УстановитьПараметр("Владелец", Контрагент);
	ЗапросДоговор.УстановитьПараметр("Организация", Организация);
	ЗапросДоговор.УстановитьПараметр("Валюта", Валюта);
	ЗапросДоговор.УстановитьПараметр("ВидДоговора", ВидДоговора);
	
	Результат = ЗапросДоговор.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Договор = Результат.Выгрузить()[0].Ссылка;         
		
		Если Параметры.ВидДоговора = "СКомиссионером" Тогда
			//!!проверить соответствие параметров комиссии, если отличаются - получить объект и обновить
		КонецЕсли;	
			
		Возврат Договор;
		
	КонецЕсли;	
	
	//если не нашли, создаём новый 
	Договор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
	Договор.Организация = Организация;
	Договор.Владелец = Контрагент;
	Договор.ВалютаВзаиморасчетов = Валюта;
	//Договор.Комментарий = "#Создан автоматически при загрузке документов из ERP";
	Договор.ВидДоговора = ВидДоговора;
	Если Параметры.ВидДоговора = "СКомиссионером" Тогда
		//!!заполнить условия по комиссии
	КонецЕсли;
	Договор.Наименование = "Основной договор (" + Договор.Организация + " - " + Договор.ВидДоговора + " - " + Договор.ВалютаВзаиморасчетов + ")";
	Договор.Записать();
	
	Возврат Договор.Ссылка;
	
КонецФункции	

Функция НайтиСоздатьВидОплаты(ДоговорЭкварийнга)
	
	Если НЕ ЗначениеЗаполнено(ДоговорЭкварийнга) Тогда
		Возврат Неопределено;
	КонецЕсли;	
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|    ВидыОплатОрганизаций.Ссылка КАК Ссылка
		|ИЗ
		|    Справочник.ВидыОплатОрганизаций КАК ВидыОплатОрганизаций
		|ГДЕ
		|    ВидыОплатОрганизаций.Организация = &Организация
		|    И ВидыОплатОрганизаций.Контрагент = &Владелец
		|    И ВидыОплатОрганизаций.ДоговорКонтрагента = &ДоговорЭквайринга
		//|    И НЕ ВидыОплатОрганизаций.ПометкаУдаления
		|";
	
	Запрос.УстановитьПараметр("ДоговорЭквайринга", ДоговорЭкварийнга);
	Запрос.УстановитьПараметр("Организация", ДоговорЭкварийнга.Организация);
	Запрос.УстановитьПараметр("Владелец", ДоговорЭкварийнга.Владелец);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	ВидОплаты = Справочники.ВидыОплатОрганизаций.СоздатьЭлемент();
	ВидОплаты.Организация = ДоговорЭкварийнга.Организация;
	ВидОплаты.Контрагент = ДоговорЭкварийнга.Владелец;
	ВидОплаты.ДоговорКонтрагента = ДоговорЭкварийнга;
	ВидОплаты.ТипОплаты = Перечисления.ТипыОплат.ПлатежнаяКарта;
	ВидОплаты.СчетУчетаРасчетов = ПланыСчетов.Хозрасчетный.ПродажиПоПлатежнымКартам;
	ВидОплаты.Наименование = "Оплата картой по договору " + ДоговорЭкварийнга.Наименование;
	
    ВидОплаты.Записать();
	
	Возврат ВидОплаты.Ссылка;
	
КонецФункции	

Функция ПолучитьНалогПоТипуНалога(ТипНалога) 
	
	Если НЕ ЗначениеЗаполнено(ТипНалога) Тогда
		Возврат Справочники.ВидыНалоговИПлатежейВБюджет.ПустаяСсылка();
	КонецЕсли;
	
	НаименованиеНалога = "";
	
	Если ТипНалога = "НДС" Тогда //НДС 
		
		НаименованиеНалога = "НДС";
		
	ИначеЕсли ТипНалога = "УСН_ДоходыМинусРасходы" Тогда //Налог при УСН (доходы минус расходы)
		
		НаименованиеНалога = "Налог при УСН (доходы минус расходы)";
		
	ИначеЕсли ТипНалога = "НалогНаПрибыль_РегиональныйБюджет" Тогда //Налог на прибыль, региональный бюджет
		
		НаименованиеНалога = "Налог на прибыль, региональный бюджет";
		
	ИначеЕсли ТипНалога = "НалогНаПрибыль_ФедеральныйБюджет" Тогда //Налог на прибыль, федеральный бюджет 
		
		НаименованиеНалога = "Налог на прибыль, федеральный бюджет";
		
	ИначеЕсли ТипНалога = "ПрочиеНалогиИСборы" Тогда //Прочие налоги и сборы 
		
		НаименованиеНалога = "Прочие налоги и сборы";
		
	ИначеЕсли ТипНалога = "ЕНВД" Тогда //ЕНВД  
		
		НаименованиеНалога = "ЕНВД";
		
	ИначеЕсли ТипНалога = "НДФЛ" Тогда //НДФЛ при исполнении обязанностей налогового агента 
		
		НаименованиеНалога = "НДФЛ исчисленный налоговым агентом";
		
	ИначеЕсли ТипНалога = "ФФОМС" //Страховые взносы в ФФОМС  
		
		ИЛИ ТипНалога = "ТФОМС" Тогда //ТФОМС  
		
		НаименованиеНалога = "Страховые взносы в ФФОМС";
		
	ИначеЕсли ТипНалога = "ФСС" Тогда //Страховые взносы в ФСС  
		
		НаименованиеНалога = "Страховые взносы в ФСС";	
		
	ИначеЕсли ТипНалога = "ПФРСтраховаяЧасть" Тогда //Страховые взносы в ПФР 
		
		НаименованиеНалога = "Страховые взносы в ПФР";   
		
	ИначеЕсли ТипНалога = "ФССНС" Тогда //Страховые взносы в ФСС от несчастных случаев
		
		НаименованиеНалога = "Страховые взносы в ФСС от несчастных случаев"; 
		
	ИначеЕсли ТипНалога = "ТранспортныйНалог" Тогда //Транспортный налог организаций   
		
		НаименованиеНалога = "Транспортный налог организаций";	
		
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(НаименованиеНалога) Тогда
		Возврат Справочники.ВидыНалоговИПлатежейВБюджет.НайтиПоНаименованию(НаименованиеНалога, Истина);
	Иначе
		Возврат Справочники.ВидыНалоговИПлатежейВБюджет.ПустаяСсылка(); 
	КонецЕсли;
	
КонецФункции

// Функция - Получить объект справочника
//
// Параметры:
//  структураОбъект				 	- 	 Тип: Структура. Данные передаваемые на вход ддля загрузки. 
//  ТипСправочника				 	- 	 Тип: Строка. Строковое представление типа справочника. 
//  РеквизитыДополнительногоПоиска	- 	 Тип: Строка. Строка реквизитов через запятую для поиска ссылки по этим данным, если в регистре сведений ПубличныеИдентификаторыСинхронизируемыхОбъектов записи нет. 
// 
// Возвращаемое значение:
//   - Объект по указанному типу справочника и переданным данным. 
//		Если ссылка найдена в регистре сведений ПубличныеИдентификаторыСинхронизируемыхОбъектов, 
//		либо найдена по коду в справочнике, то будет возращен объект по ссылке, в противном случае будет создан новый объект.
//
Функция ПолучитьОбъектСправочника(структураОбъект, ТипСправочника, РеквизитыДополнительногоПоиска = Неопределено) 
	
	ИскомаяСсылка = НайтиОбъектПоИдентификаторуНов(структураОбъект.УИД, Тип("СправочникСсылка." + ТипСправочника));  
	
	Если ИскомаяСсылка <> Неопределено Тогда 
		Возврат ИскомаяСсылка.ПолучитьОбъект(); 
	КонецЕсли; 
	
	//Требуется поиск по указанным реквизитам
	Если РеквизитыДополнительногоПоиска <> Неопределено Тогда     
		МассивРеквизитов = СтрРазделить(РеквизитыДополнительногоПоиска, ",", Ложь); 
		Для каждого Реквизит из МассивРеквизитов Цикл 
			Если Реквизит = "Наименование" Тогда 
				ИскомаяСсылка = Справочники[ТипСправочника].НайтиПоНаименованию(структураОбъект[Реквизит], Истина);
			ИначеЕсли Реквизит = "Код" Тогда
				ИскомаяСсылка = Справочники[ТипСправочника].НайтиПоКоду(структураОбъект[Реквизит]);
			Иначе
				ИскомаяСсылка = Справочники[ТипСправочника].НайтиПоРеквизиту(Реквизит, структураОбъект[Реквизит]);
			КонецЕсли; 
		КонецЦикла;  
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИскомаяСсылка) Тогда 
		Если структураОбъект.Свойство("ЭтоГруппа") И структураОбъект.ЭтоГруппа Тогда
			ТекущийОбъект = Справочники[ТипСправочника].СоздатьГруппу(); 
		Иначе	
			ТекущийОбъект = Справочники[ТипСправочника].СоздатьЭлемент();
		КонецЕсли;   
		ТекущийОбъект.УстановитьСсылкуНового(Справочники[ТипСправочника].ПолучитьСсылку());
		ЗаписатьИдентификаторВРегистр(ТекущийОбъект.ПолучитьСсылкуНового(), структураОбъект.УИД);		
	Иначе
		ТекущийОбъект = ИскомаяСсылка.ПолучитьОбъект();
		ЗаписатьИдентификаторВРегистр(ИскомаяСсылка, структураОбъект.УИД);		
	КонецЕсли;  
	
	Возврат ТекущийОбъект;
	
КонецФункции

Процедура ЗаписатьДокумент(ДокументОбъект, структураДокумент, ОписаниеОшибок, СчетФактура = "")   
	
	ДобавитьКомментарий(ДокументОбъект,структураДокумент); 
	
	Если структураДокумент.Свойство("Префикс") И ЗначениеЗаполнено(структураДокумент.Префикс) Тогда
		ДокументОбъект.УстановитьНовыйНомер(структураДокумент.Префикс);
	КонецЕсли;
	
	Попытка
		Если структураДокумент.Проведен Тогда
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
			//Создание Счет-фактуры полученный, если требуется
			Если СчетФактура = "Полученный" И структураДокумент.Свойство("НомерСФ") И ЗначениеЗаполнено(структураДокумент.НомерСФ) И структураДокумент.ПроведенСФ Тогда
				ПараметрыСозданияСчетаФактуры = УчетНДСКлиентСервер.НовыеПараметрыСозданияПолученногоСчетаФактуры();
				ПараметрыСозданияСчетаФактуры.Основание = ДокументОбъект.Ссылка;
				ПараметрыСозданияСчетаФактуры.НомерСчетаФактурыПолученного = структураДокумент.НомерСФ;
				ПараметрыСозданияСчетаФактуры.ДатаСчетаФактурыПолученного  = структураДокумент.ДатаСФ;
				ПараметрыСозданияСчетаФактуры.Продавец = Неопределено;
				
				Результат = УчетНДСВызовСервера.СоздатьСчетФактуруПолученныйНаОсновании(ПараметрыСозданияСчетаФактуры);	  
			КонецЕсли;
			
			//Создание Счет-фактуры выданный, если требуется
			Если СчетФактура = "Выданный" И структураДокумент.Свойство("НомерСФ") И ЗначениеЗаполнено(структураДокумент.НомерСФ) И структураДокумент.ПроведенСФ Тогда
				ПараметрыСоздания = УчетНДСКлиентСервер.НовыеПараметрыСозданияВыданногоСчетаФактуры();
				ПараметрыСоздания.Основание = ДокументОбъект.Ссылка;
				ПараметрыСоздания.ЭтоУниверсальныйДокумент = ДокументОбъект.ЭтоУниверсальныйДокумент;
				ПараметрыСоздания.КодВидаОперации = "01";
				ПараметрыСоздания.УникальныйИдентификатор = Неопределено;
				
				Результат = УчетНДСВызовСервера.СоздатьСчетФактуруВыданныйНаОсновании(ПараметрыСоздания);
				
				СФОбъект = Результат.Ссылка.ПолучитьОбъект();
				СФОбъект.Номер = структураДокумент.НомерСФ;
				СФОбъект.Дата = структураДокумент.ДатаСФ;
				СФОбъект.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
			
		ИначеЕсли НЕ структураДокумент.Проведен И ДокументОбъект.Проведен Тогда
			ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;						
	Исключение 
		мсвСообщений = ПолучитьСообщенияПользователю(Ложь);
		ТекстСообщений = "";
		Для Каждого Сооб из мсвСообщений Цикл
			ТекстСообщений = ТекстСообщений + Сооб.Текст + Символы.ПС;
		КонецЦикла;	      
		ПолноеОписаниеОшибки = ТекстСообщений + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()); 
		ЗаписьЖурналаРегистрации("ОшибкаЗаписи", УровеньЖурналаРегистрации.Ошибка, , , ПолноеОписаниеОшибки); 
		
		ОписаниеОшибок.errorCodeObj = "608";
		ОписаниеОшибок.errorObj = структураДокумент.УИД;
		ОписаниеОшибок.errorDescriptionObj = ПолноеОписаниеОшибки;
	КонецПопытки;  
	
КонецПроцедуры

Процедура ДобавитьКомментарий(Объект, структураОбъект)
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.КомплектацияНоменклатуры") Тогда  
		Возврат;
	КонецЕсли;
	
	Если структураОбъект.Свойство("Представление") 
		И ОбщегоНазначения.ЕстьРеквизитОбъекта("Комментарий", Объект.Метаданные()) Тогда		
		Объект.Комментарий = "#{ЗагрузкаERP:" + структураОбъект.Представление + "}" + ?(ЗначениеЗаполнено(Объект.Комментарий)," " + Объект.Комментарий,"");		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьПроводкиДокумента(ДокументОбъект, структураПроводки, ЗапрашиваемыеОбъекты)

	ДвижХозрасчетный = ДокументОбъект.Движения.Хозрасчетный;
	ДвижХозрасчетный.Очистить();
	
	Для Каждого структураПроводка Из структураПроводки Цикл
		
		Если ЗначениеЗаполнено(структураПроводка.СчетДт) Тогда
			СчетДт = ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора", структураПроводка.СчетДт);
		Иначе
			СчетДт = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		КонецЕсли;
		Если ЗначениеЗаполнено(структураПроводка.СчетКт) Тогда
			СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора", структураПроводка.СчетКт);
		Иначе
			СчетКт = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СчетДт)
			И НЕ ЗначениеЗаполнено(СчетКт) Тогда
			Продолжить;
		КонецЕсли;
		
		новДвижение = ДвижХозрасчетный.Добавить();
		
		новДвижение.Период = структураПроводка.Период;
		новДвижение.Организация = НайтиОбъектПоИдентификаторуНов(структураПроводка.Организация,Тип("СправочникСсылка.Организации"));
		
		новДвижение.СчетДт = СчетДт;
		Если ЗначениеЗаполнено(структураПроводка.СубконтоДт1) Тогда
			Если Лев(структураПроводка.ВидСубконтоДт1, 12) = "Перечисление" Тогда
				//Пока расчитываем на совпадение имен перечислений, вероятно потом надо будет переделать
				новДвижение.СубконтоДт[новДвижение.СчетДт.ВидыСубконто[0].ВидСубконто] = Перечисления[Сред(структураПроводка.ВидСубконтоДт1, 14)][структураПроводка.СубконтоДт1];	
			Иначе
				ЗначениеСубконто = НайтиОбъектПоИдентификаторуНов(структураПроводка.СубконтоДт1);
				Если ЗначениеСубконто <> Неопределено Тогда
					новДвижение.СубконтоДт[новДвижение.СчетДт.ВидыСубконто[0].ВидСубконто] = ЗначениеСубконто;	
				Иначе
					СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", "", структураПроводка.СубконтоДт1, "", "");
					ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(структураПроводка.СубконтоДт2) Тогда
			Если Лев(структураПроводка.ВидСубконтоДт2, 12) = "Перечисление" Тогда
				//Пока расчитываем на совпадение имен перечислений, вероятно потом надо будет переделать
				новДвижение.СубконтоДт[новДвижение.СчетДт.ВидыСубконто[1].ВидСубконто] = Перечисления[Сред(структураПроводка.ВидСубконтоДт2, 14)][структураПроводка.СубконтоДт2];	
			Иначе
				ЗначениеСубконто = НайтиОбъектПоИдентификаторуНов(структураПроводка.СубконтоДт2);
				Если ЗначениеСубконто <> Неопределено Тогда
					новДвижение.СубконтоДт[новДвижение.СчетДт.ВидыСубконто[1].ВидСубконто] = ЗначениеСубконто;	
				Иначе
					СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", "", структураПроводка.СубконтоДт2, "", "");
					ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(структураПроводка.СубконтоДт3) Тогда
			Если Лев(структураПроводка.ВидСубконтоДт3, 12) = "Перечисление" Тогда
				//Пока расчитываем на совпадение имен перечислений, вероятно потом надо будет переделать
				новДвижение.СубконтоДт[новДвижение.СчетДт.ВидыСубконто[2].ВидСубконто] = Перечисления[Сред(структураПроводка.ВидСубконтоДт3, 14)][структураПроводка.СубконтоДт3];	
			Иначе
				ЗначениеСубконто = НайтиОбъектПоИдентификаторуНов(структураПроводка.СубконтоДт3);
				Если ЗначениеСубконто <> Неопределено Тогда
					новДвижение.СубконтоДт[новДвижение.СчетДт.ВидыСубконто[2].ВидСубконто] = ЗначениеСубконто;	
				Иначе
					СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", "", структураПроводка.СубконтоДт3, "", "");
					ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(структураПроводка.ВалютаДт) Тогда
			новДвижение.ВалютаДт = НайтиОбъектПоИдентификаторуНов(структураПроводка.ВалютаДт);
		КонецЕсли;
		Если ЗначениеЗаполнено(структураПроводка.ПодразделениеДт) Тогда
			новДвижение.ПодразделениеДт = НайтиОбъектПоИдентификаторуНов(структураПроводка.ПодразделениеДт, Тип("СправочникСсылка.ПодразделенияОрганизаций"), Новый Структура("Владелец", новДвижение.Организация));
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(структураПроводка.ВалютнаяСуммаДт) Тогда
			новДвижение.ВалютнаяСуммаДт = структураПроводка.ВалютнаяСуммаДт;
		КонецЕсли;
		Если ЗначениеЗаполнено(структураПроводка.КоличествоДт) Тогда
			новДвижение.КоличествоДт = структураПроводка.КоличествоДт;
		КонецЕсли; 
		Если ЗначениеЗаполнено(структураПроводка.СуммаВРДт) Тогда
			новДвижение.СуммаВРДт = структураПроводка.СуммаВРДт;
		КонецЕсли;
		Если ЗначениеЗаполнено(структураПроводка.СуммаНУДт) Тогда
			новДвижение.СуммаНУДт = структураПроводка.СуммаНУДт;
		КонецЕсли;
		Если ЗначениеЗаполнено(структураПроводка.СуммаПРДт) Тогда
			новДвижение.СуммаПРДт = структураПроводка.СуммаПРДт;
		КонецЕсли;   
		
		новДвижение.СчетКт = СчетКт;
		Если ЗначениеЗаполнено(структураПроводка.СубконтоКт1) Тогда
			Если Лев(структураПроводка.ВидСубконтоКт1, 12) = "Перечисление" Тогда
				//Пока расчитываем на совпадение имен перечислений, вероятно потом надо будет переделать
				новДвижение.СубконтоКт[новДвижение.СчетКт.ВидыСубконто[0].ВидСубконто] = Перечисления[Сред(структураПроводка.ВидСубконтоКт1, 14)][структураПроводка.СубконтоКт1];	
			Иначе
				ЗначениеСубконто = НайтиОбъектПоИдентификаторуНов(структураПроводка.СубконтоКт1);
				Если ЗначениеСубконто <> Неопределено Тогда
					новДвижение.СубконтоКт[новДвижение.СчетКт.ВидыСубконто[0].ВидСубконто] = ЗначениеСубконто;	
				Иначе
					СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", "", структураПроводка.СубконтоКт1, "", "");
					ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(структураПроводка.СубконтоКт2) Тогда
			Если Лев(структураПроводка.ВидСубконтоКт2, 12) = "Перечисление" Тогда
				//Пока расчитываем на совпадение имен перечислений, вероятно потом надо будет переделать
				новДвижение.СубконтоКт[новДвижение.СчетКт.ВидыСубконто[1].ВидСубконто] = Перечисления[Сред(структураПроводка.ВидСубконтоКт2, 14)][структураПроводка.СубконтоКт2];	
			Иначе
				ЗначениеСубконто = НайтиОбъектПоИдентификаторуНов(структураПроводка.СубконтоКт2);
				Если ЗначениеСубконто <> Неопределено Тогда
					новДвижение.СубконтоКт[новДвижение.СчетКт.ВидыСубконто[1].ВидСубконто] = ЗначениеСубконто;	
				Иначе
					СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", "", структураПроводка.СубконтоКт2, "", "");
					ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(структураПроводка.СубконтоКт3) Тогда
			Если Лев(структураПроводка.ВидСубконтоКт3, 12) = "Перечисление" Тогда
				//Пока расчитываем на совпадение имен перечислений, вероятно потом надо будет переделать
				новДвижение.СубконтоКт[новДвижение.СчетКт.ВидыСубконто[2].ВидСубконто] = Перечисления[Сред(структураПроводка.ВидСубконтоКт3, 14)][структураПроводка.СубконтоКт3];	
			Иначе
				ЗначениеСубконто = НайтиОбъектПоИдентификаторуНов(структураПроводка.СубконтоКт3);
				Если ЗначениеСубконто <> Неопределено Тогда
					новДвижение.СубконтоКт[новДвижение.СчетКт.ВидыСубконто[2].ВидСубконто] = ЗначениеСубконто;	
				Иначе
					СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", "", структураПроводка.СубконтоКт3, "", "");
					ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(структураПроводка.ВалютаКт) Тогда
			новДвижение.ВалютаКт = НайтиОбъектПоИдентификаторуНов(структураПроводка.ВалютаКт);
		КонецЕсли;
		Если ЗначениеЗаполнено(структураПроводка.ПодразделениеКт) Тогда
			новДвижение.ПодразделениеКт = НайтиОбъектПоИдентификаторуНов(структураПроводка.ПодразделениеКт, Тип("СправочникСсылка.ПодразделенияОрганизаций"), Новый Структура("Владелец", новДвижение.Организация));
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(структураПроводка.ВалютнаяСуммаКт) Тогда
			новДвижение.ВалютнаяСуммаКт = структураПроводка.ВалютнаяСуммаКт;
		КонецЕсли;
		Если ЗначениеЗаполнено(структураПроводка.КоличествоКт) Тогда
			новДвижение.КоличествоКт = структураПроводка.КоличествоКт;
		КонецЕсли; 
		Если ЗначениеЗаполнено(структураПроводка.СуммаВРКт) Тогда
			новДвижение.СуммаВРКт = структураПроводка.СуммаВРКт;
		КонецЕсли;
		Если ЗначениеЗаполнено(структураПроводка.СуммаНУКт) Тогда
			новДвижение.СуммаНУКт = структураПроводка.СуммаНУКт;
		КонецЕсли;
		Если ЗначениеЗаполнено(структураПроводка.СуммаПРКт) Тогда
			новДвижение.СуммаПРКт = структураПроводка.СуммаПРКт;
		КонецЕсли;

		новДвижение.Сумма = структураПроводка.Сумма;
		новДвижение.Содержание = структураПроводка.Содержание;		
		
	КонецЦикла;
	
	Если ЗапрашиваемыеОбъекты.Количество() = 0 Тогда
		ДвижХозрасчетный.Записать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ЗагрузкаСправочников  

Функция ПолучитьКодОКОФ(СтркКодОКОФ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ОбщероссийскийКлассификаторОсновныхФондов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ОбщероссийскийКлассификаторОсновныхФондов КАК ОбщероссийскийКлассификаторОсновныхФондов 
	|ГДЕ 
	|	ОбщероссийскийКлассификаторОсновныхФондов.Код ПОДОБНО &КодОКОФ + ""%""
	|"; 
	
	Запрос.УстановитьПараметр("КодОКОФ", СокрЛП(СтркКодОКОФ));
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать(); 
	Если ВыборкаЗапроса.Количество() = 1 Тогда  
		Пока ВыборкаЗапроса.Следующий() Цикл
			Возврат	ВыборкаЗапроса.Ссылка;   
		КонецЦикла;
	Иначе
		Возврат Справочники.ОбщероссийскийКлассификаторОсновныхФондов.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Процедура ЗагрузитьВалюту(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты)
	
	Если Не УИДЗаполнен(структураОбъект.УИД) Тогда
		Возврат;
	КонецЕсли;	                       
	
	ВалютаСсылка = НайтиОбъектПоИдентификаторуНов(структураОбъект.УИД);
	
	Если ВалютаСсылка = Неопределено Тогда
		ВалютаОбъект = Справочники.Валюты.СоздатьЭлемент();
		ВалютаОбъект.УстановитьСсылкуНового(Справочники.Валюты.ПолучитьСсылку());
		ЗаписатьИдентификаторВРегистр(ВалютаОбъект.ПолучитьСсылкуНового(), структураОбъект.УИД);
	Иначе
		ВалютаОбъект = ВалютаСсылка.ПолучитьОбъект();
	КонецЕсли;
		
	ВалютаОбъект.ОбменДанными.Загрузка = Истина;
	
	ЗаполнитьЗначенияСвойств(ВалютаОбъект, структураОбъект, "Код, Наименование, НаименованиеПолное, ПометкаУдаления, ЗагружаетсяИзИнтернета, ПараметрыПрописи");
	ВалютаОбъект.СпособУстановкиКурса = Перечисления.СпособыУстановкиКурсаВалюты[структураОбъект.СпособУстановкиКурса];	
	
	Если структураОбъект.СпособУстановкиКурса = "НаценкаНаКурсДругойВалюты" Тогда
		ВалютаОбъект.Наценка = структураОбъект.Наценка;
		ВалютаОбъект.ОсновнаяВалюта = НайтиОбъектПоИдентификаторуНов(структураОбъект.ОсновнаяВалюта);
		Если Не ЗначениеЗаполнено(ВалютаОбъект.ОсновнаяВалюта) Тогда
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОбъект.УИД, структураОбъект.ОсновнаяВалюта, "ОсновнаяВалюта", XmlТипЗнч(ВалютаОбъект.ОсновнаяВалюта).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);
			//ОписаниеОшибок = ОписаниеОшибок + Символы.ПС + "По УИД " + структураОбъект.ОсновнаяВалюта + " не удалось найти основную валюту для валюты " + ВалютаОбъект.НаименованиеПолное;
		КонецЕсли;	
	ИначеЕсли структураОбъект.СпособУстановкиКурса = "РасчетПоФормуле" Тогда
		ВалютаОбъект.ФормулаРасчетаКурса = структураОбъект.ФормулаРасчетаКурса;	
		ВалютаОбъект.ОсновнаяВалюта = Справочники.Валюты.ПустаяСсылка();
	КонецЕсли;
	
	ВалютаОбъект.Записать();
			
КонецПроцедуры	

Процедура ЗагрузитьОрганизацию(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты)
	
	Если НЕ УИДЗаполнен(структураОбъект.УИД) Тогда
		Возврат;
	КонецЕсли;	                       
	
	ОрганизацияСсылка = НайтиОбъектПоИдентификаторуНов(структураОбъект.УИД,Тип("СправочникСсылка.Организации"));
	
	Если ОрганизацияСсылка = Неопределено Тогда
		ОрганизацияОбъект = Справочники.Организации.СоздатьЭлемент();
		ОрганизацияОбъект.УстановитьСсылкуНового(Справочники.Организации.ПолучитьСсылку());
		ЗаписатьИдентификаторВРегистр(ОрганизацияОбъект.ПолучитьСсылкуНового(), структураОбъект.УИД);
		ОрганизацияОбъект.ГоловнаяОрганизация = ОрганизацияОбъект.ПолучитьСсылкуНового();
		ОрганизацияОбъект.ВариантНаименованияДляПечатныхФорм = структураОбъект.НаименованиеСокращенное;		
	Иначе
		ОрганизацияОбъект = ОрганизацияСсылка.ПолучитьОбъект();
		ОрганизацияОбъект.ГоловнаяОрганизация = ОрганизацияОбъект.Ссылка;
	КонецЕсли;
	
	ОрганизацияОбъект.ОбменДанными.Загрузка = Истина;
	
	ЗаполнитьЗначенияСвойств(ОрганизацияОбъект, структураОбъект, "Наименование, НаименованиеПолное, НаименованиеСокращенное, ПометкаУдаления, 
                                                                 |ИНН, КПП, КодНалоговогоОргана, НаименованиеНалоговогоОргана, ДополнительныйКодФСС, 
																 |ЕстьОбособленныеПодразделения, ФамилияИП, ИмяИП, ОтчествоИП, ДатаРегистрации,
																 |КодНалоговогоОрганаПолучателя, КодОрганаПФР, РегистрационныйНомерПФР, КодОрганаФСГС,
																 |КодПоОКПО, КодПодчиненностиФСС, ИПРегистрационныйНомерПФР, КрупнейшийНалогоплательщик,
																 |РегистрационныйНомерТФОМС, ИПРегистрационныйНомерТФОМС, НаименованиеТерриториальногоОрганаПФР,
																 |НаименованиеТерриториальногоОрганаФСС, РегистрационныйНомерФСС, ИПРегистрационныйНомерФСС,
																 |ОбменКаталогОтправкиДанныхОтчетности, ОбменКаталогПрограммыЭлектроннойПочты,
																 |КодОКОНХ, ОбменКодАбонента, ОГРН, ПрименятьРайонныйКоэффициент, ПрименятьСевернуюНадбавку,
																 |РайонныйКоэффициент, Префикс, СвидетельствоДатаВыдачи, СвидетельствоСерияНомер,
																 |ОбособленноеПодразделение, ЦифровойИндексОбособленногоПодразделения, КодОКВЭД,
																 |НаименованиеОКВЭД, КодОКВЭД2, НаименованиеОКВЭД2, КодОКОПФ, НаименованиеОКОПФ,
	                                                             |РайонныйКоэффициентРФ, КодОКФС, НаименованиеОКФС"); 

			
	Если структураОбъект.Свойство("ГоловнаяОрганизация") И УИДЗаполнен(структураОбъект.ГоловнаяОрганизация) Тогда
		ОрганизацияОбъект.ГоловнаяОрганизация = НайтиОбъектПоИдентификаторуНов(структураОбъект.ГоловнаяОрганизация,Тип("СправочникСсылка.Организации"));
		Если Не ЗначениеЗаполнено(ОрганизацияОбъект.ГоловнаяОрганизация) Тогда		
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОбъект.УИД, структураОбъект.ГоловнаяОрганизация, "ГоловнаяОрганизация", XmlТипЗнч(ОрганизацияОбъект.ГоловнаяОрганизация).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);		
		КонецЕсли;	
	КонецЕсли;
	
	Если УИДЗаполнен(структураОбъект.ИндивидуальныйПредприниматель)Тогда
		ОрганизацияОбъект.ИндивидуальныйПредприниматель = НайтиОбъектПоИдентификаторуНов(структураОбъект.ИндивидуальныйПредприниматель);
		Если Не ЗначениеЗаполнено(ОрганизацияОбъект.ИндивидуальныйПредприниматель) Тогда
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОбъект.УИД, структураОбъект.ИндивидуальныйПредприниматель, "ИндивидуальныйПредприниматель", XmlТипЗнч(ОрганизацияОбъект.ИндивидуальныйПредприниматель).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);		
		КонецЕсли;
	Иначе
		ОрганизацияОбъект.ИндивидуальныйПредприниматель = Справочники.ФизическиеЛица.ПустаяСсылка();
		ОрганизацияОбъект.ФамилияИП = "";
		ОрганизацияОбъект.ИмяИП = "";
		ОрганизацияОбъект.ОтчествоИП = "";
	КонецЕсли;

	Если УИДЗаполнен(структураОбъект.РегистрацияВНалоговомОргане)Тогда
		ОрганизацияОбъект.РегистрацияВНалоговомОргане = НайтиОбъектПоИдентификаторуНов(структураОбъект.РегистрацияВНалоговомОргане);
		Если Не ЗначениеЗаполнено(ОрганизацияОбъект.РегистрацияВНалоговомОргане) Тогда
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОбъект.УИД, структураОбъект.РегистрацияВНалоговомОргане, "РегистрацияВНалоговомОргане", XmlТипЗнч(ОрганизацияОбъект.РегистрацияВНалоговомОргане).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);		
		КонецЕсли;
	Иначе
		ОрганизацияОбъект.РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка();
	КонецЕсли;
	
	Если УИДЗаполнен(структураОбъект.УчетнаяЗаписьОбмена)Тогда
		ОрганизацияОбъект.УчетнаяЗаписьОбмена = НайтиОбъектПоИдентификаторуНов(структураОбъект.УчетнаяЗаписьОбмена);
		Если Не ЗначениеЗаполнено(ОрганизацияОбъект.УчетнаяЗаписьОбмена) Тогда  
			//ОписаниеОшибок = ОписаниеОшибок + Символы.ПС + "По УИД " + структураОбъект.УчетнаяЗаписьОбмена + " не удалось найти учетную запись обмена для организации " + ОрганизацияОбъект.НаименованиеСокращенное;
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОбъект.УИД, структураОбъект.УчетнаяЗаписьОбмена, "УчетнаяЗаписьОбмена", XmlТипЗнч(ОрганизацияОбъект.УчетнаяЗаписьОбмена).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);					
		КонецЕсли;                                                            
	Иначе
		ОрганизацияОбъект.УчетнаяЗаписьОбмена = Справочники.УчетныеЗаписиДокументооборота.ПустаяСсылка();
	КонецЕсли;
	
	ОрганизацияОбъект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо[структураОбъект.ЮридическоеФизическоеЛицо];
	
	//!!добавить загрузку контактных данных
	
	ОрганизацияОбъект.Записать();	
	
КонецПроцедуры

Процедура ЗагрузитьПодразделение(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты)
	
	Если НЕ УИДЗаполнен(структураОбъект.УИД) Тогда
		Возврат;
	КонецЕсли;	                       	
	
	мсвПодразделений = Новый массив;
	//если среди найденных есть подразделение с организацией и объект не изменен, ничего не делаем
	Если УИДЗаполнен(структураОбъект.Организация) Тогда
		Организация = НайтиОбъектПоИдентификаторуНов(структураОбъект.Организация, Тип("СправочникСсылка.Организации"));
		Если Организация = Неопределено Тогда
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника, УИДОрганизации", структураОбъект.УИД, структураОбъект.Организация, "Организация", XmlТипЗнч(Справочники.Организации.ПустаяСсылка()).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);
			Возврат;
		КонецЕсли;
	Иначе
		ОписаниеОшибок.errorCodeObj = 625;		
		ОписаниеОшибок.errorDescriptionObj = "Вместе с подразделением не передана Организация-владелец";
	КонецЕсли;
			
	ПодразделениеСсылка = НайтиОбъектПоИдентификаторуНов(структураОбъект.УИД,Тип("СправочникСсылка.ПодразделенияОрганизаций"),Новый Структура("Владелец",Организация));
	
	Если ПодразделениеСсылка = Неопределено Тогда
		Если НЕ структураОбъект.ЭтоГруппа Тогда
			ПодразделениеОбъект = Справочники.ПодразделенияОрганизаций.СоздатьЭлемент();
		Иначе
			ПодразделениеОбъект = Справочники.ПодразделенияОрганизаций.СоздатьГруппу();
		КонецЕсли;
		ПодразделениеОбъект.УстановитьСсылкуНового(Справочники.ПодразделенияОрганизаций.ПолучитьСсылку());
		ЗаписатьИдентификаторВРегистр(ПодразделениеОбъект.ПолучитьСсылкуНового(), структураОбъект.УИД);
		ПодразделениеОбъект.Владелец = Организация;
	Иначе
		ПодразделениеОбъект = ПодразделениеСсылка.ПолучитьОбъект();		
	КонецЕсли;	
				
	ПодразделениеОбъект.ОбменДанными.Загрузка = Истина;
	
	ЗаполнитьЗначенияСвойств(ПодразделениеОбъект, структураОбъект, "ПометкаУдаления, Наименование");
			
	Если УИДЗаполнен(структураОбъект.Родитель) Тогда
		Родитель = НайтиОбъектПоИдентификаторуНов(структураОбъект.Родитель,Тип("СправочникСсылка.ПодразделенияОрганизаций"),Новый Структура("Владелец",Организация));
		
		Если Родитель <> Неопределено Тогда
			ПодразделениеОбъект.Родитель = Родитель;						
		Иначе     
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника, УИДОрганизации", структураОбъект.УИД, структураОбъект.Родитель, "Родитель", XmlТипЗнч(ПодразделениеОбъект.Родитель).ИмяТипа, структураОбъект.Организация);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);					
		КонецЕсли;
	Иначе
		ПодразделениеОбъект.Родитель = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	КонецЕсли;		 
	
	ПодразделениеОбъект.Записать();
	
	
КонецПроцедуры 

Процедура ЗагрузитьРегистрациюВНалоговомОргане(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты)
	
	Если Не УИДЗаполнен(структураОбъект.УИД) Тогда
		Возврат;
	КонецЕсли;	                       
	
	РегистрацияСсылка = НайтиОбъектПоИдентификаторуНов(структураОбъект.УИД,Тип("СправочникСсылка.РегистрацииВНалоговомОргане"));
	
	Если РегистрацияСсылка = Неопределено Тогда
		РегистрацияОбъект = Справочники.РегистрацииВНалоговомОргане.СоздатьЭлемент();
		РегистрацияОбъект.УстановитьСсылкуНового(Справочники.РегистрацииВНалоговомОргане.ПолучитьСсылку());
		ЗаписатьИдентификаторВРегистр(РегистрацияОбъект.ПолучитьСсылкуНового(), структураОбъект.УИД);			
	Иначе
		РегистрацияОбъект = РегистрацияСсылка.ПолучитьОбъект();
	КонецЕсли;	
			
	РегистрацияОбъект.ОбменДанными.Загрузка = Истина;

	ЗаполнитьЗначенияСвойств(РегистрацияОбъект, структураОбъект, "Код, Наименование, ПометкаУдаления, ДокументПредставителя, КодПоОКАТО, КодПоОКТМО,
																|КПП, КодРегиона, НаименованиеИФНС, НаименованиеОбособленногоПодразделения,
																|УполномоченноеЛицоПредставителя");
	//не используются
	//РегистрацияОбъект.Доверенность
	//РегистрацияОбъект.Представитель
	
	//РегистрацияОбъект.ДатаПостановкиНаУчет - можно брать в erp по истории изменений
	//РегистрацияОбъект.НаименованиеСлужебное - по умолчанию формируется как полное наименование организации владельца
	
	РегистрацияОбъект.Владелец = НайтиОбъектПоИдентификаторуНов(структураОбъект.Владелец, Тип("СправочникСсылка.Организации"));
	Если РегистрацияОбъект.Владелец = Неопределено Тогда			
		СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОбъект.УИД, структураОбъект.Владелец, "Владелец", XmlТипЗнч(РегистрацияОбъект.Владелец).ИмяТипа);
		ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);							
	КонецЕсли;	
	
	РегистрацияОбъект.Записать();	
		
КонецПроцедуры	

Процедура ЗагрузитьУчетнуюЗаписьДокументооборота(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты)

	Если Не УИДЗаполнен(структураОбъект.УИД) Тогда
		Возврат;
	КонецЕсли;	                       
	
	УчетнаяЗаписьСсылка = НайтиОбъектПоИдентификаторуНов(структураОбъект.УИД,Тип("СправочникСсылка.УчетныеЗаписиДокументооборота"));
	
	Если УчетнаяЗаписьСсылка = Неопределено Тогда
		УчетнаяЗаписьОбъект = Справочники.УчетныеЗаписиДокументооборота.СоздатьЭлемент();
		УчетнаяЗаписьОбъект.УстановитьСсылкуНового(Справочники.УчетныеЗаписиДокументооборота.ПолучитьСсылку());
		ЗаписатьИдентификаторВРегистр(УчетнаяЗаписьОбъект.ПолучитьСсылкуНового(), структураОбъект.УИД);			
	Иначе
		УчетнаяЗаписьОбъект = УчетнаяЗаписьСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	УчетнаяЗаписьОбъект.ОбменДанными.Загрузка = Истина;
	
	ЗаполнитьЗначенияСвойств(УчетнаяЗаписьОбъект, структураОбъект, "Наименование, ПометкаУдаления, АдресЭлектроннойПочты, ДатаПодключения,
																|ИдентификаторАбонента, ИдентификаторДокументооборота, ИдентификаторСистемыОтправителяПФР,
																|ИдентификаторСистемыОтправителяФСГС, ИдентификаторСпецоператора, ИмяПользователяPOP3,
																|ИмяПользователяSMTP, ИННУполномоченногоПредставителя, ИспользоватьСервисОнлайнПроверкиОтчетов,
	                                                            |ИспользуютсяСъемныеКлючевыеНосители, КППУполномоченногоПредставителя, 
																|ЛицензияДатаНачала, ЛицензияДатаОкончания, ЛицензияНаименование,
																|ЛицензияТребуетсяНапоминаниеОбОкончанииСрокаДействия,
																|ЕстьОшибкиСменыМоделиХраненияКлючей, НеФормироватьПодтвержденияАвтоматически, 
																|ОбменНапрямую, ОтключитьАвтообмен, ПарольPOP3, ПарольSMTP, 
																|ПолноеНаименованиеУполномоченногоПредставителя, ПортPOP3, ПортSMTP, 
																|ПредназначенаДляДокументооборотаСПФР, ПредназначенаДляДокументооборотаСФНС,
																|ПредназначенаДляДокументооборотаСФСГС, 
																|СерверPOP3, СерверSMTP,  
																|СертификатГлавногоБухгалтера, СертификатДляШифрования, СертификатРуководителя,
																|ТелефонМобильныйДляАвторизации, ТребуетсяSMTPАутентификация,
																|ЭлектроннаяПодписьВМоделиСервиса, ЯвляетсяУчетнойЗаписьюУполномоченногоПредставителя,
																|ОператорРегНомерПФР, ЛицензияДатаБлокировки, ОператорНаименованиеПолное, 
																|ОператорНаименованиеКраткое, ОператорИНН, ОператорКПП");

	Если УИДЗаполнен(структураОбъект.НалоговыйОрган) Тогда
		НалоговыйОрган = НайтиОбъектПоИдентификаторуНов(структураОбъект.НалоговыйОрган);
		Если НалоговыйОрган <> Неопределено Тогда                  
			УчетнаяЗаписьОбъект.НалоговыйОрган = НалоговыйОрган;
		Иначе
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОбъект.УИД, структураОбъект.НалоговыйОрган, "НалоговыйОрган", XmlТипЗнч(УчетнаяЗаписьОбъект.НалоговыйОрган).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);					
		КонецЕсли;
	КонецЕсли;		
	
	Если УИДЗаполнен(структураОбъект.СерверДокументооборота) Тогда
		СерверДокументооборота = НайтиОбъектПоИдентификаторуНов(структураОбъект.СерверДокументооборота);
		Если СерверДокументооборота <> Неопределено Тогда
			УчетнаяЗаписьОбъект.СерверДокументооборота = СерверДокументооборота;
		Иначе
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОбъект.УИД, структураОбъект.СерверДокументооборота, "СерверДокументооборота", XmlТипЗнч(УчетнаяЗаписьОбъект.СерверДокументооборота).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);					
		КонецЕсли;
	КонецЕсли;	
	
    УчетнаяЗаписьОбъект.РежимАвтонастройки = Перечисления.РежимыАвтонастройкиУчетнойЗаписиНалогоплательщика[структураОбъект.РежимАвтонастройки];		
    УчетнаяЗаписьОбъект.СпецоператорСвязи = Перечисления.СпецоператорыСвязи[структураОбъект.СпецоператорСвязи]; 
    УчетнаяЗаписьОбъект.СтатусУчетнойЗаписи = Перечисления.СтатусыУчетнойЗаписиДокументооборота[структураОбъект.СтатусУчетнойЗаписи]; 
	УчетнаяЗаписьОбъект.МодельХраненияЗакрытогоКлюча = Перечисления.МодельХраненияЗакрытогоКлюча[структураОбъект.МодельХраненияЗакрытогоКлюча]; 	
	
	УчетнаяЗаписьОбъект.СертификатыЛичные.Очистить();
	УчетнаяЗаписьОбъект.СертификатыПрочие.Очистить();
	УчетнаяЗаписьОбъект.СертификатыПФР.Очистить();
	
	Для Каждого Стр из структураОбъект.СертификатыЛичные Цикл
		Нстр = УчетнаяЗаписьОбъект.СертификатыЛичные.Добавить();
		ЗаполнитьЗначенияСвойств(НСтр, Стр,,"Содержимое, Криптопровайдер");
		ДД = Base64Значение(Стр.Содержимое);
		ХЗ = Новый ХранилищеЗначения(ДД);
		Нстр.Содержимое = ХЗ;                                         
		Нстр.Криптопровайдер = Перечисления.ТипыКриптоПровайдеров[Стр.Криптопровайдер];
	КонецЦикла;
	
	Для Каждого Стр Из структураОбъект.СертификатыПрочие Цикл
		Нстр = УчетнаяЗаписьОбъект.СертификатыПрочие.Добавить();
		ЗаполнитьЗначенияСвойств(НСтр, Стр,,"Содержимое");
		ДД = Base64Значение(Стр.Содержимое);
		ХЗ = Новый ХранилищеЗначения(ДД);
		Нстр.Содержимое = ХЗ;
	КонецЦикла;		
	
	Для Каждого Стр Из структураОбъект.СертификатыПФР Цикл
		Нстр = УчетнаяЗаписьОбъект.СертификатыПФР.Добавить();
		Нстр.Сертификат = Стр.Сертификат;	
	КонецЦикла;	
	
	УчетнаяЗаписьОбъект.Записать();
		    
КонецПроцедуры	

Процедура ЗагрузитьСерверДокументооборота(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты)
	
	Если Не УИДЗаполнен(структураОбъект.УИД) Тогда
		Возврат;
	КонецЕсли;	                       
	
	СерверДокументооборотаСсылка = НайтиОбъектПоИдентификаторуНов(структураОбъект.УИД,Тип("СправочникСсылка.СерверыДокументооборота"));
	
	Если СерверДокументооборотаСсылка = Неопределено Тогда
		СерверДокументооборотаОбъект = Справочники.СерверыДокументооборота.СоздатьЭлемент();
		СерверДокументооборотаОбъект.УстановитьСсылкуНового(Справочники.СерверыДокументооборота.ПолучитьСсылку());
		ЗаписатьИдентификаторВРегистр(СерверДокументооборотаОбъект.ПолучитьСсылкуНового(), структураОбъект.УИД);			
	Иначе
		СерверДокументооборотаОбъект = СерверДокументооборотаСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	СерверДокументооборотаОбъект.ОбменДанными.Загрузка = Истина;
	
	ЗаполнитьЗначенияСвойств(СерверДокументооборотаОбъект, структураОбъект);
	
	СерверДокументооборотаОбъект.Записать();
			
КонецПроцедуры	

Процедура ЗагрузитьНалоговыйОрган(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты)
	
	Если Не УИДЗаполнен(структураОбъект.УИД) Тогда
		Возврат;
	КонецЕсли;	                       
	
	НалоговыйОрганСсылка = НайтиОбъектПоИдентификаторуНов(структураОбъект.УИД,Тип("СправочникСсылка.НалоговыеОрганы"));
	
	Если НалоговыйОрганСсылка = Неопределено Тогда
		НалоговыйОрганОбъект = Справочники.НалоговыеОрганы.СоздатьЭлемент();
		НалоговыйОрганОбъект.УстановитьСсылкуНового(Справочники.НалоговыеОрганы.ПолучитьСсылку());
		ЗаписатьИдентификаторВРегистр(НалоговыйОрганОбъект.ПолучитьСсылкуНового(), структураОбъект.УИД);			
	Иначе
		НалоговыйОрганОбъект = НалоговыйОрганСсылка.ПолучитьОбъект();
	КонецЕсли;

	НалоговыйОрганОбъект.ОбменДанными.Загрузка = Истина;
	
	ЗаполнитьЗначенияСвойств(НалоговыйОрганОбъект, структураОбъект, "Код, Наименование, ПометкаУдаления, ПолноеНаименование,
																	|УчетНалогоплательщиков, ПриемНалоговойОтчетности, ИНН, КПП,
																	|Адрес, Телефон, АдресЭлектроннойПочты, АдресСайта,
																	|Комментарий, АдресЭлектроннойПочтыДляЦелейДокументооборотаСНалогоплательщиками");
	
	
	Если УИДЗаполнен(структураОбъект.Родитель) Тогда
		Родитель = НайтиОбъектПоИдентификаторуНов(структураОбъект.Родитель);
		Если Родитель <> Неопределено Тогда
			НалоговыйОрганОбъект.Родитель = Родитель;
		Иначе
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОбъект.УИД, структураОбъект.Родитель, "Родитель", XmlТипЗнч(НалоговыйОрганОбъект.Родитель).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);		
		КонецЕсли;
	КонецЕсли;	
	
	НалоговыйОрганОбъект.Сертификаты.Очистить();
	
	Для Каждого Стр Из структураОбъект.Сертификаты Цикл
		Нстр = НалоговыйОрганОбъект.Сертификаты.Добавить();
		Нстр.Сертификат = Стр.Сертификат;
	КонецЦикла;	
	
	НалоговыйОрганОбъект.Записать();

КонецПроцедуры	

Процедура ЗагрузитьКонтрагента(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты)
	
	Если Не УИДЗаполнен(структураОбъект.УИД) Тогда
		Возврат;
	КонецЕсли;	                       
	
	КонтрагентСсылка = НайтиОбъектПоИдентификаторуНов(структураОбъект.УИД,Тип("СправочникСсылка.Контрагенты"));
	
	Если КонтрагентСсылка = Неопределено Тогда
		КонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();
		КонтрагентОбъект.УстановитьСсылкуНового(Справочники.Контрагенты.ПолучитьСсылку());
		ЗаписатьИдентификаторВРегистр(КонтрагентОбъект.ПолучитьСсылкуНового(), структураОбъект.УИД);		
		КонтрагентОбъект.ГоловнойКонтрагент = КонтрагентОбъект.ПолучитьСсылкуНового();
	Иначе
		КонтрагентОбъект = КонтрагентСсылка.ПолучитьОбъект();
		КонтрагентОбъект.ГоловнойКонтрагент = КонтрагентОбъект.Ссылка;
	КонецЕсли;	
	
	КонтрагентОбъект.ОбменДанными.Загрузка = Истина;
	
	ЗаполнитьЗначенияСвойств(КонтрагентОбъект, структураОбъект, ,"ЮридическоеФизическоеЛицо, СтранаРегистрации, КонтактнаяИнформация");

	КонтрагентОбъект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо[структураОбъект.ЮридическоеФизическоеЛицо];	
		
	Если структураОбъект.Свойство("ГоловнойКонтрагент") И УИДЗаполнен(структураОбъект.ГоловнойКонтрагент) Тогда
		ГоловнойКонтрагент = НайтиОбъектПоИдентификаторуНов(структураОбъект.ГоловнойКонтрагент,Тип("СправочникСсылка.Контрагенты"));
		Если ГоловнойКонтрагент = Неопределено Тогда
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОбъект.УИД, структураОбъект.ГоловнойКонтрагент, "ГоловнойКонтрагент", XmlТипЗнч(КонтрагентОбъект.ГоловнойКонтрагент).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);		
		КонецЕсли;	
	КонецЕсли;
			
	Если УИДЗаполнен(структураОбъект.СтранаРегистрации) Тогда
		КонтрагентОбъект.СтранаРегистрации = НайтиОбъектПоИдентификаторуНов(структураОбъект.СтранаРегистрации);
		Если Не ЗначениеЗаполнено(КонтрагентОбъект.СтранаРегистрации) Тогда
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОбъект.УИД, структураОбъект.СтранаРегистрации, "СтранаРегистрации", XmlТипЗнч(КонтрагентОбъект.СтранаРегистрации).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);		
		КонецЕсли;
	Иначе
		КонтрагентОбъект.СтранаРегистрации = Справочники.СтраныМира.ПустаяСсылка();
	КонецЕсли;	
	
	КонтрагентОбъект.КонтактнаяИнформация.Очистить();
	
	Для Каждого Стр Из структураОбъект.КонтактнаяИнформация Цикл
		
		ВидКИ = ОпределитьВидКонтактнойИнформации(Стр.Вид);
		Если ВидКИ = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		Нстр = КонтрагентОбъект.КонтактнаяИнформация.Добавить();
		ЗаполнитьЗначенияСвойств(Нстр, Стр, , "Тип, Вид, ВидДляСписка");
		
		Нстр.Тип = Перечисления.ТипыКонтактнойИнформации[Стр.Тип];
		Нстр.Вид = ВидКИ;
		Нстр.ВидДляСписка = ОпределитьВидКонтактнойИнформации(Стр.ВидДляСписка);
		
	КонецЦикла;	
	
	КонтрагентОбъект.Записать();
		  	
КонецПроцедуры	

Процедура ЗагрузитьДоговор(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты)
	
	Если Не УИДЗаполнен(структураОбъект.УИД) Тогда
		Возврат;
	КонецЕсли;                         
	
	ДоговорСсылка = НайтиОбъектПоИдентификаторуНов(структураОбъект.УИД, Тип("СправочникСсылка.ДоговорыКонтрагентов"));
	
	Если ДоговорСсылка = Неопределено Тогда
		ДоговорОбъект = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		ДоговорОбъект.УстановитьСсылкуНового(Справочники.ДоговорыКонтрагентов.ПолучитьСсылку());
		ЗаписатьИдентификаторВРегистр(ДоговорОбъект.ПолучитьСсылкуНового(), структураОбъект.УИД);		
	Иначе
		ДоговорОбъект = ДоговорСсылка.ПолучитьОбъект();		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДоговорОбъект, структураОбъект);
	
	ДоговорОбъект.ОбменДанными.Загрузка = Истина;
	
	Если УИДЗаполнен(структураОбъект.ВалютаВзаиморасчетов) Тогда
		ДоговорОбъект.ВалютаВзаиморасчетов = НайтиОбъектПоИдентификаторуНов(структураОбъект.ВалютаВзаиморасчетов);
		Если Не ЗначениеЗаполнено(ДоговорОбъект.ВалютаВзаиморасчетов) Тогда	
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОбъект.УИД, структураОбъект.ВалютаВзаиморасчетов, "ВалютаВзаиморасчетов", XmlТипЗнч(ДоговорОбъект.ВалютаВзаиморасчетов).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);
		КонецЕсли;
	Иначе
		//ДоговорОбъект.ВалютаВзаиморасчетов = Справочники.Валюты.ПустаяСсылка();	
		ДоговорОбъект.ВалютаВзаиморасчетов = Справочники.Валюты.НайтиПоРеквизиту("НаименованиеПолное", "Российский рубль");	
	КонецЕсли;  
		
	Если УИДЗаполнен(структураОбъект.Организация) Тогда
		ДоговорОбъект.Организация = НайтиОбъектПоИдентификаторуНов(структураОбъект.Организация,Тип("СправочникСсылка.Организации"));		
		Если Не ЗначениеЗаполнено(ДоговорОбъект.Организация) Тогда
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОбъект.УИД, структураОбъект.Организация, "Организация", XmlТипЗнч(ДоговорОбъект.Организация).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);
		КонецЕсли;	
	КонецЕсли;     
	
	Если УИДЗаполнен(структураОбъект.Контрагент) Тогда
		ДоговорОбъект.Владелец = НайтиОбъектПоИдентификаторуНов(структураОбъект.Контрагент,Тип("СправочникСсылка.Контрагенты"));		
		Если Не ЗначениеЗаполнено(ДоговорОбъект.Владелец) Тогда
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОбъект.УИД, структураОбъект.Контрагент, "Контрагент", XmlТипЗнч(ДоговорОбъект.Владелец).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);
		КонецЕсли;
	Иначе
		ДоговорОбъект.Владелец = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;   
		
	ДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов[структураОбъект.ВидДоговора];  
	ДоговорОбъект.РасчетыВУсловныхЕдиницах = Ложь;      
	//ДоговорОбъект.СпособВыставленияДокументов = Перечисления.СпособыВыставленияДокументов.Автоматически; 
	ДоговорОбъект.СпособЗаполненияСтавкиНДС = Перечисления.СпособыЗаполненияСтавкиНДС.Автоматически;
	
	Если структураОбъект.Свойство("ВидАгентскогоДоговора") И структураОбъект.ВидАгентскогоДоговора <> "" Тогда
		ДоговорОбъект.ВидАгентскогоДоговора = Перечисления.ВидыАгентскихДоговоров[структураОбъект.ВидАгентскогоДоговора];
	КонецЕсли;  
	
	ДоговорОбъект.Записать();
		
КонецПроцедуры

Процедура ЗагрузитьСтрану(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты)
	
	Если Не УИДЗаполнен(структураОбъект.УИД) Тогда
		Возврат;
	КонецЕсли;	                       
	
	СтранаСсылка = НайтиОбъектПоИдентификаторуНов(структураОбъект.УИД,Тип("СправочникСсылка.СтраныМира"));
	
	Если СтранаСсылка = Неопределено Тогда
		СтранаОбъект = Справочники.СтраныМира.СоздатьЭлемент();
		СтранаОбъект.УстановитьСсылкуНового(Справочники.СтраныМира.ПолучитьСсылку());
		ЗаписатьИдентификаторВРегистр(СтранаОбъект.ПолучитьСсылкуНового(), структураОбъект.УИД);		
	Иначе
		СтранаОбъект = СтранаСсылка.ПолучитьОбъект();		
	КонецЕсли;
	
	СтранаОбъект.ОбменДанными.Загрузка = Истина;
	
	ЗаполнитьЗначенияСвойств(СтранаОбъект, структураОбъект);
	
	СтранаОбъект.Записать();		
	
КонецПроцедуры	

Процедура ЗагрузитьНоменклатуру(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты)

	Если Не УИДЗаполнен(структураОбъект.УИД) Тогда
		Возврат;
	КонецЕсли;	                       
	
	НоменклатураСсылка = НайтиОбъектПоИдентификаторуНов(структураОбъект.УИД,Тип("СправочникСсылка.Номенклатура"));
	
	Если НоменклатураСсылка = Неопределено Тогда
		Если структураОбъект.ЭтоГруппа Тогда
			НоменклатураОбъект = Справочники.Номенклатура.СоздатьГруппу();
		Иначе
			НоменклатураОбъект = Справочники.Номенклатура.СоздатьЭлемент();
		КонецЕсли;
		НоменклатураОбъект.УстановитьСсылкуНового(Справочники.Номенклатура.ПолучитьСсылку());
		ЗаписатьИдентификаторВРегистр(НоменклатураОбъект.ПолучитьСсылкуНового(), структураОбъект.УИД);		
	Иначе
		НоменклатураОбъект = НоменклатураСсылка.ПолучитьОбъект();		
	КонецЕсли;
		
	НоменклатураОбъект.ОбменДанными.Загрузка = Истина;
		
	ЗаполнитьЗначенияСвойств(НоменклатураОбъект, структураОбъект,, "Родитель");
	
	Если УИДЗаполнен(структураОбъект.Родитель) Тогда
		НоменклатураОбъект.Родитель = НайтиОбъектПоИдентификаторуНов(структураОбъект.Родитель);
		Если Не ЗначениеЗаполнено(НоменклатураОбъект.Родитель) Тогда
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОбъект.УИД, структураОбъект.Родитель, "Родитель", XmlТипЗнч(НоменклатураОбъект.Родитель).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);
		КонецЕсли;	
	Иначе
		НоменклатураОбъект.Родитель = Справочники.Номенклатура.ПустаяСсылка();		
	КонецЕсли;	

	Если Не структураОбъект.ЭтоГруппа Тогда
		Если структураОбъект.ТипНоменклатуры = "Услуга" Тогда
			НоменклатураОбъект.Услуга = Истина;
			НоменклатураОбъект.ВидНоменклатуры = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Услуги", Истина);
		Иначе
			НоменклатураОбъект.Услуга = Ложь;
			НоменклатураОбъект.ВидНоменклатуры = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Товары", Истина);
		КонецЕсли;
		
		Если УИДЗаполнен(структураОбъект.ЕдиницаИзмерения) Тогда             
			НоменклатураОбъект.ЕдиницаИзмерения = НайтиОбъектПоИдентификаторуНов(структураОбъект.ЕдиницаИзмерения);
			Если Не ЗначениеЗаполнено(НоменклатураОбъект.ЕдиницаИзмерения) Тогда
				СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОбъект.УИД, структураОбъект.ЕдиницаИзмерения, "ЕдиницаИзмерения", XmlТипЗнч(НоменклатураОбъект.ЕдиницаИзмерения).ИмяТипа);
				ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);
			КонецЕсли;	
		Иначе
			НоменклатураОбъект.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка();	
		КонецЕсли;	
		
	КонецЕсли;	
	
	НоменклатураОбъект.Записать();	
	
КонецПроцедуры

Процедура ЗагрузитьЕдиницуИзмерения(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты)

	Если Не УИДЗаполнен(структураОбъект.УИД) Тогда
		Возврат;
	КонецЕсли;	                       
	
	ЕдИзмСсылка = НайтиОбъектПоИдентификаторуНов(структураОбъект.УИД,Тип("СправочникСсылка.КлассификаторЕдиницИзмерения"));
	
	Если ЕдИзмСсылка = Неопределено Тогда
		ЕдИзмОбъект = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();
		ЕдИзмОбъект.УстановитьСсылкуНового(Справочники.КлассификаторЕдиницИзмерения.ПолучитьСсылку());
		ЗаписатьИдентификаторВРегистр(ЕдИзмОбъект.ПолучитьСсылкуНового(), структураОбъект.УИД);		
	Иначе
		ЕдИзмОбъект = ЕдИзмСсылка.ПолучитьОбъект();		
	КонецЕсли;
	
	ЕдИзмОбъект.ОбменДанными.Загрузка = Истина;
		
	ЗаполнитьЗначенияСвойств(ЕдИзмОбъект, структураОбъект);
	
	ЕдИзмОбъект.Записать();
		
КонецПроцедуры	

Процедура ЗагрузитьСклад(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты)
	
	Если Не УИДЗаполнен(структураОбъект.УИД) Тогда
		Возврат;
	КонецЕсли;	                       
	
	СкладСсылка = НайтиОбъектПоИдентификаторуНов(структураОбъект.УИД,Тип("СправочникСсылка.Склады"));
		
	Если СкладСсылка = Неопределено Тогда
		Если структураОбъект.ЭтоГруппа Тогда
			СкладОбъект = Справочники.Склады.СоздатьГруппу();
		Иначе
			СкладОбъект = Справочники.Склады.СоздатьЭлемент();
		КонецЕсли;
		СкладОбъект.УстановитьСсылкуНового(Справочники.Склады.ПолучитьСсылку());
		ЗаписатьИдентификаторВРегистр(СкладОбъект.ПолучитьСсылкуНового(), структураОбъект.УИД);		
	Иначе
		СкладОбъект = СкладСсылка.ПолучитьОбъект();		
	КонецЕсли;
	
	СкладОбъект.ОбменДанными.Загрузка = Истина;
		
	ЗаполнитьЗначенияСвойств(СкладОбъект, структураОбъект,,"Родитель");
	
	Если УИДЗаполнен(структураОбъект.Родитель) Тогда
		СкладОбъект.Родитель = НайтиОбъектПоИдентификаторуНов(структураОбъект.Родитель);
		Если Не ЗначениеЗаполнено(СкладОбъект.Родитель) Тогда
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОбъект.УИД, структураОбъект.Родитель, "Родитель", XmlТипЗнч(СкладОбъект.Родитель).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);			
		КонецЕсли;
	Иначе
		СкладОбъект.Родитель = Справочники.Склады.ПустаяСсылка();
	КонецЕсли;	
	
	Если Не структураОбъект.ЭтоГруппа Тогда
		СкладОбъект.ТипСклада = Перечисления.ТипыСкладов[структураОбъект.ТипСклада];	
	КонецЕсли;
	
	СкладОбъект.Записать();	
		
КонецПроцедуры	 

Процедура ЗагрузитьРасходыБудущихПериодов(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты)
	
	Если Не УИДЗаполнен(структураОбъект.УИД) Тогда
		Возврат;
	КонецЕсли;	
	
	РБПСсылка = НайтиОбъектПоИдентификаторуНов(структураОбъект.УИД,Тип("СправочникСсылка.РасходыБудущихПериодов"));
	
	Если РБПСсылка = Неопределено Тогда
		РБПОбъект = Справочники.РасходыБудущихПериодов.СоздатьЭлемент();
		РБПОбъект.УстановитьСсылкуНового(Справочники.РасходыБудущихПериодов.ПолучитьСсылку());
		ЗаписатьИдентификаторВРегистр(РБПОбъект.ПолучитьСсылкуНового(), структураОбъект.УИД);		
	Иначе
		РБПОбъект = РБПСсылка.ПолучитьОбъект();		
	КонецЕсли;

	РБПОбъект.ОбменДанными.Загрузка = Истина;
		
	ЗаполнитьЗначенияСвойств(РБПОбъект, структураОбъект);
	
    РБПОбъект.ВидРБП = Перечисления.ВидыРБП[структураОбъект.ВидРБП];
    РБПОбъект.СпособПризнанияРасходов = Перечисления.СпособыПризнанияРасходов[структураОбъект.СпособПризнанияРасходов];
    РБПОбъект.ВидАктива = Перечисления.ВидыАктивовДляРБП[структураОбъект.ВидАктива];
    РБПОбъект.СчетЗатрат = ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора", структураОбъект.СчетЗатрат);
	
	РБПОбъект.Записать();
	
КонецПроцедуры	

Процедура ЗагрузитьПрочиеДоходыИРасходы(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты) 
	
	Если Не УИДЗаполнен(структураОбъект.УИД) Тогда
		Возврат;
	КонецЕсли;	
	
	ТипСправочника = "ПрочиеДоходыИРасходы";
	
	ИскомаяСсылка = НайтиОбъектПоИдентификаторуНов(структураОбъект.УИД);
	Если ИскомаяСсылка = Неопределено Тогда   
		Если структураОбъект.Наименование = "Оприходование излишков" Тогда
			ТекущийОбъект = Справочники[ТипСправочника].ОприходованиеИзлишков.ПолучитьОбъект();
		ИначеЕсли структураОбъект.Наименование = "Курсовые разницы доходы" Тогда
			ТекущийОбъект = Справочники[ТипСправочника].КурсовыеРазницы.ПолучитьОбъект();
		ИначеЕсли структураОбъект.Наименование = "Реализация ОС" Тогда
			ТекущийОбъект = Справочники[ТипСправочника].РеализацияОсновныхСредств.ПолучитьОбъект();
		ИначеЕсли структураОбъект.Наименование = "Разницы стоимости возврата и фактической стоимости товаров" Тогда
			ТекущийОбъект = Справочники[ТипСправочника].РазницыСтоимостиВозвратаИФактическойСтоимостиТоваров.ПолучитьОбъект();
		ИначеЕсли структураОбъект.Наименование = "Закрытие резервов по сомнительным долгам" Тогда
			ТекущийОбъект = Справочники[ТипСправочника].РезервыПоСомнительнымДолгам.ПолучитьОбъект();
		ИначеЕсли структураОбъект.Наименование = "Прибыль (убыток) прошлых лет" Тогда
			ТекущийОбъект = Справочники[ТипСправочника].ИсправительныеЗаписиПоОперациямПрошлыхЛет.ПолучитьОбъект();	
		Иначе
			ТекущийОбъект = Справочники[ТипСправочника].СоздатьЭлемент();
		КонецЕсли;
		
		Если ТекущийОбъект.ЭтоНовый() Тогда 
			ТекущийОбъект.УстановитьСсылкуНового(Справочники[ТипСправочника].ПолучитьСсылку());
			ЗаписатьИдентификаторВРегистр(ТекущийОбъект.ПолучитьСсылкуНового(), структураОбъект.УИД);
		Иначе
			ЗаписатьИдентификаторВРегистр(ТекущийОбъект.Ссылка, структураОбъект.УИД);
		КонецЕсли;
	Иначе
		ТекущийОбъект = ИскомаяСсылка.ПолучитьОбъект();	
	КонецЕсли;
	
	ТекущийОбъект.ОбменДанными.Загрузка = Истина;
		
	ЗаполнитьЗначенияСвойств(ТекущийОбъект, структураОбъект);
	
	Если ЗначениеЗаполнено(структураОбъект.ВидПрочихДоходовИРасходов) Тогда
		ТекущийОбъект.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов[структураОбъект.ВидПрочихДоходовИРасходов];
	КонецЕсли;
	Если ЗначениеЗаполнено(структураОбъект.ВидДеятельностиДляНалоговогоУчетаЗатрат) Тогда
    	ТекущийОбъект.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат[структураОбъект.ВидДеятельностиДляНалоговогоУчетаЗатрат];
	КонецЕсли;	
	
	ТекущийОбъект.Записать();
	
КонецПроцедуры

//Самойлов А.С. Начало 2022-09-27 #
Процедура ЗагрузитьСтатьюЗатрат(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты)
	
	Если Не УИДЗаполнен(структураОбъект.УИД) Тогда
		Возврат;
	КонецЕсли;	 
	
	ТипСправочника = "СтатьиЗатрат";
	
	ИскомаяСсылка = НайтиОбъектПоИдентификаторуНов(структураОбъект.УИД);
	Если ИскомаяСсылка = Неопределено Тогда  
		
		НадоДобавитьЗаписьВРегистр = Истина;
		
		Если структураОбъект.Наименование = "Амортизационная премия" Тогда
			ТекущийОбъект = Справочники[ТипСправочника].АмортизационнаяПремия;
		ИначеЕсли структураОбъект.Наименование = "Командировочные расходы" Тогда
			ТекущийОбъект = Справочники[ТипСправочника].КомандировочныеРасходы;
		ИначеЕсли структураОбъект.Наименование = "Малоценное оборудование и запасы" Тогда
			ТекущийОбъект = Справочники[ТипСправочника].ПриобретениеМалоценногоОборудованияИЗапасов;
		ИначеЕсли структураОбъект.Наименование = "Неамортизируемое имущество" Тогда
			ТекущийОбъект = Справочники[ТипСправочника].НеамортизируемоеИмущество;
		ИначеЕсли структураОбъект.Наименование = "Оплата труда" Тогда
			ТекущийОбъект = Справочники[ТипСправочника].ОплатаТруда;
		ИначеЕсли структураОбъект.Наименование = "Оплата труда (ЕНВД)" Тогда
			ТекущийОбъект = Справочники[ТипСправочника].ОплатаТрудаЕНВД;
		ИначеЕсли структураОбъект.Наименование = "Прочие затраты" Тогда
			ТекущийОбъект = Справочники[ТипСправочника].ПрочиеЗатраты;
		ИначеЕсли структураОбъект.Наименование = "Содержание служебного автотранспорта" Тогда
			ТекущийОбъект = Справочники[ТипСправочника].СлужебныйАвтотранспорт;
		ИначеЕсли структураОбъект.Наименование = "Списание материалов" Тогда
			ТекущийОбъект = Справочники[ТипСправочника].СписаниеМатериалов;
		ИначеЕсли структураОбъект.Наименование = "Списание НДС" Тогда
			ТекущийОбъект = Справочники[ТипСправочника].СписаниеНДСНаРасходы;
		ИначеЕсли структураОбъект.Наименование = "Списание НДС (ЕНВД)" Тогда
			ТекущийОбъект = Справочники[ТипСправочника].СписаниеНДСНаРасходыЕНВД;
		ИначеЕсли структураОбъект.Наименование = "Торговый сбор" Тогда
			ТекущийОбъект = Справочники[ТипСправочника].ТорговыйСбор;
		ИначеЕсли структураОбъект.Наименование = "Услуги комиссионеров" Тогда
			ТекущийОбъект = Справочники[ТипСправочника].УслугиКомиссионеров;
		Иначе
			ТекущийОбъект = Справочники[ТипСправочника].СоздатьЭлемент();
		КонецЕсли;  
		
		Если ТекущийОбъект.ЭтоНовый() Тогда 
			ТекущийОбъект.УстановитьСсылкуНового(Справочники[ТипСправочника].ПолучитьСсылку());
			ЗаписатьИдентификаторВРегистр(ТекущийОбъект.ПолучитьСсылкуНового(), структураОбъект.УИД);
		Иначе
			ЗаписатьИдентификаторВРегистр(ТекущийОбъект.Ссылка, структураОбъект.УИД);
		КонецЕсли;
	Иначе
		ТекущийОбъект = ИскомаяСсылка.ПолучитьОбъект();	
	КонецЕсли;
	
	ТекущийОбъект.ОбменДанными.Загрузка = Истина;
		
	ЗаполнитьЗначенияСвойств(ТекущийОбъект, структураОбъект);
		
	Если ЗначениеЗаполнено(структураОбъект.ВидРасходовНУ) Тогда
    	ТекущийОбъект.ВидРасходовНУ = Перечисления.ВидыРасходовНУ[структураОбъект.ВидРасходовНУ];
	КонецЕсли;	
	
	ТекущийОбъект.Записать();
	
КонецПроцедуры
//Самойлов А.С. Конец  2022-09-27

Процедура ЗагрузитьФизЛицо(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты)
	
 	Если Не УИДЗаполнен(структураОбъект.УИД) Тогда
		Возврат;
	КонецЕсли;	                       
	
	ФизЛицоСсылка = НайтиОбъектПоИдентификаторуНов(структураОбъект.УИД,Тип("СправочникСсылка.ФизическиеЛица"));
		
	Если ФизЛицоСсылка = Неопределено Тогда
		Если структураОбъект.ЭтоГруппа Тогда
			ФизЛицоОбъект = Справочники.ФизическиеЛица.СоздатьГруппу();
		Иначе
			ФизЛицоОбъект = Справочники.ФизическиеЛица.СоздатьЭлемент();
		КонецЕсли;
		ФизЛицоОбъект.УстановитьСсылкуНового(Справочники.ФизическиеЛица.ПолучитьСсылку());
		ЗаписатьИдентификаторВРегистр(ФизЛицоОбъект.ПолучитьСсылкуНового(), структураОбъект.УИД);		
	Иначе
		ФизЛицоОбъект = ФизЛицоСсылка.ПолучитьОбъект();		
	КонецЕсли;
	
	ФизЛицоОбъект.ОбменДанными.Загрузка = Истина;
		
	ЗаполнитьЗначенияСвойств(ФизЛицоОбъект, структураОбъект,,"Родитель");
	
	Если УИДЗаполнен(структураОбъект.Родитель) Тогда
		ФизЛицоОбъект.Родитель = НайтиОбъектПоИдентификаторуНов(структураОбъект.Родитель);
		Если НЕ ЗначениеЗаполнено(ФизЛицоОбъект.Родитель) Тогда                                
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОбъект.УИД, структураОбъект.Родитель, "Родитель", XmlТипЗнч(ФизЛицоОбъект.Родитель).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);			
		КонецЕсли;	
	Иначе
		ФизЛицоОбъект.Родитель = Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли;	
		
	Если НЕ структураОбъект.ЭтоГруппа Тогда
		
		ФизЛицоОбъект.Пол = Перечисления.ПолФизическогоЛица[структураОбъект.Пол]; 
		Если ЗначениеЗаполнено(структураОбъект.ЛьготаПриНачисленииПособий) Тогда
			ФизЛицоОбъект.ЛьготаПриНачисленииПособий = Перечисления.ОснованияФинансированияПособияФедеральнымБюджетом[структураОбъект.ЛьготаПриНачисленииПособий];
		КонецЕсли;	
		
	КонецЕсли;	
	
	ФизЛицоОбъект.Записать();
		
КонецПроцедуры	

Процедура ЗагрузитьРезервыОценочныеОбязательства(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты)

 	Если Не УИДЗаполнен(структураОбъект.УИД) Тогда
		Возврат;
	КонецЕсли;	                       
	
	РезервСсылка = НайтиОбъектПоИдентификаторуНов(структураОбъект.УИД,Тип("СправочникСсылка.Резервы"));
	
	Если РезервСсылка = Неопределено Тогда
		РезервОбъект = Справочники.Резервы.СоздатьЭлемент();
		РезервОбъект.УстановитьСсылкуНового(Справочники.Резервы.ПолучитьСсылку());
		ЗаписатьИдентификаторВРегистр(РезервОбъект.ПолучитьСсылкуНового(), структураОбъект.УИД);		
	Иначе
		РезервОбъект = РезервСсылка.ПолучитьОбъект();		
	КонецЕсли;
			
	РезервОбъект.ОбменДанными.Загрузка = Истина;
		
	ЗаполнитьЗначенияСвойств(РезервОбъект, структураОбъект);
	
	РезервОбъект.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьЦенныеБумаги(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты)

 	Если Не УИДЗаполнен(структураОбъект.УИД) Тогда
		Возврат;
	КонецЕсли;	                       
	
	ЦБСсылка = НайтиОбъектПоИдентификаторуНов(структураОбъект.УИД,Тип("СправочникСсылка.ЦенныеБумаги"));
	
	Если ЦБСсылка = Неопределено Тогда
		Если структураОбъект.ЭтоГруппа Тогда
			ЦБОбъект = Справочники.ЦенныеБумаги.СоздатьГруппу();
		Иначе
			ЦБОбъект = Справочники.ЦенныеБумаги.СоздатьЭлемент();
		КонецЕсли;
		ЦБОбъект.УстановитьСсылкуНового(Справочники.ЦенныеБумаги.ПолучитьСсылку());
		ЗаписатьИдентификаторВРегистр(ЦБОбъект.ПолучитьСсылкуНового(), структураОбъект.УИД);		
	Иначе
		ЦБОбъект = ЦБСсылка.ПолучитьОбъект();		
	КонецЕсли;
	
	ЦБОбъект.ОбменДанными.Загрузка = Истина;
		
	ЗаполнитьЗначенияСвойств(ЦБОбъект, структураОбъект,,"Родитель");
	
	Если УИДЗаполнен(структураОбъект.Родитель) Тогда
		ЦБОбъект.Родитель = НайтиОбъектПоИдентификаторуНов(структураОбъект.Родитель);
		Если НЕ ЗначениеЗаполнено(ЦБОбъект.Родитель) Тогда                                
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОбъект.УИД, структураОбъект.Родитель, "Родитель", XmlТипЗнч(ЦБОбъект.Родитель).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);			
		КонецЕсли;	
	Иначе
		ЦБОбъект.Родитель = Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли;
	
	ЦБОбъект.Записать();

КонецПроцедуры

Процедура ЗагрузитьОсновноеСредство(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты)
	
	Если Не УИДЗаполнен(структураОбъект.УИД) Тогда
		Возврат;
	КонецЕсли;	                       
	
	ОсновноеСредствоСсылка = НайтиОбъектПоИдентификаторуНов(структураОбъект.УИД,Тип("СправочникСсылка.ОсновныеСредства"));
	
	Если ОсновноеСредствоСсылка = Неопределено Тогда
		Если структураОбъект.ЭтоГруппа Тогда
			ОсновноеСредствоОбъект = Справочники.ОсновныеСредства.СоздатьГруппу();
		Иначе
			ОсновноеСредствоОбъект = Справочники.ОсновныеСредства.СоздатьЭлемент();
		КонецЕсли;
		ОсновноеСредствоОбъект.УстановитьСсылкуНового(Справочники.ОсновныеСредства.ПолучитьСсылку());
		ЗаписатьИдентификаторВРегистр(ОсновноеСредствоОбъект.ПолучитьСсылкуНового(), структураОбъект.УИД);		
	Иначе
		ОсновноеСредствоОбъект = ОсновноеСредствоСсылка.ПолучитьОбъект();		
	КонецЕсли;
		
	ОсновноеСредствоОбъект.ОбменДанными.Загрузка = Истина;
	
	ЗаполнитьЗначенияСвойств(ОсновноеСредствоОбъект, структураОбъект, "
		|Наименование, НаименованиеПолное, ПометкаУдаления, 
		|ДатаВыпуска, ЗаводскойНомер, Изготовитель, Комментарий, НомерПаспорта
		|");   
	
	Если УИДЗаполнен(структураОбъект.Родитель) Тогда
		ОсновноеСредствоОбъект.Родитель = НайтиОбъектПоИдентификаторуНов(структураОбъект.Родитель);
		Если Не ЗначениеЗаполнено(ОсновноеСредствоОбъект.Родитель) Тогда 
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОбъект.УИД, структураОбъект.Родитель, "Родитель", XmlТипЗнч(ОсновноеСредствоОбъект.Родитель).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);			
		КонецЕсли;	
	Иначе
		ОсновноеСредствоОбъект.Родитель = Справочники.ОсновныеСредства.ПустаяСсылка();
	КонецЕсли;
	
	ОсновноеСредствоОбъект.Код = структураОбъект.Код;
	
	Если НЕ структураОбъект.ЭтоГруппа Тогда
		ОсновноеСредствоОбъект.ТипОС = Перечисления.ТипыОС["ОбъектОС"];
		Если ЗначениеЗаполнено(структураОбъект.ГруппаОС) Тогда
			ОсновноеСредствоОбъект.ГруппаОС = Перечисления.ГруппыОС[структураОбъект.ГруппаОС];
		Иначе
			ОсновноеСредствоОбъект.ГруппаОС = Перечисления.ГруппыОС.ПустаяСсылка();
		КонецЕсли;	
		ОсновноеСредствоОбъект.КодПоОКОФ = ПолучитьКодОКОФ(структураОбъект.КодПоОКОФ); 
		Если ЗначениеЗаполнено(структураОбъект.УдалитьАмортизационнаяГруппа) Тогда
			ОсновноеСредствоОбъект.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы[структураОбъект.УдалитьАмортизационнаяГруппа];
		Иначе
			ОсновноеСредствоОбъект.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ПустаяСсылка();
		КонецЕсли;	
	КонецЕсли;
			
	ОсновноеСредствоОбъект.Записать();

КонецПроцедуры

Процедура ЗагрузитьОбъектСтроительства(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты)
	
	Если Не УИДЗаполнен(структураОбъект.УИД) Тогда
		Возврат;
	КонецЕсли;	                       
	
	ОбъектСтроительстваСсылка = НайтиОбъектПоИдентификаторуНов(структураОбъект.УИД, Тип("СправочникСсылка.ОбъектыСтроительства"));
	
	Если ОбъектСтроительстваСсылка = Неопределено Тогда
		Если НЕ структураОбъект.ЭтоГруппа Тогда
			ОбъектСтроительстваОбъект = Справочники.ОбъектыСтроительства.СоздатьЭлемент();
		Иначе
			ОбъектСтроительстваОбъект = Справочники.ОбъектыСтроительства.СоздатьГруппу();
		КонецЕсли;
		ОбъектСтроительстваОбъект.УстановитьСсылкуНового(Справочники.ОбъектыСтроительства.ПолучитьСсылку());
		ЗаписатьИдентификаторВРегистр(ОбъектСтроительстваОбъект.ПолучитьСсылкуНового(), структураОбъект.УИД);		
	Иначе
		ОбъектСтроительстваОбъект = ОбъектСтроительстваСсылка.ПолучитьОбъект();		
	КонецЕсли;

	ОбъектСтроительстваОбъект.ОбменДанными.Загрузка = Истина;
	
	ЗаполнитьЗначенияСвойств(ОбъектСтроительстваОбъект, структураОбъект, "Наименование, ПометкаУдаления");   
	
	Если УИДЗаполнен(структураОбъект.Родитель) Тогда
		ОбъектСтроительстваОбъект.Родитель = НайтиОбъектПоИдентификаторуНов(структураОбъект.Родитель);
		Если НЕ ЗначениеЗаполнено(ОбъектСтроительстваОбъект.Родитель) Тогда
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОбъект.УИД, структураОбъект.Родитель, "Родитель", XmlТипЗнч(ОбъектСтроительстваОбъект.Родитель).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);			
		КонецЕсли;	
	Иначе
		ОбъектСтроительстваОбъект.Родитель = Справочники.ОбъектыСтроительства.ПустаяСсылка();
	КонецЕсли;	
	
	ОбъектСтроительстваОбъект.Записать();

КонецПроцедуры

Процедура ЗагрузитьНематериальныйАктив(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты)
	
	Если Не УИДЗаполнен(структураОбъект.УИД) Тогда
		Возврат;
	КонецЕсли;	
	
	НематериальныйАктивСсылка = НайтиОбъектПоИдентификаторуНов(структураОбъект.УИД,Тип("СправочникСсылка.НематериальныеАктивы"));
	
	Если НематериальныйАктивСсылка = Неопределено Тогда
		Если НЕ структураОбъект.ЭтоГруппа Тогда
			НематериальныйАктивОбъект = Справочники.НематериальныеАктивы.СоздатьЭлемент();
		Иначе
			НематериальныйАктивОбъект = Справочники.НематериальныеАктивы.СоздатьГруппу();
		КонецЕсли;
		НематериальныйАктивОбъект.УстановитьСсылкуНового(Справочники.НематериальныеАктивы.ПолучитьСсылку());
		ЗаписатьИдентификаторВРегистр(НематериальныйАктивОбъект.ПолучитьСсылкуНового(), структураОбъект.УИД);		
	Иначе
		НематериальныйАктивОбъект = НематериальныйАктивСсылка.ПолучитьОбъект();		
	КонецЕсли;
	
	НематериальныйАктивОбъект.ОбменДанными.Загрузка = Истина;
	
	ЗаполнитьЗначенияСвойств(НематериальныйАктивОбъект, структураОбъект, "Наименование, НаименованиеПолное, ПометкаУдаления"); 
	НематериальныйАктивОбъект.ВидНМА = Перечисления.ВидыНМА[структураОбъект.ВидНМА];
	
	Если УИДЗаполнен(структураОбъект.Родитель) Тогда
		НематериальныйАктивОбъект.Родитель = НайтиОбъектПоИдентификаторуНов(структураОбъект.Родитель);
		Если Не ЗначениеЗаполнено(НематериальныйАктивОбъект.Родитель) Тогда
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОбъект.УИД, структураОбъект.Родитель, "Родитель", XmlТипЗнч(НематериальныйАктивОбъект.Родитель).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);			
		КонецЕсли;	
	Иначе
		НематериальныйАктивОбъект.Родитель = Справочники.НематериальныеАктивы.ПустаяСсылка();
	КонецЕсли;	
	
	НематериальныйАктивОбъект.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьСотрудника(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты)

 	Если Не УИДЗаполнен(структураОбъект.УИД) Тогда
		Возврат;
	КонецЕсли;	                       
	
	СотрудникСсылка = НайтиОбъектПоИдентификаторуНов(структураОбъект.УИД,Тип("СправочникСсылка.Сотрудники"));
	
	Если СотрудникСсылка = Неопределено Тогда
		СотрудникОбъект = Справочники.Сотрудники.СоздатьЭлемент();
		СотрудникОбъект.УстановитьСсылкуНового(Справочники.Сотрудники.ПолучитьСсылку());
		ЗаписатьИдентификаторВРегистр(СотрудникОбъект.ПолучитьСсылкуНового(), структураОбъект.УИД);		
		СотрудникОбъект.ГоловнойСотрудник = СотрудникОбъект.ПолучитьСсылкуНового();
	Иначе
		СотрудникОбъект = СотрудникСсылка.ПолучитьОбъект();	
		СотрудникОбъект.ГоловнойСотрудник = СотрудникОбъект.Ссылка;
	КонецЕсли;
			
	СотрудникОбъект.ОбменДанными.Загрузка = Истина;
		
	ЗаполнитьЗначенияСвойств(СотрудникОбъект, структураОбъект);
	
	СотрудникОбъект.ФизическоеЛицо = НайтиОбъектПоИдентификаторуНов(структураОбъект.ФизическоеЛицо);
	Если Не ЗначениеЗаполнено(СотрудникОбъект.ФизическоеЛицо) Тогда
		СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОбъект.УИД, структураОбъект.ФизическоеЛицо, "ФизическоеЛицо", XmlТипЗнч(СотрудникОбъект.ФизическоеЛицо).ИмяТипа);
		ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);			
	КонецЕсли;	
	
	СотрудникОбъект.ГоловнаяОрганизация = НайтиОбъектПоИдентификаторуНов(структураОбъект.ГоловнаяОрганизация,Тип("СправочникСсылка.Организации"));
	
	Если Не ЗначениеЗаполнено(СотрудникОбъект.ГоловнаяОрганизация) Тогда
		СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОбъект.УИД, структураОбъект.ГоловнаяОрганизация, "ГоловнаяОрганизация", XmlТипЗнч(СотрудникОбъект.ГоловнаяОрганизация).ИмяТипа);
		ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);			
	КонецЕсли;
	
	Если структураОбъект.Свойство("ГоловнойСотрудник") И УИДЗаполнен(структураОбъект.ГоловнойСотрудник) Тогда
		СотрудникОбъект.ГоловнойСотрудник = НайтиОбъектПоИдентификаторуНов(структураОбъект.ГоловнойСотрудник);
		Если НЕ ЗначениеЗаполнено(СотрудникОбъект.ГоловнойСотрудник) Тогда
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОбъект.УИД, структураОбъект.ГоловнойСотрудник, "ГоловнойСотрудник", XmlТипЗнч(СотрудникОбъект.ГоловнойСотрудник).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);			
		КонецЕсли;	
	КонецЕсли;
	
	СотрудникОбъект.Записать();

КонецПроцедуры     

Процедура ЗагрузитьСтатьюДДС(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты)

 	Если Не УИДЗаполнен(структураОбъект.УИД) Тогда
		Возврат;
	КонецЕсли;	  
	
	СтатьяДДССсылка = НайтиОбъектПоИдентификаторуНов(структураОбъект.УИД, Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств"));
	
	Если СтатьяДДССсылка = Неопределено Тогда		
		Если структураОбъект.ИмяПредопределенныхДанных = "ВозвратДенежныхСредствОтПоставщика" Тогда
			СтатьяДДСОбъект = Справочники.СтатьиДвиженияДенежныхСредств.ВозвратОтПоставщика.ПолучитьОбъект();
		ИначеЕсли структураОбъект.ИмяПредопределенныхДанных = "ВозвратПокупателю" Тогда
			СтатьяДДСОбъект = Справочники.СтатьиДвиженияДенежныхСредств.ВозвратОтПоставщика.ПолучитьОбъект();
		ИначеЕсли структураОбъект.ИмяПредопределенныхДанных = "ОплатаОтПокупателя" Тогда
			СтатьяДДСОбъект = Справочники.СтатьиДвиженияДенежныхСредств.ВозвратОтПоставщика.ПолучитьОбъект();
		ИначеЕсли структураОбъект.ИмяПредопределенныхДанных = "ОплатаПоставщику" Тогда
			СтатьяДДСОбъект = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщику.ПолучитьОбъект();
		ИначеЕсли структураОбъект.ИмяПредопределенныхДанных = "ВыплатаЗаработнойПлаты" Тогда
			СтатьяДДСОбъект = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаТруда.ПолучитьОбъект();
		ИначеЕсли НЕ структураОбъект.ЭтоГруппа Тогда
			СтатьяДДСОбъект = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
		Иначе
			СтатьяДДСОбъект = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьГруппу();
		КонецЕсли;
		Если СтатьяДДСОбъект.ЭтоНовый() Тогда 
			СтатьяДДСОбъект.УстановитьСсылкуНового(Справочники.СтатьиДвиженияДенежныхСредств.ПолучитьСсылку());
			ЗаписатьИдентификаторВРегистр(СтатьяДДСОбъект.ПолучитьСсылкуНового(), структураОбъект.УИД);
		Иначе
			ЗаписатьИдентификаторВРегистр(СтатьяДДСОбъект.Ссылка, структураОбъект.УИД);
		КонецЕсли;			
	Иначе
		СтатьяДДСОбъект = СтатьяДДССсылка.ПолучитьОбъект();		
	КонецЕсли;
			
	СтатьяДДСОбъект.ОбменДанными.Загрузка = Истина;
		
	ЗаполнитьЗначенияСвойств(СтатьяДДСОбъект, структураОбъект, , "ИмяПредопределенныхДанных");

	Если УИДЗаполнен(структураОбъект.Родитель) Тогда
		СтатьяДДСОбъект.Родитель = НайтиОбъектПоИдентификаторуНов(структураОбъект.Родитель);
		Если НЕ ЗначениеЗаполнено(СтатьяДДСОбъект.Родитель) Тогда
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОбъект.УИД, структураОбъект.Родитель, "Родитель", XmlТипЗнч(СтатьяДДСОбъект.Родитель).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);			
		КонецЕсли;	
	Иначе
		СтатьяДДСОбъект.Родитель = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();	
	КонецЕсли;	
	
	Если Не структураОбъект.ЭтоГруппа Тогда
		Если ЗначениеЗаполнено(структураОбъект.ВидДвиженияДенежныхСредств) И Метаданные.Перечисления.ВидыДвиженийДенежныхСредств.ЗначенияПеречисления.Найти(структураОбъект.ВидДвиженияДенежныхСредств) <> Неопределено Тогда
			СтатьяДДСОбъект.ВидДвиженияДенежныхСредств = Перечисления.ВидыДвиженийДенежныхСредств[структураОбъект.ВидДвиженияДенежныхСредств];
		Иначе	
			СтатьяДДСОбъект.ВидДвиженияДенежныхСредств = Перечисления.ВидыДвиженийДенежныхСредств.ПустаяСсылка();			
		КонецЕсли;	
	КонецЕсли;	
	
	СтатьяДДСОбъект.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьБанк(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты)

 	Если НЕ УИДЗаполнен(структураОбъект.УИД) Тогда
		Возврат;
	КонецЕсли;	                       
	
	//НадоДобавитьЗаписьВРегистр = Ложь;
	//БанкСсылка = НайтиОбъектПоИдентификаторуНов(структураОбъект.УИД);
	//Если БанкСсылка = Неопределено Тогда
	//	Если структураОбъект.ЭтоГруппа Тогда
	//		Банк = Справочники.Банки.НайтиПоКоду(структураОбъект.Код);
	//		Если Не ЗначениеЗаполнено(Банк) Тогда
	//			БанкОбъект = Справочники.Банки.СоздатьГруппу();
	//		Иначе
	//			БанкОбъект = Банк.ПолучитьОбъект();
	//		КонецЕсли;	
	//	Иначе	
	//		БанкОбъект = Справочники.Банки.СоздатьЭлемент();
	//	КонецЕсли;	
	//	НадоДобавитьЗаписьВРегистр = Истина;
	//Иначе
	//	БанкОбъект = БанкСсылка.ПолучитьОбъект();	
	//КонецЕсли;  
	
	ТипСправочника = "Банки";
	
	ТекущийОбъект = ПолучитьОбъектСправочника(структураОбъект, ТипСправочника, "Код");  
	ТекущийОбъект.ОбменДанными.Загрузка = Истина;

	ЗаполнитьЗначенияСвойств(ТекущийОбъект, структураОбъект);
	
	Если УИДЗаполнен(структураОбъект.Родитель) Тогда
		ТекущийОбъект.Родитель = НайтиОбъектПоИдентификаторуНов(структураОбъект.Родитель);
		Если Не ЗначениеЗаполнено(ТекущийОбъект.Родитель) Тогда		
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОбъект.УИД, структураОбъект.Родитель, "Родитель", XmlТипЗнч(ТекущийОбъект.Родитель).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);			
		КонецЕсли;	
	Иначе
		ТекущийОбъект.Родитель = Справочники[ТипСправочника].ПустаяСсылка();
	КонецЕсли;	
	
    Если НЕ структураОбъект.ЭтоГруппа Тогда

		Если УИДЗаполнен(структураОбъект.Страна) Тогда
			ТекущийОбъект.Страна = НайтиОбъектПоИдентификаторуНов(структураОбъект.Страна);
			Если НЕ ЗначениеЗаполнено(ТекущийОбъект.Страна) Тогда
				СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОбъект.УИД, структураОбъект.Страна, "Страна", XmlТипЗнч(ТекущийОбъект.Страна).ИмяТипа);
				ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);			
			КонецЕсли;
		Иначе
			ТекущийОбъект.Страна = Справочники.СтраныМира.ПустаяСсылка();
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(ТекущийОбъект.Ссылка) Тогда //если не новый!
			//уже проставили в заполнении значений свойств 0 или 3 - коррекируем, если ошибка
			Если ТекущийОбъект.РучноеИзменение = 0 И ТекущийОбъект.Ссылка.РучноеИзменение <> 3 Тогда
				ТекущийОбъект.РучноеИзменение = ТекущийОбъект.Ссылка.РучноеИзменение;
			КонецЕсли;	
		КонецЕсли;

	КонецЕсли;
	
	ТекущийОбъект.Записать();
	
КонецПроцедуры  

Процедура ЗагрузитьКлассификаторБанка(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты)

 	Если НЕ УИДЗаполнен(структураОбъект.УИД) Тогда
		Возврат;
	КонецЕсли;	                       
		
	ТипСправочника = "КлассификаторБанков";  
	
	ТекущийОбъект = ПолучитьОбъектСправочника(структураОбъект, ТипСправочника, "Код");  
	ТекущийОбъект.ОбменДанными.Загрузка = Истина;

	ЗаполнитьЗначенияСвойств(ТекущийОбъект, структураОбъект);
	
	Если УИДЗаполнен(структураОбъект.Родитель) Тогда
		ТекущийОбъект.Родитель = НайтиОбъектПоИдентификаторуНов(структураОбъект.Родитель, Тип("СправочникСсылка." + ТипСправочника));
		Если НЕ ЗначениеЗаполнено(ТекущийОбъект.Родитель) Тогда		
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОбъект.УИД, структураОбъект.Родитель, "Родитель", XmlТипЗнч(ТекущийОбъект.Родитель).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);			
		КонецЕсли;	
	Иначе
		ТекущийОбъект.Родитель = Справочники[ТипСправочника].ПустаяСсылка();
	КонецЕсли;	
	
    Если НЕ структураОбъект.ЭтоГруппа Тогда
		Если УИДЗаполнен(структураОбъект.Страна) Тогда
			ТекущийОбъект.Страна = НайтиОбъектПоИдентификаторуНов(структураОбъект.Страна);
			Если НЕ ЗначениеЗаполнено(ТекущийОбъект.Страна) Тогда
				СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОбъект.УИД, структураОбъект.Страна, "Страна", XmlТипЗнч(ТекущийОбъект.Страна).ИмяТипа);
				ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);			
			КонецЕсли;
		Иначе
			ТекущийОбъект.Страна = Справочники.СтраныМира.ПустаяСсылка();
		КонецЕсли;	
	КонецЕсли;
	
	ТекущийОбъект.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьБанковскийСчет(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты)

 	Если НЕ УИДЗаполнен(структураОбъект.УИД) Тогда
		Возврат;
	КонецЕсли;	                       
	
	Если структураОбъект.ТипВладельца = "Организация" Тогда
		Владелец = НайтиОбъектПоИдентификаторуНов(структураОбъект.Владелец, Тип("СправочникСсылка.Организации"));
	Иначе
		Владелец = НайтиОбъектПоИдентификаторуНов(структураОбъект.Владелец, Тип("СправочникСсылка.Контрагенты"));
	КонецЕсли;
	
	Если Владелец = Неопределено Тогда 
		СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", 
			структураОбъект.УИД, 
			структураОбъект.Владелец, 
			"Владелец", 
			?(структураОбъект.ТипВладельца = "Организация", Справочники.Организации.ПустаяСсылка(), Справочники.Контрагенты.ПустаяСсылка()));
		ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);
		Возврат;		
	КонецЕсли;		
	
	БанковскийСчетСсылка = НайтиОбъектПоИдентификаторуНов(структураОбъект.УИД, Тип("СправочникСсылка.БанковскиеСчета"), Новый Структура("Владелец", Владелец));  
	
	Если БанковскийСчетСсылка = Неопределено Тогда
		БанковскийСчетОбъект = Справочники.БанковскиеСчета.СоздатьЭлемент();
		БанковскийСчетОбъект.УстановитьСсылкуНового(Справочники.БанковскиеСчета.ПолучитьСсылку());
		ЗаписатьИдентификаторВРегистр(БанковскийСчетОбъект.ПолучитьСсылкуНового(), структураОбъект.УИД);		
		БанковскийСчетОбъект.Владелец = Владелец;
	Иначе
		БанковскийСчетОбъект = БанковскийСчетСсылка.ПолучитьОбъект();			
	КонецЕсли;
		
	БанковскийСчетОбъект.ОбменДанными.Загрузка = Истина;
		
	ЗаполнитьЗначенияСвойств(БанковскийСчетОбъект, структураОбъект, , "Владелец");
	
	Если структураОбъект.Свойство("СчетБанк") И ЗначениеЗаполнено(структураОбъект.СчетБанк) Тогда
		БанковскийСчетОбъект.СчетБанк = ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора", структураОбъект.СчетБанк);
	КонецЕсли;	

	Если УИДЗаполнен(структураОбъект.Банк) Тогда
		БанковскийСчетОбъект.Банк = НайтиОбъектПоИдентификаторуНов(структураОбъект.Банк);
		Если Не ЗначениеЗаполнено(БанковскийСчетОбъект.Банк) Тогда
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОбъект.УИД, структураОбъект.Банк, "Банк", XmlТипЗнч(БанковскийСчетОбъект.Банк).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);			
		КонецЕсли;	
	Иначе
		БанковскийСчетОбъект.Банк = Справочники.Банки.ПустаяСсылка();	
	КонецЕсли;	
	
	Если УИДЗаполнен(структураОбъект.ВалютаДенежныхСредств) Тогда
		БанковскийСчетОбъект.ВалютаДенежныхСредств = НайтиОбъектПоИдентификаторуНов(структураОбъект.ВалютаДенежныхСредств);
		Если Не ЗначениеЗаполнено(БанковскийСчетОбъект.ВалютаДенежныхСредств) Тогда
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОбъект.УИД, структураОбъект.ВалютаДенежныхСредств, "ВалютаДенежныхСредств", XmlТипЗнч(БанковскийСчетОбъект.ВалютаДенежныхСредств).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);			
		КонецЕсли;
	Иначе
		БанковскийСчетОбъект.ВалютаДенежныхСредств = Справочники.Валюты.ПустаяСсылка();
	КонецЕсли;	
	
	Если УИДЗаполнен(структураОбъект.БанкДляРасчетов) Тогда
		БанковскийСчетОбъект.БанкДляРасчетов = НайтиОбъектПоИдентификаторуНов(структураОбъект.БанкДляРасчетов);
		Если Не ЗначениеЗаполнено(БанковскийСчетОбъект.БанкДляРасчетов) Тогда
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураОбъект.УИД, структураОбъект.БанкДляРасчетов, "БанкДляРасчетов", XmlТипЗнч(БанковскийСчетОбъект.БанкДляРасчетов).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);			
		КонецЕсли;	
	Иначе
		БанковскийСчетОбъект.БанкДляРасчетов = Справочники.Банки.ПустаяСсылка();		
	КонецЕсли;
	
	Если ЗапрашиваемыеОбъекты.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;  

	Если Владелец = Неопределено Тогда 
		ОписаниеОшибок.errorCodeObj = "608";
		ОписаниеОшибок.errorObj = структураОбъект.УИД;
		ОписаниеОшибок.errorDescriptionObj = "При создании банковского счета не определен владелец!";
		Возврат;
	КонецЕсли;
	
	БанковскийСчетОбъект.Записать();

КонецПроцедуры

Функция ОпределитьВидКонтактнойИнформации(ИсходныйВидКИ)
	
	ВозвращаемыйВидКИ = Неопределено;
	
	Если ИсходныйВидКИ = "ТелефонКонтактногоЛица" Тогда
		Возврат Справочники.ВидыКонтактнойИнформации.ТелефонРабочийКонтактныеЛица;
	ИначеЕсли ИсходныйВидКИ = "МобильныйТелефонКонтактногоЛица" Тогда
		Возврат Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйКонтактныеЛица;
	ИначеЕсли ИсходныйВидКИ = "EmailКонтактногоЛица" Тогда
		Возврат Справочники.ВидыКонтактнойИнформации.EmailКонтактныеЛица;
	ИначеЕсли ИсходныйВидКИ = "EmailКонтрагента" Тогда
		Возврат Справочники.ВидыКонтактнойИнформации.EmailКонтрагенты;
	ИначеЕсли ИсходныйВидКИ = "ТелефонКонтрагента" Тогда
		Возврат Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
	ИначеЕсли ИсходныйВидКИ = "ФаксКонтрагенты" Тогда
		Возврат Справочники.ВидыКонтактнойИнформации.ФаксКонтрагенты;
	ИначеЕсли ИсходныйВидКИ = "ЮрАдресКонтрагента" Тогда
		Возврат Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
	ИначеЕсли ИсходныйВидКИ = "ФактАдресКонтрагента" Тогда
		Возврат Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
	ИначеЕсли ИсходныйВидКИ = "ПочтовыйАдресКонтрагента" Тогда
		Возврат Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента;
	ИначеЕсли ИсходныйВидКИ = "ДругаяИнформацияКонтрагенты" Тогда
		Возврат Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтрагенты;
	ИначеЕсли ИсходныйВидКИ = "EmailОрганизации" Тогда
		Возврат Справочники.ВидыКонтактнойИнформации.EmailОрганизации;
	ИначеЕсли ИсходныйВидКИ = "ТелефонОрганизации" Тогда
		Возврат Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации;
	ИначеЕсли ИсходныйВидКИ = "ФаксОрганизации" Тогда
		Возврат Справочники.ВидыКонтактнойИнформации.ФаксОрганизации;
	ИначеЕсли ИсходныйВидКИ = "ЮрАдресОрганизации" Тогда
		Возврат Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
	ИначеЕсли ИсходныйВидКИ = "ФактАдресОрганизации" Тогда
		Возврат Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
	ИначеЕсли ИсходныйВидКИ = "ПочтовыйАдресОрганизации" Тогда
		Возврат Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации;
	ИначеЕсли ИсходныйВидКИ = "ДругаяИнформацияОрганизации" Тогда
		Возврат Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияОрганизации;
	ИначеЕсли ИсходныйВидКИ = "ТелефонПользователя" Тогда
		Возврат Справочники.ВидыКонтактнойИнформации.ТелефонПользователя;
	ИначеЕсли ИсходныйВидКИ = "EmailПользователя" Тогда
		Возврат Справочники.ВидыКонтактнойИнформации.EmailПользователя; 
	ИначеЕсли ИсходныйВидКИ = "EMailФизическиеЛица" Тогда
		Возврат Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица;
	ИначеЕсли ИсходныйВидКИ = "ТелефонРабочийФизическиеЛица" Тогда
		Возврат Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица;
	ИначеЕсли ИсходныйВидКИ = "ТелефонМобильныйФизическиеЛица" Тогда
		Возврат Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица;
	ИначеЕсли ИсходныйВидКИ = "АдресЗаПределамиРФФизическиеЛица" Тогда
		Возврат Справочники.ВидыКонтактнойИнформации.АдресЗаПределамиРФФизическиеЛица;
	ИначеЕсли ИсходныйВидКИ = "ТелефонДомашнийФизическиеЛица" Тогда
		Возврат Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица;
	ИначеЕсли ИсходныйВидКИ = "АдресПоПропискеФизическиеЛица" Тогда
		Возврат Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица;
	ИначеЕсли ИсходныйВидКИ = "АдресМестаПроживанияФизическиеЛица" Тогда
		Возврат Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица;
	ИначеЕсли ИсходныйВидКИ = "АдресДляИнформированияФизическиеЛица" Тогда
		Возврат Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияФизическиеЛица;
		//добавить при необходимсоти виды КИ под другие объекты
	КонецЕсли;
	
	Возврат ВозвращаемыйВидКИ;
	
КонецФункции	

Процедура ЗагрузитьЗарплатныйПроект(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты) 
	
 	Если НЕ УИДЗаполнен(структураОбъект.УИД) Тогда
		Возврат;
	КонецЕсли;	
	
	ТипСправочника = "ЗарплатныеПроекты";
	
	ТекущийОбъект = ПолучитьОбъектСправочника(структураОбъект, ТипСправочника);  
	ТекущийОбъект.ОбменДанными.Загрузка = Истина;
		
	ЗаполнитьЗначенияСвойств(ТекущийОбъект, структураОбъект); 
	
	ЗаполнитьРеквизитПоДаннымERP(ТекущийОбъект, "Валюта", структураОбъект, "Валюта", Тип("СправочникСсылка.Валюты"), ЗапрашиваемыеОбъекты);
	ЗаполнитьРеквизитПоДаннымERP(ТекущийОбъект, "Банк", структураОбъект, "Банк", Тип("СправочникСсылка.КлассификаторБанков"), ЗапрашиваемыеОбъекты);
	ЗаполнитьРеквизитПоДаннымERP(ТекущийОбъект, "Организация", структураОбъект, "Организация", Тип("СправочникСсылка.Организации"), ЗапрашиваемыеОбъекты); 
	ЗаполнитьРеквизитПоДаннымERP(ТекущийОбъект, "ФорматФайла", структураОбъект, "ФорматФайла", Тип("ПеречислениеСсылка.ФорматыФайловОбменаПоЗарплатномуПроекту"), ЗапрашиваемыеОбъекты, "ФорматыФайловОбменаПоЗарплатномуПроекту");
	
	Для каждого структураСтрока из структураОбъект.СистемыРасчетовПоБанковскимКартам Цикл 
		НоваяСтрока = ТекущийОбъект.СистемыРасчетовПоБанковскимКартам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, структураСтрока);
	КонецЦикла;
	
	ТекущийОбъект.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьСпособВыплатыЗарплаты(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты) 
	
 	Если НЕ УИДЗаполнен(структураОбъект.УИД) Тогда
		Возврат;
	КонецЕсли;	
	
	ТипСправочника = "СпособыВыплатыЗарплаты";
	
	ТекущийОбъект = ПолучитьОбъектСправочника(структураОбъект, ТипСправочника, "Наименование");  
	ТекущийОбъект.ОбменДанными.Загрузка = Истина;
		
	ЗаполнитьЗначенияСвойств(ТекущийОбъект, структураОбъект); 
	
	ЗаполнитьРеквизитПоДаннымERP(ТекущийОбъект, "СтатьяРасходов", структураОбъект, "СтатьяРасходов", Тип("СправочникСсылка.СтатьиРасходовЗарплата"), ЗапрашиваемыеОбъекты);
	ЗаполнитьРеквизитПоДаннымERP(ТекущийОбъект, "Округление", структураОбъект, "Округление", Тип("СправочникСсылка.СпособыОкругленияПриРасчетеЗарплаты"), ЗапрашиваемыеОбъекты);
	ЗаполнитьРеквизитПоДаннымERP(ТекущийОбъект, "ХарактерВыплаты", структураОбъект, "ХарактерВыплаты", Тип("ПеречислениеСсылка.ХарактерВыплатыЗарплаты"), ЗапрашиваемыеОбъекты, "ХарактерВыплатыЗарплаты");
	ЗаполнитьРеквизитПоДаннымERP(ТекущийОбъект, "СпособПолучения", структураОбъект, "СпособПолучения", Тип("ПеречислениеСсылка.СпособыПолученияЗарплатыКВыплате"), ЗапрашиваемыеОбъекты, "СпособыПолученияЗарплатыКВыплате");
	
	ТекущийОбъект.Записать();
	
КонецПроцедуры  

Процедура ЗагрузитьСпособОкругленияПриРасчетеЗарплаты(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты) 
	
 	Если Не УИДЗаполнен(структураОбъект.УИД) Тогда
		Возврат;
	КонецЕсли;	
	
	ТипСправочника = "СпособыОкругленияПриРасчетеЗарплаты"; 
	
	ТекущийОбъект = ПолучитьОбъектСправочника(структураОбъект, ТипСправочника);  
	ТекущийОбъект.ОбменДанными.Загрузка = Истина;
		
	ЗаполнитьЗначенияСвойств(ТекущийОбъект, структураОбъект); 
	
	ЗаполнитьРеквизитПоДаннымERP(ТекущийОбъект, "ПравилоОкругления", структураОбъект, "ПравилоОкругления", Тип("ПеречислениеСсылка.ПравилаОкругленияПриРасчетеЗарплаты"), ЗапрашиваемыеОбъекты, "ПравилаОкругленияПриРасчетеЗарплаты");
	
	ТекущийОбъект.Записать();
		
КонецПроцедуры

Процедура ЗагрузитьСтатьюРасходовЗарплата(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты)
	
 	Если НЕ УИДЗаполнен(структураОбъект.УИД) Тогда
		Возврат;
	КонецЕсли;	
	
	ТипСправочника = "СтатьиРасходовЗарплата"; 
	
	ТекущийОбъект = ПолучитьОбъектСправочника(структураОбъект, ТипСправочника, "Код");  
	ТекущийОбъект.ОбменДанными.Загрузка = Истина;
		
	ЗаполнитьЗначенияСвойств(ТекущийОбъект, структураОбъект); 
	
	Если УИДЗаполнен(структураОбъект.Родитель) Тогда
		ЗаполнитьРеквизитПоДаннымERP(ТекущийОбъект, "Родитель", структураОбъект, "Родитель", Тип("СправочникСсылка." + ТипСправочника), ЗапрашиваемыеОбъекты);
	Иначе
		ТекущийОбъект.Родитель = Справочники[ТипСправочника].ПустаяСсылка();
	КонецЕсли;
	
	Если НЕ структураОбъект.ЭтоГруппа Тогда   
		ЗаполнитьРеквизитПоДаннымERP(ТекущийОбъект, "СпособРасчетовСФизическимиЛицами", структураОбъект, "СпособРасчетовСФизическимиЛицами", Тип("ПеречислениеСсылка.СпособыРасчетовСФизическимиЛицами"), ЗапрашиваемыеОбъекты, "СпособыРасчетовСФизическимиЛицами");
	КонецЕсли;
	
	ТекущийОбъект.Записать();
		
КонецПроцедуры    

Процедура ЗагрузитьДолжность(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты)  
	
	Если Не УИДЗаполнен(структураОбъект.УИД) Тогда
		Возврат;
	КонецЕсли;	
	
	ТипСправочника = "Должности"; 
	
	ТекущийОбъект = ПолучитьОбъектСправочника(структураОбъект, ТипСправочника);  
	ТекущийОбъект.ОбменДанными.Загрузка = Истина;
	
	ЗаполнитьЗначенияСвойств(ТекущийОбъект, структураОбъект); 
	
	ТекущийОбъект.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьВидДоходовНДФЛ(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты) 

	Если Не УИДЗаполнен(структураОбъект.УИД) Тогда
		Возврат;
	КонецЕсли;	
	
	ТипСправочника = "ВидыДоходовНДФЛ"; 
	
	ТекущийОбъект = ПолучитьОбъектСправочника(структураОбъект, ТипСправочника);  
	ТекущийОбъект.ОбменДанными.Загрузка = Истина;
	
	ЗаполнитьЗначенияСвойств(ТекущийОбъект, структураОбъект); 
	
	ЗаполнитьРеквизитПоДаннымERP(ТекущийОбъект, "СтавкаНалогообложенияРезидента", структураОбъект, "СтавкаНалогообложенияРезидента", Тип("ПеречислениеСсылка.НДФЛСтавкиНалогообложенияРезидента"), ЗапрашиваемыеОбъекты, "НДФЛСтавкиНалогообложенияРезидента");
	ЗаполнитьРеквизитПоДаннымERP(ТекущийОбъект, "ВычетПоУмолчанию", структураОбъект, "ВычетПоУмолчанию", Тип("СправочникСсылка.ВидыВычетовНДФЛ"), ЗапрашиваемыеОбъекты);
	
	ТекущийОбъект.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаДокументов  

//!!!! везде на поисках объектов по УИД если не нашли объект, добавлять в массив запращиваемых
//!!!! по окончании загрузки, если массив запрашиваемых не пустой и транзакция активна - отменяем её и отправляем в ответе массиив 

Процедура ЗагрузитьАвансовыйОтчет(структураДокумент, ОписаниеОшибок, ЗапрашиваемыеОбъекты)

	ДокументСсылка = НайтиОбъектПоИдентификаторуНов(структураДокумент.УИД);	

	Если ДокументСсылка <> Неопределено И ОбщегоНазначения.СсылкаСуществует(ДокументСсылка) Тогда
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();		
	Иначе
		ДокументОбъект = Документы.АвансовыйОтчет.СоздатьДокумент();
		ДокументОбъект.УстановитьСсылкуНового(Документы.АвансовыйОтчет.ПолучитьСсылку());	
		ЗаписатьИдентификаторВРегистр(ДокументОбъект.ПолучитьСсылкуНового(), структураДокумент.УИД);  
		ДокументСсылка = ДокументОбъект.ПолучитьСсылкуНового();
	КонецЕсли;                                    
	
	ЗаполнитьЗначенияСвойств(ДокументОбъект, структураДокумент,
		"Номер,
		|Дата,
		|ПометкаУдаления,
		|НазначениеАванса,
		|КоличествоДокументов,
		|КоличествоЛистов,
		|Комментарий"); 
	
	ДокументОбъект.КурсДокумента = структураДокумент.КурсЧислитель;
	ДокументОбъект.КратностьДокумента = структураДокумент.КурсЗнаменатель;
	ДокументОбъект.СуммаВключаетНДС = структураДокумент.ЦенаВключаетНДС;
			
	ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийАвансовыйОтчет[структураДокумент.ВидОперации];
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект,"Организация",структураДокумент,"Организация",Тип("СправочникСсылка.Организации"),ЗапрашиваемыеОбъекты);
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект,"Склад",структураДокумент,"Склад",Тип("СправочникСсылка.Склады"),ЗапрашиваемыеОбъекты);
		
	Если УИДЗаполнен(структураДокумент.ПодразделениеОрганизации) Тогда
		Подразделение = НайтиОбъектПоИдентификаторуНов(структураДокумент.ПодразделениеОрганизации, Тип("СправочникСсылка.ПодразделенияОрганизаций"), Новый Структура("Владелец", ДокументОбъект.Организация)); 
		Если Подразделение <> Неопределено Тогда
			ДокументОбъект.ПодразделениеОрганизации = Подразделение;	
		Иначе
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураДокумент.УИД, структураДокумент.Подразделение, "Подразделение", XmlТипЗнч(ДокументОбъект.ПодразделениеОрганизации).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);
		КонецЕсли;
	Иначе
		ДокументОбъект.ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	КонецЕсли;	
		
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект,"ВалютаДокумента",структураДокумент,"ВалютаДокумента",,ЗапрашиваемыеОбъекты);

	ДокументОбъект.ВыданныеАвансы.Очистить();	
	ДокументОбъект.Товары.Очистить();
	ДокументОбъект.ВозвратнаяТара.Очистить();
	ДокументОбъект.ОплатаПоставщикам.Очистить();
	ДокументОбъект.Прочее.Очистить();
	ДокументОбъект.Билеты.Очистить();
	ДокументОбъект.Суточные.Очистить();

	ДокументОбъект.СуммаВключаетНДС = структураДокумент.ЦенаВключаетНДС;
		
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект,"ФизЛицо",структураДокумент,"ФизЛицо",,ЗапрашиваемыеОбъекты);
	
	Если структураДокумент.Свойство("Товары") Тогда
		Для Каждого структураСтрока Из структураДокумент.Товары Цикл	
			новСтрТовар = ДокументОбъект.Товары.Добавить();
				
			ЗаполнитьЗначенияСвойств(новСтрТовар,структураСтрока,
				"Количество,
				|Цена,
				|Сумма,
				|СуммаНДС");
			
			новСтрТовар.СтавкаНДС = Перечисления.СтавкиНДС[структураСтрока.СтавкаНДС];
			
			ЗаполнитьРеквизитПоДаннымERP(новСтрТовар,"Номенклатура",структураСтрока,"Номенклатура",,ЗапрашиваемыеОбъекты);
			
			ЗаполнитьНомерГТД(новСтрТовар, структураСтрока.НомерГТД, ЗапрашиваемыеОбъекты, структураДокумент.УИД);			
		КонецЦикла;  
	КонецЕсли;
	
	тзРаспределитьНаСебестоимость = Новый ТаблицаЗначений;
	тзРаспределитьНаСебестоимость.Колонки.Добавить("СтатьяРасходов",Новый ОписаниеТипов("СправочникСсылка.СтатьиЗатрат"));
	тзРаспределитьНаСебестоимость.Колонки.Добавить("ДокументДляРаспределения");
	тзРаспределитьНаСебестоимость.Колонки.Добавить("Сумма",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
	
	Если структураДокумент.Свойство("Прочее") Тогда
			
		Для Каждого структураСтрока Из структураДокумент.Прочее Цикл
			
			новСтр = ДокументОбъект.Прочее.Добавить();
						
			ЗаполнитьЗначенияСвойств(новСтр,структураСтрока,
				"Сумма,
				|СуммаНДС");
			
			новСтр.СтавкаНДС = Перечисления.СтавкиНДС[структураСтрока.СтавкаНДС];
			
			Если структураСтрока.Свойство("Номенклатура") Тогда
				ЗаполнитьРеквизитПоДаннымERP(новСтр,"Номенклатура",структураСтрока,"Номенклатура",,ЗапрашиваемыеОбъекты);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(структураСтрока.СчетУчета) Тогда
				ЗаполнитьРеквизитПоДаннымERP(новСтр,"СчетЗатрат",структураСтрока,"СчетУчета",,ЗапрашиваемыеОбъекты);
			КонецЕсли;
			
			СтатьяРасходов = НайтиОбъектПоИдентификаторуНов(структураСтрока.СтатьяРасходов,Тип("СправочникСсылка.СтатьиЗатрат"));
			Если СтатьяРасходов = Неопределено Тогда                  				
				СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", "", структураСтрока.СтатьяРасходов, "СтатьяРасходов", XmlТипЗнч(Справочники.СтатьиЗатрат.ПустаяСсылка()).ИмяТипа);
				ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта); 
				Продолжить;
			КонецЕсли;
			
			новСтр.Субконто1 = СтатьяРасходов;
			новСтр.Содержание = СтатьяРасходов.Наименование;
			
			Если структураСтрока.Свойство("ПодразделениеЗатрат") Тогда
				Если УИДЗаполнен(структураСтрока.ПодразделениеЗатрат) Тогда
					Подразделение = НайтиОбъектПоИдентификаторуНов(структураСтрока.ПодразделениеЗатрат, Тип("СправочникСсылка.ПодразделенияОрганизаций"), Новый Структура("Владелец", ДокументОбъект.Организация)); 
					Если Подразделение <> Неопределено Тогда
						новСтр.ПодразделениеЗатрат = Подразделение;	
					Иначе
						СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураДокумент.УИД, структураСтрока.ПодразделениеЗатрат, "Подразделение", XmlТипЗнч(ДокументОбъект.ПодразделениеОрганизации).ИмяТипа);
						ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если структураСтрока.Свойство("РаспределитьНаСебестоимость") И структураСтрока.РаспределитьНаСебестоимость Тогда
								
				Сумма = новСтр.Сумма;
				Если ДокументОбъект.СуммаВключаетНДС Тогда
					Сумма = Сумма - новСтр.СуммаНДС;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(структураСтрока.ДокументДляРаспределенияРасходов) Тогда
					ДокументДляРаспределения = НайтиОбъектПоИдентификаторуНов(структураСтрока.ДокументДляРаспределенияРасходов,Тип("ДокументСсылка.ПоступлениеТоваровУслуг"));
					Если ДокументДляРаспределения = Неопределено Тогда                  				
						СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", "", структураСтрока.ДокументДляРаспределенияРасходов, "ДокументДляРаспределенияРасходов", XmlТипЗнч(Документы.ПоступлениеТоваровУслуг.ПустаяСсылка()).ИмяТипа);
						ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта); 
						Продолжить;
					КонецЕсли;  
				Иначе
					ДокументДляРаспределения = ДокументСсылка;
				КонецЕсли;
				
				строкиРаспределения = тзРаспределитьНаСебестоимость.НайтиСтроки(Новый Структура("СтатьяРасходов,ДокументДляРаспределения",СтатьяРасходов,ДокументДляРаспределения));
				
				Если строкиРаспределения.Количество() > 0 Тогда
					строкаРаспределения = строкиРаспределения[0];
				Иначе
					строкаРаспределения = тзРаспределитьНаСебестоимость.Добавить();
					строкаРаспределения.СтатьяРасходов = СтатьяРасходов;
					строкаРаспределения.ДокументДляРаспределения = ДокументДляРаспределения;
				КонецЕсли;
							
				строкаРаспределения.Сумма = строкаРаспределения.Сумма + Сумма;
								
			КонецЕсли;	
			
		КонецЦикла;   
		
	КонецЕсли;
	
	Если структураДокумент.Свойство("ОплатаПоставщикам") Тогда
	
		Для Каждого структураСтрока Из структураДокумент.ОплатаПоставщикам Цикл	
			НоваяСтрока = ДокументОбъект.ОплатаПоставщикам.Добавить();
				
			ЗаполнитьЗначенияСвойств(НоваяСтрока,структураСтрока,
				"Сумма,
				|СуммаВзаиморасчетов");
			
			ЗаполнитьРеквизитПоДаннымERP(НоваяСтрока,"Контрагент",структураСтрока,"Контрагент",,ЗапрашиваемыеОбъекты);  
			
			ЗаполнитьРеквизитПоДаннымERP(НоваяСтрока, "ДоговорКонтрагента", структураСтрока, "ДоговорКонтрагента", , ЗапрашиваемыеОбъекты);
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.ДоговорКонтрагента) Тогда
				ПараметрыДоговора = Новый Структура;
				ПараметрыДоговора.Вставить("ВидДоговора", "СПоставщиком"); 
				ПараметрыДоговора.Вставить("Валюта", ДокументОбъект.ВалютаДокумента);  
				НоваяСтрока.ДоговорКонтрагента = НайтиСоздатьОсновнойДоговорКонтрагента(ДокументОбъект.Организация, НоваяСтрока.Контрагент, ПараметрыДоговора);
			КонецЕсли;	
			
			НоваяСтрока.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
			
		КонецЦикла;
		
	КонецЕсли;
			
	
	Если ЗапрашиваемыеОбъекты.Количество() > 0 Тогда
		Возврат;
	Иначе
		ДокументОбъект.ДополнительныеСвойства.Вставить("ЗаполнитьСчетаУчетаПередЗаписью", Истина);
		ЗаписатьДокумент(ДокументОбъект, структураДокумент, ОписаниеОшибок);
		СоздатьРаспределениеНаСебестоимость(ДокументОбъект.Ссылка,тзРаспределитьНаСебестоимость);
	КонецЕсли;
	
КонецПроцедуры	

Процедура ЗагрузитьКорректировкуПоступления(структураДокумент, ОписаниеОшибок, ЗапрашиваемыеОбъекты)  
	
	ДокументОбъект = НайтиСоздатьОбъектДокумента(структураДокумент.УИД, "КорректировкаПоступления");
	
	Если УИДЗаполнен(структураДокумент.ДокументОснование) Тогда
		ДокументОснование = НайтиОбъектПоИдентификаторуНов(структураДокумент.ДокументОснование); 
		Если ДокументОснование = Неопределено Тогда
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураДокумент.УИД, структураДокумент.ДокументОснование, "ДокументОснование", "");
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;//Вообще это некорректная ситуация, но вроде как мы сюда никогда не попадём
	КонецЕсли;
	
	Если ДокументОснование.Дата >= '20210101' Тогда
		
		ДокументОбъект.Заполнить(ДокументОснование);
		ДокументОбъект.Номер = структураДокумент.Номер;
		ДокументОбъект.Дата = структураДокумент.Дата; 
		ДокументОбъект.ВосстановитьНДС = Ложь;
		
		Для Каждого стрРасхождения Из структураДокумент.Расхождения Цикл
			
			Номенклатура = НайтиОбъектПоИдентификаторуНов(стрРасхождения.Номенклатура);
			Если Номенклатура = Неопределено Тогда
				СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураДокумент.УИД, стрРасхождения.Номенклатура, "Номенклатура", "");
				ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);
				Продолжить;
			КонецЕсли;
			
			Если ДокументОбъект.СуммаВключаетНДС Тогда
				Сумма = стрРасхождения.СуммаСНДС;
			Иначе
				Сумма = стрРасхождения.Сумма;	
			КонецЕсли;
			
			СтрокаТоваровНайдена = Ложь;
			Для Каждого стрТовары Из ДокументОбъект.Товары Цикл
				Если стрТовары.Номенклатура = Номенклатура
					И стрТовары.КоличествоДоИзменения + стрРасхождения.Количество >= 0
					И стрТовары.СуммаДоИзменения + Сумма >= 0 Тогда
					
					СтрокаТоваровНайдена = Истина;				
					Прервать; 
				КонецЕсли;
			КонецЦикла; 
			
			Если НЕ СтрокаТоваровНайдена Тогда
				Для Каждого стрТовары Из ДокументОбъект.Услуги Цикл
					Если стрТовары.Номенклатура = Номенклатура
						И стрТовары.КоличествоДоИзменения + стрРасхождения.Количество >= 0
						И стрТовары.СуммаДоИзменения + Сумма >= 0 Тогда
						
						СтрокаТоваровНайдена = Истина;				
						Прервать; 
					КонецЕсли;
				КонецЦикла; 
			КонецЕсли;
			
			Если СтрокаТоваровНайдена Тогда 
			
				стрТовары.Количество = стрТовары.КоличествоДоИзменения + стрРасхождения.Количество;
				стрТовары.Сумма = стрТовары.СуммаДоИзменения + Сумма;
				стрТовары.СуммаНДС = стрТовары.СуммаНДСДоИзменения + стрРасхождения.СуммаНДС; 
				
			КонецЕсли;
				
		КонецЦикла;
		
	Иначе       
		
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение;
		ДокументОбъект.ВосстановитьНДС = Ложь;
		
		
		ДокументОбъект.Номер = структураДокумент.Номер;
		ДокументОбъект.Дата = структураДокумент.Дата;
		
		ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "Организация",структураДокумент, "Организация", Тип("СправочникСсылка.Организации"), ЗапрашиваемыеОбъекты);
		
		ДокументОбъект.ДокументПоступления = ДокументОснование;
		ДокументОбъект.ИсправляемыйДокументПоступления = ДокументОснование;
		
		ДокументОбъект.Контрагент = ДокументОснование.Контрагент;
		ДокументОбъект.ДоговорКонтрагента = ДокументОснование.ДоговорКонтрагента;
		ДокументОбъект.ВалютаДокумента = ДокументОснование.ВалютаДокумента; 
		
		ДокументОбъект.СуммаВключаетНДС = Истина;
		ДокументОбъект.ПризнаватьЗачитыватьАванс = Истина;
		ДокументОбъект.НомерИсходногоДокумента = ДокументОснование.Номер;
		ДокументОбъект.ДатаИсходногоДокумента = ДокументОснование.Дата;
					
		ДокументОбъект.КорректироватьНДС = Истина;
			
		ДокументОбъект.Товары.Очистить();
		
		Для Каждого стрРасхождения Из структураДокумент.Расхождения Цикл
			
			стрТовары = ДокументОбъект.Товары.Добавить();
			
			Номенклатура = НайтиОбъектПоИдентификаторуНов(стрРасхождения.Номенклатура);
			Если Номенклатура = Неопределено Тогда
				СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураДокумент.УИД, стрРасхождения.Номенклатура, "Номенклатура", "");
				ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);
				Продолжить;
			КонецЕсли;
			
			Если ДокументОбъект.СуммаВключаетНДС Тогда
				Сумма = стрРасхождения.СуммаСНДС;
			Иначе
				Сумма = стрРасхождения.Сумма;	
			КонецЕсли;
			
			стрТовары.Номенклатура = Номенклатура;
			стрТовары.КоличествоДоИзменения = -стрРасхождения.Количество; 
			стрТовары.СуммаДоИзменения = -Сумма;
			стрТовары.СуммаНДСДоИзменения = -стрРасхождения.СуммаНДС;  
			
			стрТовары.СтавкаНДС = Перечисления.СтавкиНДС[стрРасхождения.СтавкаНДС]; 		
			
		КонецЦикла;		
		
	КонецЕсли; 
	
	Если ЗапрашиваемыеОбъекты.Количество() > 0 Тогда
		Возврат;
	Иначе   
		ДокументОбъект.ДополнительныеСвойства.Вставить("ЗаполнитьСчетаУчетаПередЗаписью", Истина);
		Если ДокументОснование.Дата < '20210101' Тогда
			ДокументОбъект.РучнаяКорректировка = Истина; 
			ЗаписатьДокумент(ДокументОбъект, структураДокумент, ОписаниеОшибок); 
			ЗагрузитьПроводкиДокумента(ДокументОбъект, структураДокумент.Проводки, ЗапрашиваемыеОбъекты);
		Иначе                                                                     
			Если ЗначениеЗаполнено(структураДокумент.НомерСФ) Тогда
				ДокументОбъект.ВосстановитьНДС = Истина;
			КонецЕсли;				
			ЗаписатьДокумент(ДокументОбъект, структураДокумент, ОписаниеОшибок, "Полученный"); 
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗагрузитьКорректировкуДолга(структураДокумент, ОписаниеОшибок, ЗапрашиваемыеОбъекты)
	
	ДокументОбъект = НайтиСоздатьОбъектДокумента(структураДокумент.УИД, "КорректировкаДолга");
	//
	ДокументОбъект.ДебиторскаяЗадолженность.Очистить();
	ДокументОбъект.КредиторскаяЗадолженность.Очистить();
	
	ЗаполнитьЗначенияСвойств(ДокументОбъект, структураДокумент,	"
		|Дата,
		|Комментарий");  
	
	ДокументОбъект.ПометкаУдаления = структураДокумент.ПометкаУдаления;
	
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "Организация", структураДокумент, "Организация", Тип("СправочникСсылка.Организации"), ЗапрашиваемыеОбъекты);
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "ВалютаДокумента", структураДокумент, "Валюта", , ЗапрашиваемыеОбъекты);  
	//по умолчанию рубль
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда  
		ДокументОбъект.ВалютаДокумента = Справочники.Валюты.НайтиПоКоду("643");
	КонецЕсли;        
	
	ЭтоЗагрузкаИзВзаимозачетаЗадолженности = структураДокумент.ТипОбъекта = "ВзаимозачетЗадолженности";
	ЭтоЗагрузкаИзКорректировкиЗадолженности = структураДокумент.ТипОбъекта = "КорректировкаЗадолженности";
	
	Если ЭтоЗагрузкаИзВзаимозачетаЗадолженности Тогда
		ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "КонтрагентДебитор", структураДокумент, "КонтрагентДебитор", , ЗапрашиваемыеОбъекты); 
		ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "КонтрагентКредитор", структураДокумент, "КонтрагентКредитор", , ЗапрашиваемыеОбъекты); 
				
		ТипДебитора = ""; 
		Если структураДокумент.ТипДебитора = "Клиент" ИЛИ структураДокумент.ТипДебитора = "ОрганизацияКлиент" Тогда
			ТипДебитора = "Клиент"; 
		ИначеЕсли структураДокумент.ТипДебитора = "Поставщик" ИЛИ структураДокумент.ТипДебитора = "ОрганизацияПоставщик" Тогда  
			ТипДебитора = "Поставщик"; 
		КонецЕсли;    
		
		ТипКредитора = "";
		Если структураДокумент.ТипКредитора = "Клиент" ИЛИ структураДокумент.ТипКредитора = "ОрганизацияКлиент" Тогда
			ТипКредитора = "Клиент"; 
		ИначеЕсли структураДокумент.ТипКредитора = "Поставщик" ИЛИ структураДокумент.ТипКредитора = "ОрганизацияПоставщик" Тогда  
			ТипКредитора = "Поставщик"; 
		КонецЕсли;   
		
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.Прочее;  
		
		Если УИДЗаполнен(структураДокумент.Подразделение) Тогда
			Подразделение = НайтиОбъектПоИдентификаторуНов(структураДокумент.Подразделение, Тип("СправочникСсылка.ПодразделенияОрганизаций"), Новый Структура("Владелец", ДокументОбъект.Организация)); 
			Если Подразделение <> Неопределено Тогда
				ДокументОбъект.ПодразделениеОрганизации = Подразделение;	
			Иначе
				СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураДокумент.УИД, структураДокумент.Подразделение, "Подразделение", XmlТипЗнч(ДокументОбъект.ПодразделениеОрганизации).ИмяТипа);
				ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);
			КонецЕсли;
		Иначе
			ДокументОбъект.ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		КонецЕсли; 
		
		//Табличные части  
		
		//ТЧ: ДебиторскаяЗадолженность
		Для Каждого структураСтрока Из структураДокумент.ДебиторскаяЗадолженность Цикл	
			НоваяСтрока = ДокументОбъект.ДебиторскаяЗадолженность.Добавить();   
			
			ПараметрыДоговора = Новый Структура;
			ПараметрыДоговора.Вставить("ВидДоговора", ?(ТипКредитора = "Клиент", "СПокупателем", "СПоставщиком")); 
			ПараметрыДоговора.Вставить("Валюта", ДокументОбъект.ВалютаДокумента);  
			НоваяСтрока.ДоговорКонтрагента = НайтиСоздатьОсновнойДоговорКонтрагента(ДокументОбъект.Организация, ДокументОбъект.КонтрагентДебитор, ПараметрыДоговора);
			
			НоваяСтрока.Сумма = структураСтрока.СуммаВзаиморасчетов;
			НоваяСтрока.СуммаВзаиморасчетов = структураСтрока.СуммаВзаиморасчетов;
			НоваяСтрока.КурсВзаиморасчетов = 1;	
			НоваяСтрока.КратностьВзаиморасчетов = 1;	
			
			Если ТипДебитора = ТипКредитора Тогда   
				ЗаполнитьРеквизитПоДаннымERP(НоваяСтрока, "СчетУчетаРасчетов", структураСтрока, "СчетУчетаАвансов", , ЗапрашиваемыеОбъекты);
			Иначе //если взаимозачет поставщик <-> покупатель тогда всегда 01 счет
				ЗаполнитьРеквизитПоДаннымERP(НоваяСтрока, "СчетУчетаРасчетов", структураСтрока, "СчетУчетаРасчетов", , ЗапрашиваемыеОбъекты);
			КонецЕсли;
			
		КонецЦикла;	    
		//
		//ТЧ: КредиторскаяЗадолженность
		Для Каждого структураСтрока Из структураДокумент.КредиторскаяЗадолженность Цикл	
			ПараметрыДоговора = Новый Структура;
			ПараметрыДоговора.Вставить("ВидДоговора", ?(ТипКредитора = "Клиент", "СПокупателем", "СПоставщиком")); 
			ПараметрыДоговора.Вставить("Валюта", ДокументОбъект.ВалютаДокумента);  
			ДоговорКонтрагента = НайтиСоздатьОсновнойДоговорКонтрагента(ДокументОбъект.Организация, ДокументОбъект.КонтрагентКредитор, ПараметрыДоговора); 
			
			//Определим кредиторскую задолженность по 01 подсчету (для 60 и 62 счетов)
			Запрос = Новый Запрос;
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаОстаток
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Остатки(
			|			&Период,
			|			Счет = &Счет,
			|			,
			|			Организация = &Организация
			|				И Субконто1 = &Субконто1
			|				И Субконто2 = &Субконто2) КАК ХозрасчетныйОстатки
			|ГДЕ
			|	ХозрасчетныйОстатки.СуммаОстаток > 0
			|";
			
			Структура = Новый Структура("СчетУчетаРасчетов, СчетУчетаАвансов", ПланыСчетов.Хозрасчетный.ПустаяСсылка(), ПланыСчетов.Хозрасчетный.ПустаяСсылка());
			ЗаполнитьРеквизитПоДаннымERP(Структура, "СчетУчетаРасчетов", структураСтрока, "СчетУчетаРасчетов", , ЗапрашиваемыеОбъекты);
			ЗаполнитьРеквизитПоДаннымERP(Структура, "СчетУчетаАвансов", структураСтрока, "СчетУчетаАвансов", , ЗапрашиваемыеОбъекты);
			
			Запрос.УстановитьПараметр("Период", Новый Граница(ДокументОбъект.Дата, ВидГраницы.Исключая));
			Запрос.УстановитьПараметр("Счет", Структура.СчетУчетаРасчетов);
			Запрос.УстановитьПараметр("Организация", ДокументОбъект.Организация);
			Запрос.УстановитьПараметр("Субконто1", ДокументОбъект.КонтрагентКредитор);
			Запрос.УстановитьПараметр("Субконто2", ДоговорКонтрагента); 
			
			ТаблицаСчетовИСумм = Новый ТаблицаЗначений;
			ТаблицаСчетовИСумм.Колонки.Добавить("СчетУчетаРасчетов", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
			ТаблицаСчетовИСумм.Колонки.Добавить("СуммаВзаиморасчетов", Новый ОписаниеТипов("Число"));
			
			СуммаВзаимозачетаПоКредиту = структураСтрока.СуммаВзаиморасчетов;
			РезультатЗапроса = Запрос.Выполнить(); 
			Если НЕ РезультатЗапроса.Пустой() Тогда   
				
				ВыборкаЗапроса = РезультатЗапроса.Выбрать();	
				Пока ВыборкаЗапроса.Следующий() Цикл  
					НоваяСтрокаСчета = ТаблицаСчетовИСумм.Добавить();
					НоваяСтрокаСчета.СчетУчетаРасчетов = Структура.СчетУчетаРасчетов; 
					Если СуммаВзаимозачетаПоКредиту <= ВыборкаЗапроса.СуммаОстаток Тогда
						НоваяСтрокаСчета.СуммаВзаиморасчетов = СуммаВзаимозачетаПоКредиту;
						СуммаВзаимозачетаПоКредиту = 0;
					Иначе
						НоваяСтрокаСчета.СуммаВзаиморасчетов = ВыборкаЗапроса.СуммаОстаток;
						СуммаВзаимозачетаПоКредиту = СуммаВзаимозачетаПоКредиту - ВыборкаЗапроса.СуммаОстаток; 
					КонецЕсли;
				КонецЦикла; 
				
				//если суммы оказалось недостаточно или не оказалось вовсе - берем 02 подсчет (авансы)
				Если СуммаВзаимозачетаПоКредиту > 0 Тогда 
					НоваяСтрокаСчета = ТаблицаСчетовИСумм.Добавить();
					НоваяСтрокаСчета.СчетУчетаРасчетов = Структура.СчетУчетаАвансов; 
					НоваяСтрокаСчета.СуммаВзаиморасчетов = СуммаВзаимозачетаПоКредиту; 
				КонецЕсли;
			Иначе   
				НоваяСтрокаСчета = ТаблицаСчетовИСумм.Добавить();
				НоваяСтрокаСчета.СчетУчетаРасчетов = Структура.СчетУчетаАвансов; 
				НоваяСтрокаСчета.СуммаВзаиморасчетов = СуммаВзаимозачетаПоКредиту; 
			КонецЕсли;  
			
			Для каждого СтрКЗ из ТаблицаСчетовИСумм Цикл
				НоваяСтрока = ДокументОбъект.КредиторскаяЗадолженность.Добавить();   
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрКЗ, "СчетУчетаРасчетов, СуммаВзаиморасчетов");
				
				НоваяСтрока.ДоговорКонтрагента = ДоговорКонтрагента; 
				НоваяСтрока.Сумма = НоваяСтрока.СуммаВзаиморасчетов;
				НоваяСтрока.КурсВзаиморасчетов = 1;	
				НоваяСтрока.КратностьВзаиморасчетов = 1;	
			КонецЦикла;
			
		КонецЦикла;	
		
	ИначеЕсли ЭтоЗагрузкаИзКорректировкиЗадолженности Тогда
		
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности;
		ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "КонтрагентДебитор", структураДокумент, "Контрагент", , ЗапрашиваемыеОбъекты); 
		
		//Табличные части   
		ЭтоСписаниеКредиторскойЗадолженности = структураДокумент.ХозяйственнаяОперация = "СписаниеКредиторскойЗадолженности";
		
		//ТЧ: Тип определяется по условию
		Для Каждого структураСтрока Из структураДокумент.Задолженность Цикл 
			ЭтоРасчетСПоставщиком = структураСтрока.ТипРасчетов = "РасчетыСПоставщиком";  
			
			ПараметрыДоговора = Новый Структура;
			ПараметрыДоговора.Вставить("ВидДоговора", ?(ЭтоРасчетСПоставщиком, "СПоставщиком", "СПокупателем")); 
			ПараметрыДоговора.Вставить("Валюта", ДокументОбъект.ВалютаДокумента);  
			ДоговорКонтрагента = НайтиСоздатьОсновнойДоговорКонтрагента(ДокументОбъект.Организация, ДокументОбъект.КонтрагентДебитор, ПараметрыДоговора);
			
			//Определим задолженность по 01 подсчету (для 60 и 62 счетов)
			Запрос = Новый Запрос;
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаОстаток
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Остатки(
			|			&Период,
			|			Счет = &Счет,
			|			,
			|			Организация = &Организация
			|				И Субконто1 = &Субконто1
			|				И Субконто2 = &Субконто2) КАК ХозрасчетныйОстатки
			|ГДЕ
			|	ХозрасчетныйОстатки.СуммаОстаток > 0
			|";
			
			Структура = Новый Структура("СчетУчетаРасчетов, СчетУчетаАвансов", ПланыСчетов.Хозрасчетный.ПустаяСсылка(), ПланыСчетов.Хозрасчетный.ПустаяСсылка());
			ЗаполнитьРеквизитПоДаннымERP(Структура, "СчетУчетаРасчетов", структураСтрока, "СчетУчетаРасчетов", , ЗапрашиваемыеОбъекты);
			ЗаполнитьРеквизитПоДаннымERP(Структура, "СчетУчетаАвансов", структураСтрока, "СчетУчетаАвансов", , ЗапрашиваемыеОбъекты);
			
			Запрос.УстановитьПараметр("Период", Новый Граница(ДокументОбъект.Дата, ВидГраницы.Исключая));
			Запрос.УстановитьПараметр("Счет", Структура.СчетУчетаРасчетов);
			Запрос.УстановитьПараметр("Организация", ДокументОбъект.Организация);
			Запрос.УстановитьПараметр("Субконто1", ДокументОбъект.КонтрагентДебитор);
			Запрос.УстановитьПараметр("Субконто2", ДоговорКонтрагента); 
			
			ТаблицаСчетовИСумм = Новый ТаблицаЗначений;
			ТаблицаСчетовИСумм.Колонки.Добавить("СчетУчетаРасчетов", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
			ТаблицаСчетовИСумм.Колонки.Добавить("СуммаВзаиморасчетов", Новый ОписаниеТипов("Число"));
			
			СуммаВзаимозачетаПоКредиту = структураСтрока.Сумма;
			РезультатЗапроса = Запрос.Выполнить(); 
			Если НЕ РезультатЗапроса.Пустой() Тогда   
				
				ВыборкаЗапроса = РезультатЗапроса.Выбрать();	
				Пока ВыборкаЗапроса.Следующий() Цикл  
					НоваяСтрокаСчета = ТаблицаСчетовИСумм.Добавить();
					НоваяСтрокаСчета.СчетУчетаРасчетов = Структура.СчетУчетаРасчетов; 
					Если СуммаВзаимозачетаПоКредиту <= ВыборкаЗапроса.СуммаОстаток Тогда
						НоваяСтрокаСчета.СуммаВзаиморасчетов = СуммаВзаимозачетаПоКредиту;
						СуммаВзаимозачетаПоКредиту = 0;
					Иначе
						НоваяСтрокаСчета.СуммаВзаиморасчетов = ВыборкаЗапроса.СуммаОстаток;
						СуммаВзаимозачетаПоКредиту = СуммаВзаимозачетаПоКредиту - ВыборкаЗапроса.СуммаОстаток; 
					КонецЕсли;    
				КонецЦикла; 
				
				//если суммы оказалось недостаточно или не оказалось вовсе - берем 02 подсчет (авансы)
				Если СуммаВзаимозачетаПоКредиту > 0 Тогда 
					НоваяСтрокаСчета = ТаблицаСчетовИСумм.Добавить();
					НоваяСтрокаСчета.СчетУчетаРасчетов = Структура.СчетУчетаАвансов; 
					НоваяСтрокаСчета.СуммаВзаиморасчетов = СуммаВзаимозачетаПоКредиту; 
				КонецЕсли;
			Иначе   
				НоваяСтрокаСчета = ТаблицаСчетовИСумм.Добавить();
				НоваяСтрокаСчета.СчетУчетаРасчетов = Структура.СчетУчетаАвансов; 
				НоваяСтрокаСчета.СуммаВзаиморасчетов = СуммаВзаимозачетаПоКредиту; 
			КонецЕсли;  
			
			Для каждого Стр из ТаблицаСчетовИСумм Цикл
				Если ЭтоСписаниеКредиторскойЗадолженности Тогда 
					ДокументОбъект.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.ЗадолженностьПоставщику;
					НоваяСтрока = ДокументОбъект.КредиторскаяЗадолженность.Добавить();  
				Иначе
					ДокументОбъект.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.ЗадолженностьПокупателя; 
					НоваяСтрока = ДокументОбъект.ДебиторскаяЗадолженность.Добавить(); 
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр, "СчетУчетаРасчетов, СуммаВзаиморасчетов");
				НоваяСтрока.ДоговорКонтрагента = ДоговорКонтрагента;
				НоваяСтрока.Сумма = НоваяСтрока.СуммаВзаиморасчетов;
				НоваяСтрока.КурсВзаиморасчетов = 1;	
				НоваяСтрока.КратностьВзаиморасчетов = 1;	
			КонецЦикла;	
		КонецЦикла;	
		
		ТипСчета = ?(ЭтоСписаниеКредиторскойЗадолженности, "Кт", "Дт");
		ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "Счет" + ТипСчета, структураДокумент, "СчетУчетаРасчетов", , ЗапрашиваемыеОбъекты);
		Если ДокументОбъект["Счет" + ТипСчета] = ПланыСчетов.Хозрасчетный.ПрочиеДоходы ИЛИ ДокументОбъект["Счет" + ТипСчета] = ПланыСчетов.Хозрасчетный.ПрочиеРасходы Тогда
			ДокументОбъект["Субконто" + ТипСчета + "1"] = Справочники.ПрочиеДоходыИРасходы.ПрочиеВнереализационныеДоходыРасходы;
		КонецЕсли;
		
		Если структураДокумент.Свойство("Субконто1") Тогда  
			ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "Субконто" + ТипСчета + "1", структураСтрока, "Субконто" + ТипСчета + "1", , ЗапрашиваемыеОбъекты);  //Контрагент
			ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "Субконто" + ТипСчета + "2", структураСтрока, "Субконто" + ТипСчета + "2", , ЗапрашиваемыеОбъекты);  //Договор, если есть
		КонецЕсли;
		
	КонецЕсли;
	//
	Если ЗапрашиваемыеОбъекты.Количество() > 0 Тогда
		Возврат;
	Иначе
		ЗаписатьДокумент(ДокументОбъект, структураДокумент, ОписаниеОшибок);
	КонецЕсли;   			
	
КонецПроцедуры

Процедура ЗагрузитьВозвратТоваровПоставщику(структураДокумент, ОписаниеОшибок, ЗапрашиваемыеОбъекты) 
	
	ДокументОбъект = НайтиСоздатьОбъектДокумента(структураДокумент.УИД, "ВозвратТоваровПоставщику");
	
	ЗаполнитьЗначенияСвойств(ДокументОбъект, структураДокумент,
		"Номер,
		|Дата,
		|Комментарий");       
	
	ДокументОбъект.ПометкаУдаления = структураДокумент.ПометкаУдаления; 
	ДокументОбъект.КурсВзаиморасчетов = 1;
	ДокументОбъект.КратностьВзаиморасчетов = 1;
	ДокументОбъект.СуммаВключаетНДС = структураДокумент.ЦенаВключаетНДС;
	ДокументОбъект.СуммаДокумента = структураДокумент.СуммаДокумента;
			
	ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия;
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "Организация", структураДокумент, "Организация", Тип("СправочникСсылка.Организации"), ЗапрашиваемыеОбъекты);
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "Склад", структураДокумент, "Склад", Тип("СправочникСсылка.Склады"), ЗапрашиваемыеОбъекты);  
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "Сделка", структураДокумент, "ДокументПоступления", , ЗапрашиваемыеОбъекты, Документы.ПоступлениеТоваровУслуг.ПустаяСсылка());
		
	Если УИДЗаполнен(структураДокумент.Подразделение) Тогда
		Подразделение = НайтиОбъектПоИдентификаторуНов(структураДокумент.Подразделение, Тип("СправочникСсылка.ПодразделенияОрганизаций"), Новый Структура("Владелец", ДокументОбъект.Организация)); 
		Если Подразделение <> Неопределено Тогда
			ДокументОбъект.ПодразделениеОрганизации = Подразделение;	
		Иначе
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураДокумент.УИД, структураДокумент.Подразделение, "Подразделение", XmlТипЗнч(ДокументОбъект.ПодразделениеОрганизации).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);
		КонецЕсли;
	Иначе
		ДокументОбъект.ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	КонецЕсли;	
		
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "Контрагент", структураДокумент, "Контрагент", Тип("СправочникСсылка.Контрагенты"), ЗапрашиваемыеОбъекты);
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "ВалютаДокумента", структураДокумент, "Валюта", , ЗапрашиваемыеОбъекты);
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "СчетУчетаРасчетовСКонтрагентом", структураДокумент, "СчетУчетаРасчетов", , ЗапрашиваемыеОбъекты);
	
	//Договор контрагента	
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "ДоговорКонтрагента", структураДокумент, "Договор", , ЗапрашиваемыеОбъекты);
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ДоговорКонтрагента) Тогда
		ПараметрыДоговора = Новый Структура;
		ПараметрыДоговора.Вставить("ВидДоговора", "СПоставщиком"); 
		ПараметрыДоговора.Вставить("Валюта", ДокументОбъект.ВалютаДокумента);  

		ДокументОбъект.ДоговорКонтрагента = НайтиСоздатьОсновнойДоговорКонтрагента(ДокументОбъект.Организация, ДокументОбъект.Контрагент, ПараметрыДоговора);
	КонецЕсли;
	
	ДокументОбъект.Товары.Очистить();
		
	//Табличная часть:  Товары
	Для Каждого структураСтрокаТовар Из структураДокумент.Товары Цикл
		новСтрТовар = ДокументОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(новСтрТовар,структураСтрокаТовар,
			"Количество,
			|Цена,
			|Сумма,
			|СуммаНДС");
		
		новСтрТовар.СтавкаНДС = Перечисления.СтавкиНДС[структураСтрокаТовар.СтавкаНДС];
		
		ЗаполнитьРеквизитПоДаннымERP(новСтрТовар, "Номенклатура", структураСтрокаТовар, "Номенклатура", , ЗапрашиваемыеОбъекты);
	КонецЦикла;
	
	Если ЗапрашиваемыеОбъекты.Количество() > 0 Тогда
		Возврат;	
	КонецЕсли;  
	
	Если ЗапрашиваемыеОбъекты.Количество() > 0 Тогда
		Возврат;
	Иначе
		ДокументОбъект.ДополнительныеСвойства.Вставить("ЗаполнитьСчетаУчетаПередЗаписью", Истина);
		ЗаписатьДокумент(ДокументОбъект, структураДокумент, ОписаниеОшибок);
	КонецЕсли;   
		
КонецПроцедуры 

Процедура ЗагрузитьОприходованиеТоваров(структураДокумент, ОписаниеОшибок, ЗапрашиваемыеОбъекты)
	ТипДокумента = "ОприходованиеТоваров";
	
	ДокументОбъект = НайтиСоздатьОбъектДокумента(структураДокумент.УИД, ТипДокумента);   
	
	//Очистим значения перед загрузкой
	ДокументОбъект.Товары.Очистить(); 
	ЗаполнитьЗначенияСвойств(ДокументОбъект, Документы[ТипДокумента].ПустаяСсылка(), "
		|Организация, 
		|ПодразделениеОрганизации,
		|Склад,
		|СтатьяПрочихДоходовРасходов");
	
	ДокументОбъект.ПометкаУдаления = структураДокумент.ПометкаУдаления;

	ЗаполнитьЗначенияСвойств(ДокументОбъект, структураДокумент,	"
		|Номер, 
		|Дата, 
		|Комментарий");  
	
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "Организация", структураДокумент, "Организация", Тип("СправочникСсылка.Организации"), ЗапрашиваемыеОбъекты);

	Если УИДЗаполнен(структураДокумент.Подразделение) Тогда
		Подразделение = НайтиОбъектПоИдентификаторуНов(структураДокумент.Подразделение, Тип("СправочникСсылка.ПодразделенияОрганизаций"), Новый Структура("Владелец", ДокументОбъект.Организация)); 
		Если Подразделение <> Неопределено Тогда
			ДокументОбъект.ПодразделениеОрганизации = Подразделение;	
		Иначе
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураДокумент.УИД, структураДокумент.Подразделение, "Подразделение", XmlТипЗнч(ДокументОбъект.ПодразделениеОрганизации).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);
		КонецЕсли;
	Иначе
		ДокументОбъект.ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	КонецЕсли;  
	
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "Склад", структураДокумент, "Склад", , ЗапрашиваемыеОбъекты);
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "СтатьяПрочихДоходовРасходов", структураДокумент, "СтатьяДоходов", , ЗапрашиваемыеОбъекты);
	
	Для Каждого структураСтрока Из структураДокумент.Товары Цикл	
		НоваяСтрока = ДокументОбъект.Товары.Добавить();   
		
		ЗаполнитьРеквизитПоДаннымERP(НоваяСтрока, "Номенклатура", структураСтрока, "Номенклатура", , ЗапрашиваемыеОбъекты);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, структураСтрока, "
			|Количество, 
			|Сумма,
			|Цена");    
		
		Если структураСтрока.Свойство("СчетУчета") Тогда
			ЗаполнитьРеквизитПоДаннымERP(НоваяСтрока, "СчетУчета", структураСтрока, "СчетУчета", , ЗапрашиваемыеОбъекты); 
		КонецЕсли;
		ЗаполнитьНомерГТД(НоваяСтрока, структураСтрока.НомерГТД, ЗапрашиваемыеОбъекты, структураДокумент.УИД);
	КонецЦикла;	
		
	Если ЗапрашиваемыеОбъекты.Количество() > 0 Тогда
		Возврат;
	Иначе
		ДокументОбъект.ДополнительныеСвойства.Вставить("ЗаполнитьСчетаУчетаПередЗаписью", Истина);
		ЗаписатьДокумент(ДокументОбъект, структураДокумент, ОписаниеОшибок);
	КонецЕсли;   
	
КонецПроцедуры	

Процедура ЗагрузитьОплатуПлатежнойКартой(структураДокумент, ОписаниеОшибок, ЗапрашиваемыеОбъекты) 
	
	ДокументОбъект = НайтиСоздатьОбъектДокумента(структураДокумент.УИД, "ОплатаПлатежнойКартой");   
	
	ДокументОбъект.РасшифровкаПлатежа.Очистить();
	ДокументОбъект.ПометкаУдаления = структураДокумент.ПометкаУдаления;

	ЗаполнитьЗначенияСвойств(ДокументОбъект, структураДокумент,	"
		|Номер, 
		|Дата,
		|СуммаДокумента, 
		|Комментарий");  

	Если структураДокумент.ХозяйственнаяОперация = "ПоступлениеОплатыОтКлиента" Тогда
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийОплатаПлатежнойКартой.ОплатаПокупателя;
	ИначеЕсли структураДокумент.ХозяйственнаяОперация = "ВозвратОплатыКлиенту" Тогда
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийОплатаПлатежнойКартой.ВозвратПокупателю; 
	Иначе  
		ОписаниеОшибок.errorCodeObj = "608";
		ОписаниеОшибок.errorObj = структураДокумент.УИД;
		ОписаниеОшибок.errorDescriptionObj = "Неизвестный вид операции ПКО " + структураДокумент.Представление;
		Возврат; 
	КонецЕсли;
	
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "Организация", структураДокумент, "Организация", Тип("СправочникСсылка.Организации"), ЗапрашиваемыеОбъекты);
	
	Если УИДЗаполнен(структураДокумент.Подразделение) Тогда
		Подразделение = НайтиОбъектПоИдентификаторуНов(структураДокумент.Подразделение, Тип("СправочникСсылка.ПодразделенияОрганизаций"), Новый Структура("Владелец", ДокументОбъект.Организация)); 
		Если Подразделение <> Неопределено Тогда
			ДокументОбъект.ПодразделениеОрганизации = Подразделение;	
		Иначе
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураДокумент.УИД, структураДокумент.Подразделение, "Подразделение", XmlТипЗнч(ДокументОбъект.ПодразделениеОрганизации).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);
		КонецЕсли;
	Иначе
		ДокументОбъект.ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	КонецЕсли;
	
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "Контрагент", структураДокумент, "Контрагент", Тип("СправочникСсылка.Контрагенты"), ЗапрашиваемыеОбъекты, Справочники.Контрагенты.ПустаяСсылка());
		
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "ВалютаДокумента", структураДокумент, "Валюта", , ЗапрашиваемыеОбъекты);

	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "ДоговорКонтрагента", структураДокумент, "Договор", , ЗапрашиваемыеОбъекты);
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ДоговорКонтрагента) Тогда
		ПараметрыДоговора = Новый Структура;
		ПараметрыДоговора.Вставить("ВидДоговора", "СПокупателем"); 
		ПараметрыДоговора.Вставить("Валюта", ДокументОбъект.ВалютаДокумента);  
		
		ДокументОбъект.ДоговорКонтрагента = НайтиСоздатьОсновнойДоговорКонтрагента(ДокументОбъект.Организация, ДокументОбъект.Контрагент, ПараметрыДоговора);
	КонецЕсли;
	
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "ДоговорЭквайринга", структураДокумент, "ДоговорЭквайринга", Тип("СправочникСсылка.ДоговорыКонтрагентов"), ЗапрашиваемыеОбъекты);

	ДокументОбъект.ВидОплаты = НайтиСоздатьВидОплаты(ДокументОбъект.ДоговорЭквайринга);   
	ДокументОбъект.СчетКасса = ПланыСчетов.Хозрасчетный.ПродажиПоПлатежнымКартам;
		
	Для Каждого структураСтрока Из структураДокумент.РасшифровкаПлатежа Цикл	
		
		НоваяСтрока = ДокументОбъект.РасшифровкаПлатежа.Добавить();
		НоваяСтрока.ДоговорКонтрагента = ДокументОбъект.ДоговорКонтрагента;  
								
		Если ЗначениеЗаполнено(НоваяСтрока.Сделка) Тогда
			НоваяСтрока.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.ПоДокументу;
		Иначе
			НоваяСтрока.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
		КонецЕсли;	
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, структураСтрока, "
			|СуммаПлатежа, 
			|СуммаВзаиморасчетов, 
			|СуммаНДС, 
			|КурсВзаиморасчетов, 
			|КратностьВзаиморасчетов");
		
		Если ЗначениеЗаполнено(структураСтрока.СтавкаНДС) Тогда
			НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС[структураСтрока.СтавкаНДС];
		Иначе
			НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		КонецЕсли;	      
				
	КонецЦикла;	
		
	Если ЗапрашиваемыеОбъекты.Количество() > 0 Тогда
		Возврат;
	Иначе
		ДокументОбъект.ДополнительныеСвойства.Вставить("ЗаполнитьСчетаУчетаПередЗаписью", Истина);
		ЗаписатьДокумент(ДокументОбъект, структураДокумент, ОписаниеОшибок);
	КонецЕсли;   
	
КонецПроцедуры	

Процедура ЗагрузитьПриходныйКассовыйОрдер(структураДокумент, ОписаниеОшибок, ЗапрашиваемыеОбъекты) 
	
	ДокументОбъект = НайтиСоздатьОбъектДокумента(структураДокумент.УИД, "ПриходныйКассовыйОрдер");   
	
	ДокументОбъект.РасшифровкаПлатежа.Очистить();
	ДокументОбъект.ПометкаУдаления = структураДокумент.ПометкаУдаления;

	ЗаполнитьЗначенияСвойств(ДокументОбъект, структураДокумент,	"
		|Номер, 
		|Дата,
		|СуммаДокумента, 
		|Комментарий");   
	
	ВидДоговора = "Прочее";
	
	Если структураДокумент.ХозяйственнаяОперация = "ПоступлениеДенежныхСредствИзДругойКассы"
		ИЛИ структураДокумент.ХозяйственнаяОперация = "ПоступлениеДенежныхСредствИзКассыККМ" 
		ИЛИ структураДокумент.ХозяйственнаяОперация = "ПрочееПоступлениеДенежныхСредств" Тогда 
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПКО.ПрочийПриход;		
	ИначеЕсли структураДокумент.ХозяйственнаяОперация = "ПоступлениеОплатыОтКлиента" Тогда
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя;
		ВидДоговора = "СПокупателем"; 
	ИначеЕсли структураДокумент.ХозяйственнаяОперация = "ВозвратДенежныхСредствОтПоставщика" Тогда
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПоставщика; 
		ВидДоговора = "СПоставщиком"; 
	ИначеЕсли структураДокумент.ХозяйственнаяОперация = "ВозвратДенежныхСредствОтПодотчетника" Тогда
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПодотчетногоЛица;
	Иначе  
		ОписаниеОшибок.errorCodeObj = "608";
		ОписаниеОшибок.errorObj = структураДокумент.УИД;
		ОписаниеОшибок.errorDescriptionObj = "Неизвестный вид операции ПКО " + структураДокумент.Представление;
		Возврат; 
	КонецЕсли; 
		
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "Организация", структураДокумент, "Организация", Тип("СправочникСсылка.Организации"), ЗапрашиваемыеОбъекты);
	
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "Контрагент", структураДокумент, "Контрагент", Тип("СправочникСсылка.Контрагенты"), ЗапрашиваемыеОбъекты, Справочники.Контрагенты.ПустаяСсылка());
		
	Если УИДЗаполнен(структураДокумент.Подразделение) Тогда
		Подразделение = НайтиОбъектПоИдентификаторуНов(структураДокумент.Подразделение, Тип("СправочникСсылка.ПодразделенияОрганизаций"), Новый Структура("Владелец", ДокументОбъект.Организация)); 
		Если Подразделение <> Неопределено Тогда
			ДокументОбъект.ПодразделениеОрганизации = Подразделение;	
		Иначе
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураДокумент.УИД, структураДокумент.Подразделение, "Подразделение", XmlТипЗнч(ДокументОбъект.ПодразделениеОрганизации).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);
		КонецЕсли;
	Иначе
		ДокументОбъект.ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	КонецЕсли;    
	
	//кредиты и займы...
	Если структураДокумент.Свойство("СчетУчетаРасчетовСКонтрагентом") Тогда  
		ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "СчетУчетаРасчетовСКонтрагентом", структураДокумент, "СчетУчетаРасчетовСКонтрагентом", , ЗапрашиваемыеОбъекты);  
		
		Если структураДокумент.Свойство("КонтрагентНастройки") Тогда 
			ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "СубконтоКт1", структураДокумент, "КонтрагентНастройки", Тип("СправочникСсылка.Контрагенты"), ЗапрашиваемыеОбъекты, Справочники.Контрагенты.ПустаяСсылка());
		ИначеЕсли структураДокумент.Свойство("ФизЛицоНастройки") Тогда 
			ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "СубконтоКт1", структураДокумент, "ФизЛицоНастройки", Тип("СправочникСсылка.ФизическиеЛица"), ЗапрашиваемыеОбъекты, Справочники.ФизическиеЛица.ПустаяСсылка());
		КонецЕсли;
		
		ДокументОбъект.ПодразделениеКт = ДокументОбъект.ПодразделениеОрганизации;	
	КонецЕсли;
	
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "ВалютаДокумента", структураДокумент, "Валюта", , ЗапрашиваемыеОбъекты);

	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "ДоговорКонтрагента", структураДокумент, "ДоговорНастройки", , ЗапрашиваемыеОбъекты);
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ДоговорКонтрагента) Тогда
		ПараметрыДоговора = Новый Структура;
		ПараметрыДоговора.Вставить("ВидДоговора", ВидДоговора); 
		ПараметрыДоговора.Вставить("Валюта", ДокументОбъект.ВалютаДокумента);  
		
		ДокументОбъект.ДоговорКонтрагента = НайтиСоздатьОсновнойДоговорКонтрагента(ДокументОбъект.Организация, ДокументОбъект.Контрагент, ПараметрыДоговора);
	КонецЕсли;
	
	//ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "СтатьяДвиженияДенежныхСредств", структураДокумент, "СтатьяДвиженияДенежныхСредств", , ЗапрашиваемыеОбъекты);
			
	Для Каждого структураСтрока Из структураДокумент.РасшифровкаПлатежа Цикл	
		
		НоваяСтрока = ДокументОбъект.РасшифровкаПлатежа.Добавить();
		//НоваяСтрока.ДоговорКонтрагента = ДокументОбъект.ДоговорКонтрагента;  
		ЗаполнитьРеквизитПоДаннымERP(НоваяСтрока, "ДоговорКонтрагента", структураСтрока, "ДоговорКонтрагента", , ЗапрашиваемыеОбъекты);
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.ДоговорКонтрагента) Тогда
			ПараметрыДоговора = Новый Структура;
			ПараметрыДоговора.Вставить("ВидДоговора", ВидДоговора); 
			ПараметрыДоговора.Вставить("Валюта", ДокументОбъект.ВалютаДокумента);  
			
			НоваяСтрока.ДоговорКонтрагента = НайтиСоздатьОсновнойДоговорКонтрагента(ДокументОбъект.Организация, ДокументОбъект.Контрагент, ПараметрыДоговора);
		КонецЕсли;
								
		Если ЗначениеЗаполнено(НоваяСтрока.Сделка) Тогда
			НоваяСтрока.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.ПоДокументу;
		Иначе
			НоваяСтрока.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
		КонецЕсли;	  
		
		ЗаполнитьРеквизитПоДаннымERP(НоваяСтрока, "СтатьяДвиженияДенежныхСредств", структураСтрока, "СтатьяДвиженияДенежныхСредств", , ЗапрашиваемыеОбъекты);
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, структураСтрока, "
			|СуммаПлатежа, 
			|СуммаВзаиморасчетов, 
			|СуммаНДС, 
			|КурсВзаиморасчетов, 
			|КратностьВзаиморасчетов");
		
		Если ЗначениеЗаполнено(структураСтрока.СтавкаНДС) Тогда
			НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС[структураСтрока.СтавкаНДС];
		Иначе
			НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		КонецЕсли;	
				
	КонецЦикла;	
		
	Если ЗапрашиваемыеОбъекты.Количество() > 0 Тогда
		Возврат;
	Иначе
		ДокументОбъект.ДополнительныеСвойства.Вставить("ЗаполнитьСчетаУчетаПередЗаписью", Истина);
		ЗаписатьДокумент(ДокументОбъект, структураДокумент, ОписаниеОшибок);
	КонецЕсли;   
	
КонецПроцедуры	

Процедура ЗагрузитьПоступлениеНаРасчетныйСчет(структураДокумент, ОписаниеОшибок, ЗапрашиваемыеОбъекты) 
	
	ДокументОбъект = НайтиСоздатьОбъектДокумента(структураДокумент.УИД, "ПоступлениеНаРасчетныйСчет");   
	
	ДокументОбъект.РасшифровкаПлатежа.Очистить();
	ДокументОбъект.ПометкаУдаления = структураДокумент.ПометкаУдаления;

	ЗаполнитьЗначенияСвойств(ДокументОбъект, структураДокумент,	"
		|Номер, 
		|НомерВходящегоДокумента,
		|Дата, 
		|ДатаВходящегоДокумента,
		|СуммаДокумента, 
		|Комментарий");  
	
	ДокументОбъект.СуммаУслуг = структураДокумент.СуммаКомиссии;   
	
	ВидДоговора = "Прочее";
	
	ХозяйственнаяОперация = структураДокумент.ХозяйственнаяОперация;
	Если ХозяйственнаяОперация = "ПоступлениеОплатыОтКлиента" 
		ИЛИ ХозяйственнаяОперация = "ПоступлениеДенежныхСредствИзДругойОрганизации" Тогда 
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя;   
		ВидДоговора = "СПокупателем";
	//если статья ДДС поступление залога, то счёт 76.09, иначе счета 62.01 и 62.02
	ИначеЕсли ХозяйственнаяОперация = "ВозвратДенежныхСредствОтПоставщика"
		ИЛИ ХозяйственнаяОперация = "ВозвратДенежныхСредствОтДругойОрганизации" Тогда
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика;
		ВидДоговора = "СПоставщиком";
	ИначеЕсли ХозяйственнаяОперация = "ПоступлениеОплатыПоПлатежнойКарте" Тогда
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам;
	ИначеЕсли ХозяйственнаяОперация = "ПоступлениеДенежныхСредствСДругогоСчета" Тогда
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПереводСДругогоСчета;
	ИначеЕсли ХозяйственнаяОперация = "ИнкассацияДенежныхСредствВБанк"
		ИЛИ ХозяйственнаяОперация = "ПоступлениеДенежныхСредствИзКассыНаРасчетныйСчет" Тогда
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация;
	//статья ддс проставляется при формировании движений
	ИначеЕсли ХозяйственнаяОперация = "ПрочееПоступлениеДенежныхСредств" Тогда
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление;		
	Иначе  
		ОписаниеОшибок.errorCodeObj = "608";
		ОписаниеОшибок.errorObj = структураДокумент.УИД;
		ОписаниеОшибок.errorDescriptionObj = "Для операции " + ХозяйственнаяОперация + " не настроена выгрузка поступлений безналичных ДС." + структураДокумент.Представление;
		Возврат;
	КонецЕсли;	
		
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "Контрагент", структураДокумент, "Контрагент", Тип("СправочникСсылка.Контрагенты"), ЗапрашиваемыеОбъекты, Справочники.Контрагенты.ПустаяСсылка());
	
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "Организация", структураДокумент, "Организация", Тип("СправочникСсылка.Организации"), ЗапрашиваемыеОбъекты);

	Если УИДЗаполнен(структураДокумент.Подразделение) Тогда
		Подразделение = НайтиОбъектПоИдентификаторуНов(структураДокумент.Подразделение, Тип("СправочникСсылка.ПодразделенияОрганизаций"), Новый Структура("Владелец", ДокументОбъект.Организация)); 
		Если Подразделение <> Неопределено Тогда
			ДокументОбъект.ПодразделениеОрганизации = Подразделение;	
		Иначе
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураДокумент.УИД, структураДокумент.Подразделение, "Подразделение", XmlТипЗнч(ДокументОбъект.ПодразделениеОрганизации).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);
		КонецЕсли;
	Иначе
		ДокументОбъект.ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	КонецЕсли;            
	
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "ВалютаДокумента", структураДокумент, "Валюта", , ЗапрашиваемыеОбъекты);
	
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "ДоговорКонтрагента", структураДокумент, "Договор", , ЗапрашиваемыеОбъекты);
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ДоговорКонтрагента) Тогда
		ПараметрыДоговора = Новый Структура;
		ПараметрыДоговора.Вставить("ВидДоговора", ВидДоговора); 
		ПараметрыДоговора.Вставить("Валюта", ДокументОбъект.ВалютаДокумента);  
		
		ДокументОбъект.ДоговорКонтрагента = НайтиСоздатьОсновнойДоговорКонтрагента(ДокументОбъект.Организация, ДокументОбъект.Контрагент, ПараметрыДоговора);
	КонецЕсли;

	Если структураДокумент.Свойство("БанковскийСчетОрганизации") Тогда
		ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "СчетОрганизации", структураДокумент, "БанковскийСчетОрганизации", , ЗапрашиваемыеОбъекты); 
	КонецЕсли;
	
	Если ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПереводСДругогоСчета Тогда
		Если структураДокумент.Свойство("БанковскийСчетКонтрагента") Тогда
			ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "СчетКонтрагента", структураДокумент, "БанковскийСчетКонтрагента", , ЗапрашиваемыеОбъекты);  
		КонецЕсли; 
	КонецЕсли;
	
	Если ДокументОбъект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация Тогда
		ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "СтатьяДвиженияДенежныхСредств", структураДокумент, "СтатьяДвиженияДенежныхСредств", , ЗапрашиваемыеОбъекты);
	КонецЕсли;     
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.СтатьяДвиженияДенежныхСредств) Тогда  
		ДокументОбъект.СтатьяДвиженияДенежныхСредств = УчетДенежныхСредствБП.СтатьяДДСПоУмолчанию(ДокументОбъект.ВидОперации);
	КонецЕсли;
	
	//кредиты и займы...
	Если структураДокумент.Свойство("СчетУчетаРасчетовСКонтрагентом") Тогда  
		ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "СчетУчетаРасчетовСКонтрагентом", структураДокумент, "СчетУчетаРасчетовСКонтрагентом", , ЗапрашиваемыеОбъекты);  
		
		Если структураДокумент.Свойство("КонтрагентНастройки") Тогда 
			ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "СубконтоКт1", структураДокумент, "КонтрагентНастройки", Тип("СправочникСсылка.Контрагенты"), ЗапрашиваемыеОбъекты, Справочники.Контрагенты.ПустаяСсылка());
		ИначеЕсли структураДокумент.Свойство("ФизЛицоНастройки") Тогда 
			ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "СубконтоКт1", структураДокумент, "ФизЛицоНастройки", Тип("СправочникСсылка.ФизическиеЛица"), ЗапрашиваемыеОбъекты, Справочники.ФизическиеЛица.ПустаяСсылка());
		КонецЕсли;      
		
		ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "СубконтоКт2", структураДокумент, "ДоговорНастройки", , ЗапрашиваемыеОбъекты, Справочники.ДоговорыКонтрагентов.ПустаяСсылка());		
		ДокументОбъект.ПодразделениеКт = ДокументОбъект.ПодразделениеОрганизации;	
	КонецЕсли; 
	
	//инкассация
	Если структураДокумент.РасшифровкаПлатежа.Количество() = 0 И 
		(ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация 
		ИЛИ ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам) Тогда 
		НоваяСтрока = ДокументОбъект.РасшифровкаПлатежа.Добавить();  
		
		ЗаполнитьРеквизитПоДаннымERP(НоваяСтрока, "СтатьяДвиженияДенежныхСредств", структураДокумент, "СтатьяДвиженияДенежныхСредств", , ЗапрашиваемыеОбъекты);
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.СтатьяДвиженияДенежныхСредств) Тогда  
			НоваяСтрока.СтатьяДвиженияДенежныхСредств = УчетДенежныхСредствБП.СтатьяДДСПоУмолчанию(ДокументОбъект.ВидОперации);
			НоваяСтрока.СубконтоКт1 = НоваяСтрока.СтатьяДвиженияДенежныхСредств;
		КонецЕсли; 
		
		Если ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам Тогда 
			ДокументОбъект.СчетБанк = ПланыСчетов.Хозрасчетный.РасчетныеСчета;  
			НоваяСтрока.ДоговорКонтрагента = ДокументОбъект.ДоговорКонтрагента;  
		КонецЕсли;    
		
		НоваяСтрока.СуммаПлатежа = ДокументОбъект.СуммаДокумента;	
		НоваяСтрока.СуммаВзаиморасчетов = ДокументОбъект.СуммаДокумента;	
		НоваяСтрока.КурсВзаиморасчетов = 1;	
	КонецЕсли;

	Для Каждого структураСтрока Из структураДокумент.РасшифровкаПлатежа Цикл	
		
		НоваяСтрока = ДокументОбъект.РасшифровкаПлатежа.Добавить();
		НоваяСтрока.ДоговорКонтрагента = ДокументОбъект.ДоговорКонтрагента;  
		
		Если ЗначениеЗаполнено(структураСтрока.СтавкаНДС) Тогда
			НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС[структураСтрока.СтавкаНДС];
		Иначе
			НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		КонецЕсли;	      
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, структураСтрока, "
			|СуммаВзаиморасчетов, 
			|СуммаНДС, 
			|КурсВзаиморасчетов, 
			|КратностьВзаиморасчетов");  
		
		НоваяСтрока.СуммаПлатежа = структураСтрока.Сумма;
		
		ЗаполнитьРеквизитПоДаннымERP(НоваяСтрока, "СтатьяДвиженияДенежныхСредств", структураСтрока, "СтатьяДвиженияДенежныхСредств", , ЗапрашиваемыеОбъекты);  
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.СтатьяДвиженияДенежныхСредств) Тогда  
			НоваяСтрока.СтатьяДвиженияДенежныхСредств = УчетДенежныхСредствБП.СтатьяДДСПоУмолчанию(ДокументОбъект.ВидОперации);
		КонецЕсли;
		
		НоваяСтрока.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически; //!! или ПоДокументу
		
		Если УИДЗаполнен(структураСтрока.Подразделение) Тогда
			Подразделение = НайтиОбъектПоИдентификаторуНов(структураСтрока.Подразделение, Тип("СправочникСсылка.ПодразделенияОрганизаций"), Новый Структура("Владелец", ДокументОбъект.Организация)); 
			Если Подразделение <> Неопределено Тогда
				НоваяСтрока.ПодразделениеКт = Подразделение;	
			Иначе
				СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураДокумент.УИД, структураСтрока.Подразделение, "Подразделение", XmlТипЗнч(ДокументОбъект.ПодразделениеОрганизации).ИмяТипа);
				ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);
			КонецЕсли;
		Иначе
			НоваяСтрока.ПодразделениеКт = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		КонецЕсли;   

	КонецЦикла;	
	
	Если ЗапрашиваемыеОбъекты.Количество() > 0 Тогда
		Возврат;
	Иначе
		ДокументОбъект.ДополнительныеСвойства.Вставить("ЗаполнитьСчетаУчетаПередЗаписью", Истина);
		ЗаписатьДокумент(ДокументОбъект, структураДокумент, ОписаниеОшибок);
	КонецЕсли;   
	
КонецПроцедуры	

Процедура ЗагрузитьРасходныйКассовыйОрдер(структураДокумент, ОписаниеОшибок, ЗапрашиваемыеОбъекты)
	
	ДокументОбъект = НайтиСоздатьОбъектДокумента(структураДокумент.УИД, "РасходныйКассовыйОрдер");   
	
	ДокументОбъект.РасшифровкаПлатежа.Очистить();
	ДокументОбъект.ПометкаУдаления = структураДокумент.ПометкаУдаления;

	ЗаполнитьЗначенияСвойств(ДокументОбъект, структураДокумент,	"
		|Номер, 
		|Дата,
		|СуммаДокумента, 
		|Комментарий,
		|Выдать, 
		|Основание, 
		|Приложение, 
		|ПоДокументу");    
	
	ВидДоговора = "Прочее";
		
	Если структураДокумент.ХозяйственнаяОперация = "ОплатаПоставщику" Тогда
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику;
		ВидДоговора = "СПоставщиком";
	ИначеЕсли структураДокумент.ХозяйственнаяОперация = "ВозвратОплатыКлиенту" Тогда
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПокупателю; 
		ВидДоговора = "СПокупателем";
	ИначеЕсли структураДокумент.ХозяйственнаяОперация = "СдачаДенежныхСредствВБанк" Тогда
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк;
	ИначеЕсли структураДокумент.ХозяйственнаяОперация = "ВыплатаЗаработнойПлатыПоВедомостям" Тогда
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗарплатыЧерезКассу;
	ИначеЕсли структураДокумент.ХозяйственнаяОперация = "ИнкассацияДенежныхСредствВБанк" Тогда
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийРКО.Инкассация;
	ИначеЕсли структураДокумент.ХозяйственнаяОперация = "ВыдачаДенежныхСредствПодотчетнику" Тогда
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаПодотчетномуЛицу;
	ИначеЕсли структураДокумент.ХозяйственнаяОперация = "ПрочаяВыдачаДенежныхСредств"
		ИЛИ структураДокумент.ХозяйственнаяОперация = "ВыдачаДенежныхСредствВДругуюКассу" 
		ИЛИ структураДокумент.ХозяйственнаяОперация = "ВыдачаДенежныхСредствВКассуККМ" Тогда
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийРКО.ПрочийРасход;
	Иначе  
		ОписаниеОшибок.errorCodeObj = "608";
		ОписаниеОшибок.errorObj = структураДокумент.УИД;
		ОписаниеОшибок.errorDescriptionObj = "Неизвестный вид операции ПКО " + структураДокумент.Представление;
		Возврат; 
	КонецЕсли;   
	
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "Организация", структураДокумент, "Организация", Тип("СправочникСсылка.Организации"), ЗапрашиваемыеОбъекты);
	
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "Контрагент", структураДокумент, "Контрагент", Тип("СправочникСсылка.Контрагенты"), ЗапрашиваемыеОбъекты, Справочники.Контрагенты.ПустаяСсылка());
	Если УИДЗаполнен(структураДокумент.ПодотчетноеЛицо) Тогда
		ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "Контрагент", структураДокумент, "ПодотчетноеЛицо", Тип("СправочникСсылка.ФизическиеЛица"), ЗапрашиваемыеОбъекты, Справочники.ФизическиеЛица.ПустаяСсылка());
	КонецЕсли;

	Если УИДЗаполнен(структураДокумент.Подразделение) Тогда
		Подразделение = НайтиОбъектПоИдентификаторуНов(структураДокумент.Подразделение, Тип("СправочникСсылка.ПодразделенияОрганизаций"), Новый Структура("Владелец", ДокументОбъект.Организация)); 
		Если Подразделение <> Неопределено Тогда
			ДокументОбъект.ПодразделениеОрганизации = Подразделение;	
		Иначе
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураДокумент.УИД, структураДокумент.Подразделение, "Подразделение", XmlТипЗнч(ДокументОбъект.ПодразделениеОрганизации).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);
		КонецЕсли;
	Иначе
		ДокументОбъект.ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	КонецЕсли;
	
	Если структураДокумент.Свойство("БанковскийСчетОрганизации") Тогда
		ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "СчетОрганизации", структураДокумент, "БанковскийСчетОрганизации", , ЗапрашиваемыеОбъекты); 
	КонецЕсли;
	
	Если структураДокумент.Свойство("СчетУчетаРасчетовСКонтрагентом") Тогда  
		ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "СчетУчетаРасчетовСКонтрагентом", структураДокумент, "СчетУчетаРасчетовСКонтрагентом", , ЗапрашиваемыеОбъекты); 
	Иначе
		Если ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийРКО.ПрочийРасход Тогда 
			ДокументОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;	
		КонецЕсли;
	КонецЕсли;

	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "ВалютаДокумента", структураДокумент, "Валюта", , ЗапрашиваемыеОбъекты);

	Если ТипЗнч(ДокументОбъект.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		ПараметрыДоговора = Новый Структура;
		ПараметрыДоговора.Вставить("ВидДоговора", ВидДоговора); 
		ПараметрыДоговора.Вставить("Валюта", ДокументОбъект.ВалютаДокумента);  
		
		ДокументОбъект.ДоговорКонтрагента = НайтиСоздатьОсновнойДоговорКонтрагента(ДокументОбъект.Организация, ДокументОбъект.Контрагент, ПараметрыДоговора);
	КонецЕсли;	
	
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "СтатьяДвиженияДенежныхСредств", структураДокумент, "СтатьяДвиженияДенежныхСредств", , ЗапрашиваемыеОбъекты);  
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.СтатьяДвиженияДенежныхСредств) Тогда  
		ДокументОбъект.СтатьяДвиженияДенежныхСредств = УчетДенежныхСредствБП.СтатьяДДСПоУмолчанию(ДокументОбъект.ВидОперации);
	КонецЕсли;
		
	Для Каждого структураСтрока Из структураДокумент.РасшифровкаПлатежа Цикл	
		
		НоваяСтрока = ДокументОбъект.РасшифровкаПлатежа.Добавить(); 
		
		НоваяСтрока.СтатьяДвиженияДенежныхСредств = ДокументОбъект.СтатьяДвиженияДенежныхСредств;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, структураСтрока, "
			|СуммаВзаиморасчетов, 
			|СуммаНДС, 
			|КурсВзаиморасчетов, 
			|КратностьВзаиморасчетов"); 
		
		НоваяСтрока.ДоговорКонтрагента = ДокументОбъект.ДоговорКонтрагента; 
		НоваяСтрока.СуммаПлатежа = структураСтрока.Сумма;    
		
		ЗаполнитьРеквизитПоДаннымERP(НоваяСтрока, "СтатьяДвиженияДенежныхСредств", структураДокумент, "СтатьяДвиженияДенежныхСредств", , ЗапрашиваемыеОбъекты);
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.СтатьяДвиженияДенежныхСредств) Тогда  
			НоваяСтрока.СтатьяДвиженияДенежныхСредств = УчетДенежныхСредствБП.СтатьяДДСПоУмолчанию(ДокументОбъект.ВидОперации);
		КонецЕсли;   
		
		НоваяСтрока.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически; //!! или ПоДокументу
		
		Если ЗначениеЗаполнено(структураСтрока.СтавкаНДС) Тогда
			НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС[структураСтрока.СтавкаНДС];
		Иначе
			НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		КонецЕсли;	
				
	КонецЦикла;	
		
	Если ЗапрашиваемыеОбъекты.Количество() > 0 Тогда
		Возврат;
	Иначе
		ДокументОбъект.ДополнительныеСвойства.Вставить("ЗаполнитьСчетаУчетаПередЗаписью", Истина);
		ЗаписатьДокумент(ДокументОбъект, структураДокумент, ОписаниеОшибок);
	КонецЕсли;   
	
КонецПроцедуры

Процедура ЗагрузитьСписаниеСРасчетногоСчета(структураДокумент, ОписаниеОшибок, ЗапрашиваемыеОбъекты)
	
	ДокументОбъект = НайтиСоздатьОбъектДокумента(структураДокумент.УИД, "СписаниеСРасчетногоСчета");   
	
	ДокументОбъект.РасшифровкаПлатежа.Очистить();
	ДокументОбъект.ПеречислениеЗаработнойПлаты.Очистить();  
	
	ЗаполнитьЗначенияСвойств(ДокументОбъект, Документы.СписаниеСРасчетногоСчета.ПустаяСсылка(), "
		|ДоговорКонтрагента, 
		|СтатьяДвиженияДенежныхСредств,
		|СчетУчетаРасчетовСКонтрагентом,
		|Организация, СчетОрганизации,
		|Контрагент, СчетКонтрагента,
		|ПодразделениеОрганизации");
	
	ДокументОбъект.ПометкаУдаления = структураДокумент.ПометкаУдаления;

	ЗаполнитьЗначенияСвойств(ДокументОбъект, структураДокумент,	"
		|Номер, 
		|НомерВходящегоДокумента,
		|Дата, 
		|ДатаВходящегоДокумента,
		|СуммаДокумента, 
		|Комментарий");  
		
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "РегистрацияВНалоговомОргане", структураДокумент, "РегистрацияВНалоговомОргане", Тип("СправочникСсылка.РегистрацииВНалоговомОргане"), ЗапрашиваемыеОбъекты);
	ДокументОбъект.НеПодтвержденоВыпискойБанка = НЕ структураДокумент.ПроведеноБанком;
	
	ВидДоговора = "Прочее";
	
	ХозяйственнаяОперация = структураДокумент.ХозяйственнаяОперация;
	Если ХозяйственнаяОперация = "ОплатаПоставщику" Тогда 
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику;   
		ВидДоговора = "СПоставщиком";
	ИначеЕсли ХозяйственнаяОперация = "ВозвратОплатыКлиенту" 
		ИЛИ ХозяйственнаяОперация = "ВозвратОплатыНаПлатежнуюКарту" Тогда
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю; 
		ВидДоговора = "СПокупателем";
	ИначеЕсли ХозяйственнаяОперация = "ВозвратДенежныхСредствВДругуюОрганизацию" Тогда  
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам; 
	ИначеЕсли ХозяйственнаяОперация = "ПеречислениеВБюджет" Тогда
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога;
	ИначеЕсли ХозяйственнаяОперация = "ВыдачаДенежныхСредствПодотчетнику" Тогда   
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу; 
	ИначеЕсли ХозяйственнаяОперация = "ВыплатаЗарплатыПоЗарплатномуПроекту" Тогда
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП; 
	ИначеЕсли ХозяйственнаяОперация = "ПрочаяВыдачаДенежныхСредств" Тогда 
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание;  
	ИначеЕсли ХозяйственнаяОперация = "ПеречислениеНаДепозиты" 
		ИЛИ ХозяйственнаяОперация = "ОплатаАрендодателю" 
		ИЛИ ХозяйственнаяОперация = "ОплатаДенежныхСредствВДругуюОрганизацию" Тогда    
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами;  
	ИначеЕсли ХозяйственнаяОперация = "ВыплатаЗарплатыНаЛицевыеСчета" Тогда     
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику;
	ИначеЕсли ХозяйственнаяОперация = "ПеречислениеДенежныхСредствНаДругойСчет" Тогда 
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет;
	КонецЕсли; 
	
	Налог = ПолучитьНалогПоТипуНалога(структураДокумент.ТипНалога); 
	Если ЗначениеЗаполнено(Налог) Тогда
		ДокументОбъект.Налог = Налог;  
		ДокументОбъект.НалоговыйПериод = Дата(Прав(структураДокумент.НалоговыйПериод, 4), Сред(структураДокумент.НалоговыйПериод, 4, 2), Лев(структураДокумент.НалоговыйПериод, 2));
	КонецЕсли;       
	
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "Контрагент", структураДокумент, "Контрагент", Тип("СправочникСсылка.Контрагенты"), ЗапрашиваемыеОбъекты, Справочники.Контрагенты.ПустаяСсылка());
	Если УИДЗаполнен(структураДокумент.ПодотчетноеЛицо) Тогда
		ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "Контрагент", структураДокумент, "ПодотчетноеЛицо", Тип("СправочникСсылка.ФизическиеЛица"), ЗапрашиваемыеОбъекты, Справочники.ФизическиеЛица.ПустаяСсылка());
	КонецЕсли;
	
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "Организация", структураДокумент, "Организация", Тип("СправочникСсылка.Организации"), ЗапрашиваемыеОбъекты);

	Если УИДЗаполнен(структураДокумент.Подразделение) Тогда
		Подразделение = НайтиОбъектПоИдентификаторуНов(структураДокумент.Подразделение, Тип("СправочникСсылка.ПодразделенияОрганизаций"), Новый Структура("Владелец", ДокументОбъект.Организация)); 
		Если Подразделение <> Неопределено Тогда
			ДокументОбъект.ПодразделениеОрганизации = Подразделение;	
		Иначе
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураДокумент.УИД, структураДокумент.Подразделение, "Подразделение", XmlТипЗнч(ДокументОбъект.ПодразделениеОрганизации).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);
		КонецЕсли;
	Иначе
		ДокументОбъект.ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	КонецЕсли;             
	
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "ВалютаДокумента", структураДокумент, "Валюта", , ЗапрашиваемыеОбъекты);
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "ДоговорКонтрагента", структураДокумент, "Договор", , ЗапрашиваемыеОбъекты);
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ДоговорКонтрагента) И ТипЗнч(ДокументОбъект.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		ПараметрыДоговора = Новый Структура;
		ПараметрыДоговора.Вставить("ВидДоговора", ВидДоговора); 
		ПараметрыДоговора.Вставить("Валюта", ДокументОбъект.ВалютаДокумента);  
		
		ДокументОбъект.ДоговорКонтрагента = НайтиСоздатьОсновнойДоговорКонтрагента(ДокументОбъект.Организация, ДокументОбъект.Контрагент, ПараметрыДоговора);
	КонецЕсли;
	
	Если структураДокумент.Свойство("БанковскийСчетОрганизации") Тогда
		ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "СчетОрганизации", структураДокумент, "БанковскийСчетОрганизации", , ЗапрашиваемыеОбъекты); 
	КонецЕсли;
	
	Если ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
		Если структураДокумент.Свойство("БанковскийСчетКонтрагента") Тогда
			ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "СчетКонтрагента", структураДокумент, "БанковскийСчетКонтрагента", , ЗапрашиваемыеОбъекты);  
		КонецЕсли; 
	КонецЕсли;
			
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.СтатьяДвиженияДенежныхСредств) Тогда  
		ДокументОбъект.СтатьяДвиженияДенежныхСредств = УчетДенежныхСредствБП.СтатьяДДСПоУмолчанию(ДокументОбъект.ВидОперации);
	КонецЕсли;   
	
	Если УИДЗаполнен(структураДокумент.Ведомость) Тогда     
		НоваяСтрока = ДокументОбъект.ПеречислениеЗаработнойПлаты.Добавить();
		ЗаполнитьРеквизитПоДаннымERP(НоваяСтрока, "Ведомость", структураДокумент, "Ведомость", Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк"), ЗапрашиваемыеОбъекты, Документы.ВедомостьНаВыплатуЗарплатыВБанк.ПустаяСсылка()); 
		НоваяСтрока.СуммаПлатежа = структураДокумент.СуммаДокумента;	
	КонецЕсли;    
	
	ЭтоПрочееСписание = Ложь;
	
	Если структураДокумент.Свойство("СчетУчетаИзНастройкиСчетовУчета") Тогда
		ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "СчетУчетаРасчетовСКонтрагентом", структураДокумент, "СчетУчетаИзНастройкиСчетовУчета");
	ИначеЕсли структураДокумент.Свойство("СчетУчетаРасчетовСКонтрагентом") Тогда  
		ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "СчетУчетаРасчетовСКонтрагентом", структураДокумент, "СчетУчетаРасчетовСКонтрагентом", , ЗапрашиваемыеОбъекты); 
		//76.41
		Если ДокументОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыПоИсполнительнымДокументамРаботников Тогда 
			ДокументОбъект.СубконтоДт1 = ДокументОбъект.Контрагент;	 
			ДокументОбъект.ПодразделениеДт = ДокументОбъект.ПодразделениеОрганизации;	 
		КонецЕсли; 
		
		//91.02
		Если ДокументОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПрочиеРасходы Тогда 
			
			ДокументОбъект.ОтражениеВУСН = Перечисления.ОтражениеВУСН.НеПринимаются; 
			//прочие доходы и расходы    
			Если СтрНайти(структураДокумент.СтатьяРасходов, "Услуги банка") > 0
				ИЛИ СтрНайти(структураДокумент.СтатьяРасходов, "Овердрафт") > 0
				ИЛИ структураДокумент.СтатьяРасходов = "Финансирование за счет кредитов и займов" Тогда
				ДокументОбъект.СубконтоДт1 = Справочники.ПрочиеДоходыИРасходы.РасходыНаУслугиБанков;
				ДокументОбъект.ПодразделениеДт = ДокументОбъект.ПодразделениеОрганизации;	 
			КонецЕсли; 
			
			ЭтоПрочееСписание = Истина;
		КонецЕсли;
	КонецЕсли;     
	
	Для Каждого структураСтрока Из структураДокумент.РасшифровкаПлатежа Цикл
		
		//прочее списание 
		Если НЕ ЭтоПрочееСписание Тогда
			НоваяСтрока = ДокументОбъект.РасшифровкаПлатежа.Добавить();
			НоваяСтрока.ДоговорКонтрагента = ДокументОбъект.ДоговорКонтрагента;  
			
			Если ЗначениеЗаполнено(структураСтрока.СтавкаНДС) Тогда
				НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС[структураСтрока.СтавкаНДС];
			Иначе
				НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			КонецЕсли;	      
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, структураСтрока, "
				|СуммаВзаиморасчетов, 
				|СуммаНДС, 
				|КурсВзаиморасчетов, 
				|КратностьВзаиморасчетов");  
			
			НоваяСтрока.СуммаПлатежа = структураСтрока.Сумма;
			
			ЗаполнитьРеквизитПоДаннымERP(НоваяСтрока, "СтатьяДвиженияДенежныхСредств", структураСтрока, "СтатьяДвиженияДенежныхСредств", , ЗапрашиваемыеОбъекты);  
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СтатьяДвиженияДенежныхСредств) Тогда  
				НоваяСтрока.СтатьяДвиженияДенежныхСредств = УчетДенежныхСредствБП.СтатьяДДСПоУмолчанию(ДокументОбъект.ВидОперации);
			КонецЕсли;   
			
			Если структураСтрока.Свойство("СчетУчетаРасчетовСКонтрагентом") Тогда 
				ЗаполнитьРеквизитПоДаннымERP(НоваяСтрока, "СчетУчетаРасчетовСКонтрагентом", структураСтрока, "СчетУчетаРасчетовСКонтрагентом", , ЗапрашиваемыеОбъекты);  
			КонецЕсли;   
			Если структураСтрока.Свойство("СчетУчетаРасчетовПоАвансам") Тогда  
				ЗаполнитьРеквизитПоДаннымERP(НоваяСтрока, "СчетУчетаРасчетовПоАвансам", структураСтрока, "СчетУчетаРасчетовПоАвансам", , ЗапрашиваемыеОбъекты);  
			КонецЕсли;
			
			НоваяСтрока.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;   
			НоваяСтрока.ОтражениеВУСН = Перечисления.ОтражениеВУСН.НеПринимаются;  
		КонецЕсли;
		
	КонецЦикла;	  
	
	//Обработка перед записью
	ДокументОбъект.НазначениеПлатежа = Документы.СписаниеСРасчетногоСчета.ПолучитьНазначениеПлатежа(ДокументОбъект, Ложь);
	
	Если ЗапрашиваемыеОбъекты.Количество() > 0 Тогда
		Возврат;
	Иначе
		ДокументОбъект.ДополнительныеСвойства.Вставить("ЗаполнитьСчетаУчетаПередЗаписью", Истина);
		ЗаписатьДокумент(ДокументОбъект, структураДокумент, ОписаниеОшибок);
	КонецЕсли;   
	
КонецПроцедуры

Процедура ЗагрузитьВедомостьНаВыплатуЗарплатыВБанк(структураДокумент, ОписаниеОшибок, ЗапрашиваемыеОбъекты) 
	
	ДокументОбъект = НайтиСоздатьОбъектДокумента(структураДокумент.УИД, "ВедомостьНаВыплатуЗарплатыВБанк");   
	
	ДокументОбъект.Состав.Очистить();
	ДокументОбъект.Зарплата.Очистить();
	ДокументОбъект.ФизическиеЛица.Очистить();
	ДокументОбъект.НДФЛ.Очистить();   
	//
	ДокументОбъект.ПометкаУдаления = структураДокумент.ПометкаУдаления;

	ЗаполнитьЗначенияСвойств(ДокументОбъект, структураДокумент,	"
		|Номер, 
		|Дата,
		|ДатаВыплаты,
		|ПериодРегистрации,
		|НомерРеестра,
		|КраткийСоставДокумента,
		|СуммаПоДокументу, 
		|Комментарий");    
	
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "Организация", структураДокумент, "Организация", Тип("СправочникСсылка.Организации"), ЗапрашиваемыеОбъекты);

	Если УИДЗаполнен(структураДокумент.Подразделение) Тогда
		Подразделение = НайтиОбъектПоИдентификаторуНов(структураДокумент.Подразделение, Тип("СправочникСсылка.ПодразделенияОрганизаций"), Новый Структура("Владелец", ДокументОбъект.Организация)); 
		Если Подразделение <> Неопределено Тогда
			ДокументОбъект.Подразделение = Подразделение;	
		Иначе
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураДокумент.УИД, структураДокумент.Подразделение, "Подразделение", XmlТипЗнч(ДокументОбъект.ПодразделениеОрганизации).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);
		КонецЕсли;
	Иначе
		ДокументОбъект.Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	КонецЕсли;  
	
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "ЗарплатныйПроект", структураДокумент, "ЗарплатныйПроект", Тип("СправочникСсылка.ЗарплатныеПроекты"), ЗапрашиваемыеОбъекты);
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "СпособВыплаты", структураДокумент, "СпособВыплаты", Тип("СправочникСсылка.СпособыВыплатыЗарплаты"), ЗапрашиваемыеОбъекты);
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "Округление", структураДокумент, "Округление", Тип("СправочникСсылка.СпособыОкругленияПриРасчетеЗарплаты"), ЗапрашиваемыеОбъекты);
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "ВидДоходаИсполнительногоПроизводства", структураДокумент, "ВидДоходаИсполнительногоПроизводства", Тип("ПеречислениеСсылка.ВидыДоходовИсполнительногоПроизводства"), ЗапрашиваемыеОбъекты, "ВидыДоходовИсполнительногоПроизводства");
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "Руководитель", структураДокумент, "Руководитель", Тип("СправочникСсылка.ФизическиеЛица"), ЗапрашиваемыеОбъекты);
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "ДолжностьРуководителя", структураДокумент, "ДолжностьРуководителя", Тип("СправочникСсылка.Должности"), ЗапрашиваемыеОбъекты);
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "ГлавныйБухгалтер", структураДокумент, "ГлавныйБухгалтер", Тип("СправочникСсылка.ФизическиеЛица"), ЗапрашиваемыеОбъекты);
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "ДолжностьГлавногоБухгалтера", структураДокумент, "ДолжностьГлавногоБухгалтера", Тип("СправочникСсылка.Должности"), ЗапрашиваемыеОбъекты);
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "Бухгалтер", структураДокумент, "Бухгалтер", Тип("СправочникСсылка.ФизическиеЛица"), ЗапрашиваемыеОбъекты);
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "ДолжностьБухгалтера", структураДокумент, "ДолжностьБухгалтера", Тип("СправочникСсылка.Должности"), ЗапрашиваемыеОбъекты);  
	
	Для Каждого структураСтрока Из структураДокумент.Состав Цикл
		НоваяСтрока = ДокументОбъект.Состав.Добавить();
		НоваяСтрока.ИдентификаторСтроки = Новый УникальныйИдентификатор(структураСтрока.ИдентификаторСтроки);  

		ЗаполнитьРеквизитПоДаннымERP(НоваяСтрока, "ФизическоеЛицо", структураСтрока, "ФизическоеЛицо", Тип("СправочникСсылка.ФизическиеЛица"), ЗапрашиваемыеОбъекты);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, структураСтрока, "
			|НомерЛицевогоСчета, 
			|ВзысканнаяСумма");
	КонецЦикла;  
	
	Для Каждого структураСтрока Из структураДокумент.Зарплата Цикл
		НоваяСтрока = ДокументОбъект.Зарплата.Добавить();
		НоваяСтрока.ИдентификаторСтроки = Новый УникальныйИдентификатор(структураСтрока.ИдентификаторСтроки);  
		
		ЗаполнитьРеквизитПоДаннымERP(НоваяСтрока, "ФизическоеЛицо", структураСтрока, "ФизическоеЛицо", Тип("СправочникСсылка.ФизическиеЛица"), ЗапрашиваемыеОбъекты); 
		ЗаполнитьРеквизитПоДаннымERP(НоваяСтрока, "Сотрудник", структураСтрока, "Сотрудник", Тип("СправочникСсылка.Сотрудники"), ЗапрашиваемыеОбъекты); 

		Если УИДЗаполнен(структураСтрока.Подразделение) Тогда
			Подразделение = НайтиОбъектПоИдентификаторуНов(структураСтрока.Подразделение, Тип("СправочникСсылка.ПодразделенияОрганизаций"), Новый Структура("Владелец", ДокументОбъект.Организация)); 
			Если Подразделение <> Неопределено Тогда
				НоваяСтрока.Подразделение = Подразделение;	
			Иначе
				СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураДокумент.УИД, структураСтрока.Подразделение, "Подразделение", XmlТипЗнч(ДокументОбъект.Подразделение).ИмяТипа);
				ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);
			КонецЕсли;
		Иначе
			НоваяСтрока.Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		КонецЕсли; 
		
		ЗаполнитьРеквизитПоДаннымERP(НоваяСтрока, "СтатьяРасходов", структураСтрока, "СтатьяРасходов", Тип("СправочникСсылка.СтатьиРасходовЗарплата"), ЗапрашиваемыеОбъекты); 
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, структураСтрока, "
		|КВыплате, 
		|ПериодВзаиморасчетов, 
		|КомпенсацияЗаЗадержкуЗарплаты, 
		|НомерЛицевогоСчета"); 
		
	КонецЦикла; 

	Для Каждого структураСтрока Из структураДокумент.НДФЛ Цикл
		НоваяСтрока = ДокументОбъект.НДФЛ.Добавить();
		НоваяСтрока.ИдентификаторСтроки = Новый УникальныйИдентификатор(структураСтрока.ИдентификаторСтроки);  
		ЗаполнитьРеквизитПоДаннымERP(НоваяСтрока, "ФизическоеЛицо", структураСтрока, "ФизическоеЛицо", Тип("СправочникСсылка.ФизическиеЛица"), ЗапрашиваемыеОбъекты); 
		ЗаполнитьРеквизитПоДаннымERP(НоваяСтрока, "СтавкаНалогообложенияРезидента", структураСтрока, "СтавкаНалогообложенияРезидента", Тип("ПеречислениеСсылка.НДФЛСтавкиНалогообложенияРезидента"), ЗапрашиваемыеОбъекты, "НДФЛСтавкиНалогообложенияРезидента");
		ЗаполнитьРеквизитПоДаннымERP(НоваяСтрока, "КодДохода", структураСтрока, "КодДохода", Тип("СправочникСсылка.ВидыДоходовНДФЛ"), ЗапрашиваемыеОбъекты); 
		ЗаполнитьРеквизитПоДаннымERP(НоваяСтрока, "РегистрацияВНалоговомОргане", структураСтрока, "РегистрацияВНалоговомОргане", Тип("СправочникСсылка.РегистрацииВНалоговомОргане"), ЗапрашиваемыеОбъекты); 

		Если УИДЗаполнен(структураСтрока.Подразделение) Тогда
			Подразделение = НайтиОбъектПоИдентификаторуНов(структураСтрока.Подразделение, Тип("СправочникСсылка.ПодразделенияОрганизаций"), Новый Структура("Владелец", ДокументОбъект.Организация)); 
			Если Подразделение <> Неопределено Тогда
				НоваяСтрока.Подразделение = Подразделение;	
			Иначе
				СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураДокумент.УИД, структураСтрока.Подразделение, "Подразделение", XmlТипЗнч(Справочники.ПодразделенияОрганизаций.ПустаяСсылка()).ИмяТипа);
				ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);
			КонецЕсли;
		Иначе
			НоваяСтрока.Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		КонецЕсли;      

		ЗаполнитьРеквизитПоДаннымERP(НоваяСтрока, "КатегорияДохода", структураСтрока, "КатегорияДохода", Тип("ПеречислениеСсылка.КатегорииДоходовНДФЛ"), ЗапрашиваемыеОбъекты, "КатегорииДоходовНДФЛ");
		ЗаполнитьРеквизитПоДаннымERP(НоваяСтрока, "СтатьяРасходов", структураСтрока, "СтатьяРасходов", Тип("СправочникСсылка.СтатьиРасходовЗарплата"), ЗапрашиваемыеОбъекты); 
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, структураСтрока, "
			|Сумма, 
			|СуммаСПревышения, 
			|МесяцНалоговогоПериода, 
			|ВключатьВДекларациюПоНалогуНаПрибыль");    
		
	КонецЦикла;   
	
	Если ЗапрашиваемыеОбъекты.Количество() > 0 Тогда
		Возврат;
	Иначе
		ЗаписатьДокумент(ДокументОбъект, структураДокумент, ОписаниеОшибок);
	КонецЕсли;   
	
КонецПроцедуры   

Процедура ЗагрузитьКомплектацииНоменклатуры(структураДокумент, ОписаниеОшибок, ЗапрашиваемыеОбъекты)    
		
	Если НЕ УИДЗаполнен(структураДокумент.УИД) Тогда
		Возврат;
	КонецЕсли;	
	
	ТипДокумента = "КомплектацияНоменклатуры"; 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПубличныеИдентификаторыСинхронизируемыхОбъектов.Ссылка КАК Ссылка,
	|	ПубличныеИдентификаторыСинхронизируемыхОбъектов.Ссылка.Комментарий КАК Комментарий
	|ИЗ
	|	РегистрСведений.ПубличныеИдентификаторыСинхронизируемыхОбъектов КАК ПубличныеИдентификаторыСинхронизируемыхОбъектов
	|ГДЕ
	|	ПубличныеИдентификаторыСинхронизируемыхОбъектов.Идентификатор = &УИД
	|	И ПубличныеИдентификаторыСинхронизируемыхОбъектов.УзелИнформационнойБазы = НЕОПРЕДЕЛЕНО";
	
	Запрос.УстановитьПараметр("УИД", Лев(структураДокумент.УИД, 36));
	                                    	
	РезультатЗапросаПубличныхИдентификаторов = Запрос.Выполнить().Выгрузить();  
	
	Для Каждого структураСтрока Из структураДокумент.Товары Цикл
		УказательНаСтрокуВКомментарии = "[" + Лев(структураДокумент.УИД, 36) + "/N" + структураСтрока.НомерСтроки + "]";
		
		ИскомаяСтрокаСсылки = Неопределено;
		Для каждого ПубличныйИдентификатор из РезультатЗапросаПубличныхИдентификаторов Цикл
			Если СтрНайти(ПубличныйИдентификатор.Комментарий, УказательНаСтрокуВКомментарии) > 0 Тогда
				ИскомаяСтрокаСсылки = ПубличныйИдентификатор;	
				Прервать;
			КонецЕсли; 
		КонецЦикла;
		
		Если ИскомаяСтрокаСсылки <> Неопределено И ОбщегоНазначения.СсылкаСуществует(ИскомаяСтрокаСсылки.Ссылка) Тогда
			ДокументОбъект = ИскомаяСтрокаСсылки.Ссылка.ПолучитьОбъект();
			ДокументОбъект.ПометкаУдаления = Ложь;	
		Иначе
			ДокументОбъект = Документы[ТипДокумента].СоздатьДокумент();
			ДокументОбъект.УстановитьСсылкуНового(Документы[ТипДокумента].ПолучитьСсылку());	
			ЗаписатьИдентификаторВРегистр(ДокументОбъект.ПолучитьСсылкуНового(), структураДокумент.УИД);
		КонецЕсли; 
						
		//Очистим значения перед загрузкой
		ДокументОбъект.Комплектующие.Очистить(); 
		ЗаполнитьЗначенияСвойств(ДокументОбъект, Документы[ТипДокумента].ПустаяСсылка(), "
			|Организация, 
			|ПодразделениеОрганизации,
			|Склад,
			|Комментарий");
		
		ДокументОбъект.ПометкаУдаления = структураДокумент.ПометкаУдаления;
		
		ЗаполнитьЗначенияСвойств(ДокументОбъект, структураДокумент,	"
			|Дата");
		
		ДокументОбъект.Комментарий = "#{ЗагрузкаERP:" + структураДокумент.Представление + "}" + УказательНаСтрокуВКомментарии + ?(ЗначениеЗаполнено(структураДокумент.Комментарий)," " + структураДокумент.Комментарий, "");	
		
		ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "Организация", структураДокумент, "Организация", Тип("СправочникСсылка.Организации"), ЗапрашиваемыеОбъекты);
		
		Если УИДЗаполнен(структураДокумент.Подразделение) Тогда
			Подразделение = НайтиОбъектПоИдентификаторуНов(структураДокумент.Подразделение, Тип("СправочникСсылка.ПодразделенияОрганизаций"), Новый Структура("Владелец", ДокументОбъект.Организация)); 
			Если Подразделение <> Неопределено Тогда
				ДокументОбъект.ПодразделениеОрганизации = Подразделение;	
			Иначе
				СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураДокумент.УИД, структураДокумент.Подразделение, "Подразделение", XmlТипЗнч(ДокументОбъект.ПодразделениеОрганизации).ИмяТипа);
				ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);
			КонецЕсли;
		Иначе
			ДокументОбъект.ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		КонецЕсли;  
		
		ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "Склад", структураДокумент, "Склад", , ЗапрашиваемыеОбъекты);
		
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация;
				
		//Заполнение номенклатуры в шапке
		ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "Номенклатура", структураСтрока, "НоменклатураОприходование", , ЗапрашиваемыеОбъекты); 
		ДокументОбъект.Количество = структураСтрока.Количество;
		
		//ТЧ: Комплектующие
		НоваяСтрока = ДокументОбъект.Комплектующие.Добавить();   
		
		ЗаполнитьРеквизитПоДаннымERP(НоваяСтрока, "Номенклатура", структураСтрока, "Номенклатура", , ЗапрашиваемыеОбъекты);
		НоваяСтрока.ДоляСтоимости = 100;
		НоваяСтрока.Количество = структураСтрока.Количество;
		ЗаполнитьНомерГТД(НоваяСтрока, структураСтрока.НомерГТД, ЗапрашиваемыеОбъекты, структураДокумент.УИД);		
		
		Если структураСтрока.Свойство("СчетУчета") Тогда
			ЗаполнитьРеквизитПоДаннымERP(НоваяСтрока, "СчетУчета", структураСтрока, "СчетУчета", , ЗапрашиваемыеОбъекты); 
		КонецЕсли;
		
		//Запись документа
		ДокументОбъект.ДополнительныеСвойства.Вставить("ЗаполнитьСчетаУчетаПередЗаписью", Истина);
		ЗаписатьДокумент(ДокументОбъект, структураДокумент, ОписаниеОшибок);
		
		//Удалим строку из таблицы запроса
		Если ИскомаяСтрокаСсылки <> Неопределено Тогда
			РезультатЗапросаПубличныхИдентификаторов.Удалить(ИскомаяСтрокаСсылки);	
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗапрашиваемыеОбъекты.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	//К этим документам комплектации ничего не выгружается, надо пометить на удаление
	Если РезультатЗапросаПубличныхИдентификаторов.Количество() > 0 Тогда 
		Для каждого ПубличныйИдентификатор из РезультатЗапросаПубличныхИдентификаторов Цикл
			ТекущийОбъект = ПубличныйИдентификатор.Ссылка.ПолучитьОбъект();
			ТекущийОбъект.ПометкаУдаления = Истина;			
			ТекущийОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры  

Процедура ЗагрузитьКомплектациюНоменклатуры(структураДокумент, ОписаниеОшибок, ЗапрашиваемыеОбъекты)
	
	Если НЕ УИДЗаполнен(структураДокумент.УИД) Тогда
		Возврат;
	КонецЕсли;	
	
	ДокументОбъект = НайтиСоздатьОбъектДокумента(структураДокумент.УИД,"КомплектацияНоменклатуры"); 
	ДокументОбъект.ПометкаУдаления = структураДокумент.ПометкаУдаления;
	ЗаполнитьЗначенияСвойств(ДокументОбъект,структураДокумент,
		"Номер,
		|Дата,
		|Комментарий");
	
	ДокументОбъект.Комплектующие.Очистить();
	
	ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры[структураДокумент.ВидОперации];
	
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "Организация", структураДокумент, "Организация", Тип("СправочникСсылка.Организации"), ЗапрашиваемыеОбъекты);
		
	Если УИДЗаполнен(структураДокумент.Подразделение) Тогда
		Подразделение = НайтиОбъектПоИдентификаторуНов(структураДокумент.Подразделение, Тип("СправочникСсылка.ПодразделенияОрганизаций"), Новый Структура("Владелец", ДокументОбъект.Организация)); 
		Если Подразделение <> Неопределено Тогда
			ДокументОбъект.ПодразделениеОрганизации = Подразделение;	
		Иначе
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураДокумент.УИД, структураДокумент.Подразделение, "Подразделение", XmlТипЗнч(ДокументОбъект.ПодразделениеОрганизации).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);
		КонецЕсли;
	Иначе
		ДокументОбъект.ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	КонецЕсли;  
	
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "Склад", структураДокумент, "Склад", , ЗапрашиваемыеОбъекты);
		
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "Номенклатура", структураДокумент, "Номенклатура", , ЗапрашиваемыеОбъекты); 
	ДокументОбъект.Количество = структураДокумент.Количество;
	
	Для Каждого структураСтрокаТовар Из структураДокумент.Товары Цикл
		
		новСтрТовар = ДокументОбъект.Комплектующие.Добавить();
		
		ЗаполнитьРеквизитПоДаннымERP(новСтрТовар, "Номенклатура", структураСтрокаТовар, "Номенклатура", , ЗапрашиваемыеОбъекты);
		
		новСтрТовар.Количество = структураСтрокаТовар.Количество;
		новСтрТовар.ДоляСтоимости = структураСтрокаТовар.ДоляСтоимости;
		
	КонецЦикла; 
	
	Если ЗапрашиваемыеОбъекты.Количество() > 0 Тогда
		Возврат;
	Иначе 
		Если ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация Тогда
			ДокументОбъект.УстановитьНовыйНомер("К");
		Иначе
			ДокументОбъект.УстановитьНовыйНомер("Р");
		КонецЕсли;
		ДокументОбъект.ДополнительныеСвойства.Вставить("ЗаполнитьСчетаУчетаПередЗаписью", Истина);
		ЗаписатьДокумент(ДокументОбъект, структураДокумент, ОписаниеОшибок);	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьРазукомплектацииНоменклатуры(структураДокумент, ОписаниеОшибок, ЗапрашиваемыеОбъекты)    
		
	Если НЕ УИДЗаполнен(структураДокумент.УИД) Тогда
		Возврат;
	КонецЕсли;	
	
	ТипДокумента = "КомплектацияНоменклатуры"; 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПубличныеИдентификаторыСинхронизируемыхОбъектов.Ссылка КАК Ссылка,
	|	ПубличныеИдентификаторыСинхронизируемыхОбъектов.Ссылка.Комментарий КАК Комментарий
	|ИЗ
	|	РегистрСведений.ПубличныеИдентификаторыСинхронизируемыхОбъектов КАК ПубличныеИдентификаторыСинхронизируемыхОбъектов
	|ГДЕ
	|	ПубличныеИдентификаторыСинхронизируемыхОбъектов.Идентификатор = &УИД
	|	И ПубличныеИдентификаторыСинхронизируемыхОбъектов.УзелИнформационнойБазы = НЕОПРЕДЕЛЕНО";
	
	Запрос.УстановитьПараметр("УИД", Лев(структураДокумент.УИД, 36));
	                                    	
	РезультатЗапросаПубличныхИдентификаторов = Запрос.Выполнить().Выгрузить();  
	
	Для Каждого структураСтрока Из структураДокумент.Товары Цикл
		УказательНаСтрокуВКомментарии = "[" + Лев(структураДокумент.УИД, 36) + "/N" + структураСтрока.НомерСтроки + "]";
		
		ИскомаяСтрокаСсылки = Неопределено;
		Для каждого ПубличныйИдентификатор из РезультатЗапросаПубличныхИдентификаторов Цикл
			Если СтрНайти(ПубличныйИдентификатор.Комментарий, УказательНаСтрокуВКомментарии) > 0 Тогда
				ИскомаяСтрокаСсылки = ПубличныйИдентификатор;	
				Прервать;
			КонецЕсли; 
		КонецЦикла;
		
		Если ИскомаяСтрокаСсылки <> Неопределено И ОбщегоНазначения.СсылкаСуществует(ИскомаяСтрокаСсылки.Ссылка) Тогда
			ДокументОбъект = ИскомаяСтрокаСсылки.Ссылка.ПолучитьОбъект();
			ДокументОбъект.ПометкаУдаления = Ложь;	
		Иначе
			ДокументОбъект = Документы[ТипДокумента].СоздатьДокумент();
			ДокументОбъект.УстановитьСсылкуНового(Документы[ТипДокумента].ПолучитьСсылку());	
			ЗаписатьИдентификаторВРегистр(ДокументОбъект.ПолучитьСсылкуНового(), структураДокумент.УИД);
		КонецЕсли; 
						
		//Очистим значения перед загрузкой
		ДокументОбъект.Комплектующие.Очистить(); 
		ЗаполнитьЗначенияСвойств(ДокументОбъект, Документы[ТипДокумента].ПустаяСсылка(), "
			|Организация, 
			|ПодразделениеОрганизации,
			|Склад,
			|Комментарий");
		
		ДокументОбъект.ПометкаУдаления = структураДокумент.ПометкаУдаления;
		
		ЗаполнитьЗначенияСвойств(ДокументОбъект, структураДокумент,	"
			|Дата");
		
		ДокументОбъект.Комментарий = "#{ЗагрузкаERP:" + структураДокумент.Представление + "}" + УказательНаСтрокуВКомментарии + ?(ЗначениеЗаполнено(структураДокумент.Комментарий)," " + структураДокумент.Комментарий, "");	
		
		ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "Организация", структураДокумент, "Организация", Тип("СправочникСсылка.Организации"), ЗапрашиваемыеОбъекты);
		
		Если УИДЗаполнен(структураДокумент.Подразделение) Тогда
			Подразделение = НайтиОбъектПоИдентификаторуНов(структураДокумент.Подразделение, Тип("СправочникСсылка.ПодразделенияОрганизаций"), Новый Структура("Владелец", ДокументОбъект.Организация)); 
			Если Подразделение <> Неопределено Тогда
				ДокументОбъект.ПодразделениеОрганизации = Подразделение;	
			Иначе
				СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураДокумент.УИД, структураДокумент.Подразделение, "Подразделение", XmlТипЗнч(ДокументОбъект.ПодразделениеОрганизации).ИмяТипа);
				ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);
			КонецЕсли;
		Иначе
			ДокументОбъект.ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		КонецЕсли;  
		
		ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "Склад", структураДокумент, "Склад", , ЗапрашиваемыеОбъекты);
		
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Разукомплектация;
				
		//Заполнение номенклатуры в шапке
		ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "Номенклатура", структураСтрока, "Номенклатура", , ЗапрашиваемыеОбъекты); 
		ДокументОбъект.Количество = структураСтрока.Количество;
		
		//ТЧ: Комплектующие
		НоваяСтрока = ДокументОбъект.Комплектующие.Добавить();   
		
		ЗаполнитьРеквизитПоДаннымERP(НоваяСтрока, "Номенклатура", структураСтрока, "НоменклатураОприходование", , ЗапрашиваемыеОбъекты);
		НоваяСтрока.ДоляСтоимости = 100;
		НоваяСтрока.Количество = структураСтрока.Количество; 
		
		Если структураСтрока.Свойство("СтоимостьОприходования") И ЗначениеЗаполнено(структураСтрока.СтоимостьОприходования) Тогда
			НоваяСтрока.Себестоимость = структураСтрока.СтоимостьОприходования;
		КонецЕсли;
		
		Если структураСтрока.Свойство("СчетУчета") И ЗначениеЗаполнено(структураСтрока.СчетУчета) Тогда
			ЗаполнитьРеквизитПоДаннымERP(НоваяСтрока, "СчетУчета", структураСтрока, "СчетУчета", , ЗапрашиваемыеОбъекты); 
		КонецЕсли;
		
		//Запись документа
		ДокументОбъект.ДополнительныеСвойства.Вставить("ЗаполнитьСчетаУчетаПередЗаписью", Истина);
		ЗаписатьДокумент(ДокументОбъект, структураДокумент, ОписаниеОшибок);
		
		//Удалим строку из таблицы запроса
		Если ИскомаяСтрокаСсылки <> Неопределено Тогда
			РезультатЗапросаПубличныхИдентификаторов.Удалить(ИскомаяСтрокаСсылки);	
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗапрашиваемыеОбъекты.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	//К этим документам комплектации ничего не выгружается, надо пометить на удаление
	Если РезультатЗапросаПубличныхИдентификаторов.Количество() > 0 Тогда 
		Для каждого ПубличныйИдентификатор из РезультатЗапросаПубличныхИдентификаторов Цикл
			ТекущийОбъект = ПубличныйИдентификатор.Ссылка.ПолучитьОбъект();
			ТекущийОбъект.ПометкаУдаления = Истина;			
			ТекущийОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьОперациюБух(структураДокумент, ОписаниеОшибок, ЗапрашиваемыеОбъекты) 
	
	ДокументОбъект = НайтиСоздатьОбъектДокумента(структураДокумент.УИД, "ОперацияБух");  
	
	ДокументОбъект.Движения.Хозрасчетный.Очистить();  
	
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "Организация", структураДокумент, "Организация", Тип("СправочникСсылка.Организации"), ЗапрашиваемыеОбъекты); 
	
	ДокументОбъект.Дата = структураДокумент.Дата;
	ДокументОбъект.ПометкаУдаления = структураДокумент.ПометкаУдаления;
	ДокументОбъект.Содержание = структураДокумент.Представление; 
	
	ДобавитьКомментарий(ДокументОбъект, структураДокумент);
	
	Если ЗапрашиваемыеОбъекты.Количество() > 0 Тогда
		Возврат;
	Иначе
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		ЗагрузитьПроводкиДокумента(ДокументОбъект, структураДокумент.Проводки, ЗапрашиваемыеОбъекты);
	КонецЕсли;   
	
КонецПроцедуры   

Процедура ЗагрузитьОтражениеЗарплатыВБухучете(структураДокумент, ОписаниеОшибок, ЗапрашиваемыеОбъекты) 
	
	ДокументОбъект = НайтиСоздатьОбъектДокумента(структураДокумент.УИД, "ОтражениеЗарплатыВБухучете");
	//
	ДокументОбъект.НачисленнаяЗарплатаИВзносы.Очистить();
	ДокументОбъект.НачисленныйНДФЛ.Очистить();
	ДокументОбъект.УдержаннаяЗарплата.Очистить();    
	ДокументОбъект.ВыплатаОтпусковЗаСчетРезерва.Очистить();    
	ДокументОбъект.ФизическиеЛица.Очистить();    
	
	ЗаполнитьЗначенияСвойств(ДокументОбъект, структураДокумент,	"
		|Номер, 
		|Дата,
		|ПериодРегистрации,
		|КраткийСоставДокумента,
		|Комментарий");  
	
	ДокументОбъект.ПометкаУдаления = структураДокумент.ПометкаУдаления;
	
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "Организация", структураДокумент, "Организация", Тип("СправочникСсылка.Организации"), ЗапрашиваемыеОбъекты);  
	
	//Табличные части   
	СтатьяРасходов = Справочники.СтатьиРасходовЗарплата.НайтиПоКоду("ОТ");
	
	//ТЧ: НачисленнаяЗарплатаИВзносы
	Для Каждого структураСтрока Из структураДокумент.НачисленнаяЗарплатаИВзносыПоФизлицам Цикл	
		НоваяСтрока = ДокументОбъект.НачисленнаяЗарплатаИВзносы.Добавить();   
		
		ЗаполнитьРеквизитПоДаннымERP(НоваяСтрока, "ФизическоеЛицо", структураСтрока, "ФизическоеЛицо", , ЗапрашиваемыеОбъекты);
		ЗаполнитьРеквизитПоДаннымERP(НоваяСтрока, "СпособОтраженияЗарплатыВБухучете", структураСтрока, "СпособОтраженияЗарплатыВБухучете", , ЗапрашиваемыеОбъекты);  
		НоваяСтрока.СтатьяРасходов = СтатьяРасходов;
		
		Если УИДЗаполнен(структураСтрока.ПодразделениеПредприятия) Тогда
			Подразделение = НайтиОбъектПоИдентификаторуНов(структураСтрока.ПодразделениеПредприятия, Тип("СправочникСсылка.ПодразделенияОрганизаций"), Новый Структура("Владелец", ДокументОбъект.Организация)); 
			Если Подразделение <> Неопределено Тогда
				НоваяСтрока.Подразделение = Подразделение;	
			Иначе
				СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураДокумент.УИД, структураСтрока.ПодразделениеПредприятия, "Подразделение", XmlТипЗнч(Справочники.ПодразделенияОрганизаций.ПустаяСсылка()).ИмяТипа);
				ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);
			КонецЕсли;
		Иначе
			НоваяСтрока.Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		КонецЕсли;      

		ЗаполнитьРеквизитПоДаннымERP(НоваяСтрока, "ВидОперации", структураСтрока, "ВидОперации", Тип("ПеречислениеСсылка.ВидыОперацийПоЗарплате"), ЗапрашиваемыеОбъекты, "ВидыОперацийПоЗарплате");
		Если НоваяСтрока.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпускОценочныеОбязательстваИРезервы Тогда
			НоваяСтрока.СпособОтраженияЗарплатыВБухучете = Справочники.СпособыОтраженияЗарплатыВБухУчете.НайтиПоНаименованию("44 Оплата труда", Истина);	
		КонецЕсли;  
		ЗаполнитьРеквизитПоДаннымERP(НоваяСтрока, "ВидНачисленияОплатыТрудаДляНУ", структураСтрока, "ВидНачисленияОплатыТрудаДляНУ", Тип("ПеречислениеСсылка.ВидыНачисленийОплатыТрудаДляНУ"), ЗапрашиваемыеОбъекты, "ВидыНачисленийОплатыТрудаДляНУ");

		ЗаполнитьЗначенияСвойств(НоваяСтрока, структураСтрока, "
			|ОблагаетсяЕНВД, 
			|Сумма,
			|ПФРСтраховая,
			|ПФРНакопительная,
			|ПФРПоСуммарномуТарифу,
			|ПФРНаДоплатуЛетчикам,
			|ПФРНаДоплатуШахтерам,
			|ПФРЗаЗанятыхНаПодземныхИВредныхРаботах,
			|ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах,
			|ФСС,
			|ФФОМС,
			|ТФОМС,
			|ФССНесчастныеСлучаи,
			|ПФРДоПредельнойВеличины,
			|ПФРСПревышения,
			|ПФРЗаЗанятыхНаПодземныхИВредныхРаботахБезСпецОценки,
			|ПФРЗаЗанятыхНаПодземныхИВредныхРаботахСпецОценка,
			|ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахБезСпецОценки,
			|ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахСпецОценка");   
	КонецЦикла;	    
	//
	//ТЧ: НачисленныйНДФЛ
	Для Каждого структураСтрока Из структураДокумент.НачисленныйНДФЛ Цикл	
		НоваяСтрока = ДокументОбъект.НачисленныйНДФЛ.Добавить();   
		
		ЗаполнитьРеквизитПоДаннымERP(НоваяСтрока, "ФизическоеЛицо", структураСтрока, "ФизическоеЛицо", , ЗапрашиваемыеОбъекты);  		
		ЗаполнитьРеквизитПоДаннымERP(НоваяСтрока, "ВидОперации", структураСтрока, "ВидОперации", Тип("ПеречислениеСсылка.ВидыОперацийПоЗарплате"), ЗапрашиваемыеОбъекты, "ВидыОперацийПоЗарплате");
		НоваяСтрока.СтатьяРасходов = СтатьяРасходов;
		
		СтруктураНалоговыйОрган = Новый Структура("РегистрацияВНалоговомОргане");
		ЗаполнитьРеквизитПоДаннымERP(СтруктураНалоговыйОрган, "РегистрацияВНалоговомОргане", структураСтрока, "РегистрацияВНалоговомОргане", , ЗапрашиваемыеОбъекты);  
		Если ЗначениеЗаполнено(СтруктураНалоговыйОрган.РегистрацияВНалоговомОргане) Тогда
			НоваяСтрока.КодПоОКАТО = СтруктураНалоговыйОрган.РегистрацияВНалоговомОргане.КодПоОКАТО;
			НоваяСтрока.КодПоОКТМО = СтруктураНалоговыйОрган.РегистрацияВНалоговомОргане.КодПоОКТМО;
			НоваяСтрока.КодНалоговогоОргана = СтруктураНалоговыйОрган.РегистрацияВНалоговомОргане.Код;
			НоваяСтрока.КПП = СтруктураНалоговыйОрган.РегистрацияВНалоговомОргане.КПП;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, структураСтрока, "Сумма");        
	КонецЦикла;	    
	
	//ТЧ: УдержаннаяЗарплата
	Для Каждого структураСтрока Из структураДокумент.УдержаннаяЗарплата Цикл	
		НоваяСтрока = ДокументОбъект.УдержаннаяЗарплата.Добавить();   
		
		ЗаполнитьРеквизитПоДаннымERP(НоваяСтрока, "ФизическоеЛицо", структураСтрока, "ФизическоеЛицо", , ЗапрашиваемыеОбъекты);  		
		ЗаполнитьРеквизитПоДаннымERP(НоваяСтрока, "ВидОперации", структураСтрока, "ВидОперации", Тип("ПеречислениеСсылка.ВидыОперацийПоЗарплате"), ЗапрашиваемыеОбъекты, "ВидыОперацийПоЗарплате");
		//должен быть 73.03 счет
		Если НоваяСтрока.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.УдержаниеЗаОтпуск Тогда
			НоваяСтрока.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.УдержаниеПоПрочимОперациямСРаботниками;	
		КонецЕсли;
		НоваяСтрока.СтатьяРасходов = СтатьяРасходов;
		
		Если УИДЗаполнен(структураСтрока.ПодразделениеПредприятия) Тогда
			Подразделение = НайтиОбъектПоИдентификаторуНов(структураСтрока.ПодразделениеПредприятия, Тип("СправочникСсылка.ПодразделенияОрганизаций"), Новый Структура("Владелец", ДокументОбъект.Организация)); 
			Если Подразделение <> Неопределено Тогда
				НоваяСтрока.Подразделение = Подразделение;	
			Иначе
				СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураДокумент.УИД, структураСтрока.ПодразделениеПредприятия, "Подразделение", XmlТипЗнч(Справочники.ПодразделенияОрганизаций.ПустаяСсылка()).ИмяТипа);
				ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);
			КонецЕсли;
		Иначе
			НоваяСтрока.Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		КонецЕсли;      
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, структураСтрока, "
			|ЯвляетсяОснованиемОформленияКассовогоЧека,
			|ОписаниеУдержанияДляЧека,
			|Сумма");           
	КонецЦикла;	   
	
	//ТЧ: ВыплатаОтпусковЗаСчетРезерва
	Для Каждого структураСтрока Из структураДокумент.НачисленныеОтпускаЗаСчетРезерва Цикл
		НоваяСтрока = ДокументОбъект.ВыплатаОтпусковЗаСчетРезерва.Добавить();   
		
		ЗаполнитьРеквизитПоДаннымERP(НоваяСтрока, "Сотрудник", структураСтрока, "Сотрудник", , ЗапрашиваемыеОбъекты);  		
		ЗаполнитьРеквизитПоДаннымERP(НоваяСтрока, "ВидОперации", структураСтрока, "ВидОперации", Тип("ПеречислениеСсылка.ВидыОперацийПоЗарплате"), ЗапрашиваемыеОбъекты, "ВидыОперацийПоЗарплате");
				
		ЗаполнитьЗначенияСвойств(НоваяСтрока, структураСтрока, "
			|Сумма,
			|СтраховыеВзносы,
			|ФССНесчастныеСлучаи");           
	КонецЦикла;	   
	//
	Если ЗапрашиваемыеОбъекты.Количество() > 0 Тогда
		Возврат;
	Иначе
		ДокументОбъект.ДополнительныеСвойства.Вставить("ЗаполнитьСчетаУчетаПередЗаписью", Истина);
		ЗаписатьДокумент(ДокументОбъект, структураДокумент, ОписаниеОшибок);
	КонецЕсли;   
		
КонецПроцедуры

Процедура ЗагрузитьДокументРасчетовСКонтрагентами(структураДокумент, ОписаниеОшибок, ЗапрашиваемыеОбъекты) 
	
	ДокументСсылка = НайтиОбъектПоИдентификаторуНов(структураДокумент.УИД);	
	
	Если ДокументСсылка <> Неопределено И ОбщегоНазначения.СсылкаСуществует(ДокументСсылка) Тогда
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	Иначе
		ДокументОбъект = Документы.ДокументРасчетовСКонтрагентом.СоздатьДокумент();
		ДокументОбъект.УстановитьСсылкуНового(Документы.ДокументРасчетовСКонтрагентом.ПолучитьСсылку());	
		ЗаписатьИдентификаторВРегистр(ДокументОбъект.ПолучитьСсылкуНового(), структураДокумент.УИД);
	КонецЕсли; 
	
	ЗаполнитьЗначенияСвойств(ДокументОбъект, структураДокумент,
		"Номер,
		|Дата,
		|Комментарий");
	
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "Организация", структураДокумент, "Организация", Тип("СправочникСсылка.Организации"), ЗапрашиваемыеОбъекты);
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "Контрагент", структураДокумент, "Контрагент", Тип("СправочникСсылка.Контрагенты"), ЗапрашиваемыеОбъекты);
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "ВалютаДокумента", структураДокумент, "Валюта", Тип("СправочникСсылка.Валюты"), ЗапрашиваемыеОбъекты);
	//
	ПараметрыДоговора = Новый Структура;
	ПараметрыДоговора.Вставить("ВидДоговора", структураДокумент.ВидДоговора); 
	ПараметрыДоговора.Вставить("Валюта", ДокументОбъект.ВалютаДокумента); 
	ДокументОбъект.ДоговорКонтрагента = НайтиСоздатьОсновнойДоговорКонтрагента(ДокументОбъект.Организация, ДокументОбъект.Контрагент, ПараметрыДоговора);  
	
	Если ЗапрашиваемыеОбъекты.Количество() > 0 Тогда
		Возврат;	
	КонецЕсли;
	
	Попытка
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение 
		мсвСообщений = ПолучитьСообщенияПользователю(Ложь);
		ТекстСообщений = "";
		Для Каждого Сооб из мсвСообщений Цикл
			ТекстСообщений = ТекстСообщений + Сооб.Текст + Символы.ПС;
		КонецЦикла;	      
		ПолноеОписаниеОшибки = ТекстСообщений + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()); 
		ЗаписьЖурналаРегистрации("ОшибкаЗаписи", УровеньЖурналаРегистрации.Ошибка, , , ПолноеОписаниеОшибки); 
		
		ОписаниеОшибок.errorCodeObj = "608";
		ОписаниеОшибок.errorObj = структураДокумент.УИД;
		ОписаниеОшибок.errorDescriptionObj = ПолноеОписаниеОшибки;
	КонецПопытки;  
		
КонецПроцедуры

//Самойлов А.С. Начало 2022-09-19 #
Процедура ЗагрузитьПриобретениеТоваровУслуг(структураДокумент, ОписаниеОшибок, ЗапрашиваемыеОбъекты) 
	
	ДокументСсылка = НайтиОбъектПоИдентификаторуНов(структураДокумент.УИД,Тип("ДокументСсылка.ПоступлениеТоваровУслуг"));	

	Если ДокументСсылка <> Неопределено И ОбщегоНазначения.СсылкаСуществует(ДокументСсылка) Тогда
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		
		СчетФактура = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруПолученный(ДокументСсылка);
		Если СчетФактура <> Неопределено И СчетФактура.Проведен Тогда
			СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
			СчетФактураОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли; 		
	Иначе
		ДокументОбъект = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
		ДокументОбъект.УстановитьСсылкуНового(Документы.ПоступлениеТоваровУслуг.ПолучитьСсылку());	
		ЗаписатьИдентификаторВРегистр(ДокументОбъект.ПолучитьСсылкуНового(), структураДокумент.УИД); 
		ДокументСсылка = ДокументОбъект.ПолучитьСсылкуНового(); 
	КонецЕсли;                                    
	
	ДокументОбъект.ПометкаУдаления = структураДокумент.ПометкаУдаления;
	
	ЗаполнитьЗначенияСвойств(ДокументОбъект,структураДокумент,
		"Номер,
		|Дата,
		|НомерВходящегоДокумента,
		|ДатаВходящегоДокумента,
		|Комментарий");
	
	ДокументОбъект.КурсВзаиморасчетов = структураДокумент.КурсЧислитель;
	ДокументОбъект.КратностьВзаиморасчетов = структураДокумент.КурсЗнаменатель;
	ДокументОбъект.СуммаВключаетНДС = структураДокумент.ЦенаВключаетНДС;
	
	Если структураДокумент.ХозяйственнаяОперация = "ПоступлениеУслугПоАренде" Тогда
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.УслугиАренды;
		ЭтоУслугиАренды = Истина;
	Иначе
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
		ЭтоУслугиАренды = Ложь;
	КонецЕсли;
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "Организация",структураДокумент, "Организация", Тип("СправочникСсылка.Организации"), ЗапрашиваемыеОбъекты);
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "Склад",структураДокумент, "Склад", Тип("СправочникСсылка.Склады"), ЗапрашиваемыеОбъекты);
		
	Если УИДЗаполнен(структураДокумент.Подразделение) Тогда
		Подразделение = НайтиОбъектПоИдентификаторуНов(структураДокумент.Подразделение, Тип("СправочникСсылка.ПодразделенияОрганизаций"), Новый Структура("Владелец", ДокументОбъект.Организация)); 
		Если Подразделение <> Неопределено Тогда
			ДокументОбъект.ПодразделениеОрганизации = Подразделение;	
		Иначе
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураДокумент.УИД, структураДокумент.Подразделение, "Подразделение", XmlТипЗнч(ДокументОбъект.ПодразделениеОрганизации).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);
		КонецЕсли;
	Иначе
		ДокументОбъект.ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	КонецЕсли;	
		
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "Контрагент", структураДокумент,"Контрагент", Тип("СправочникСсылка.Контрагенты"), ЗапрашиваемыеОбъекты);
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "ВалютаДокумента", структураДокумент,"Валюта", , ЗапрашиваемыеОбъекты);
	
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "СчетУчетаРасчетовСКонтрагентом", структураДокумент, "СчетУчетаРасчетов", , ЗапрашиваемыеОбъекты);
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "СчетУчетаРасчетовПоАвансам", структураДокумент, "СчетУчетаАвансов", , ЗапрашиваемыеОбъекты);
	
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "ДоговорКонтрагента", структураДокумент, "Договор", , ЗапрашиваемыеОбъекты);
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ДоговорКонтрагента) Тогда
		ПараметрыДоговора = Новый Структура;
		ПараметрыДоговора.Вставить("ВидДоговора", "СПоставщиком"); 
		ПараметрыДоговора.Вставить("Валюта", ДокументОбъект.ВалютаДокумента);  
		ДокументОбъект.ДоговорКонтрагента = НайтиСоздатьОсновнойДоговорКонтрагента(ДокументОбъект.Организация, ДокументОбъект.Контрагент, ПараметрыДоговора);
	КонецЕсли;
	
	ДокументОбъект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(ДокументОбъект.Организация, ДокументОбъект.Дата);
	
	Если НЕ ПлательщикНДС Тогда
		ДокументОбъект.НДСВключенВСтоимость	= Истина;
	КонецЕсли;
	
	
	ДокументОбъект.Товары.Очистить();
	ДокументОбъект.Услуги.Очистить();   
	
	тзРаспределитьНаСебестоимость = Новый ТаблицаЗначений;
	тзРаспределитьНаСебестоимость.Колонки.Добавить("СтатьяРасходов",Новый ОписаниеТипов("СправочникСсылка.СтатьиЗатрат"));
	тзРаспределитьНаСебестоимость.Колонки.Добавить("ДокументДляРаспределения",Новый ОписаниеТипов("ДокументСсылка.ПоступлениеТоваровУслуг"));
	тзРаспределитьНаСебестоимость.Колонки.Добавить("Сумма",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
	
	Для Каждого структураСтрокаТовар Из структураДокумент.Товары Цикл
		
		Если НЕ структураСтрокаТовар.ЭтоУслуга Тогда
			 	
			новСтрТовар = ДокументОбъект.Товары.Добавить();
			
			ЗаполнитьЗначенияСвойств(новСтрТовар, структураСтрокаТовар,
				"Количество,
				|Цена,
				|Сумма,
				|СуммаНДС");
			
			Если ДокументОбъект.СуммаВключаетНДС Тогда
				новСтрТовар.Сумма = структураСтрокаТовар.СуммаСНДС;
			КонецЕсли;
			
			новСтрТовар.СтавкаНДС = Перечисления.СтавкиНДС[структураСтрокаТовар.СтавкаНДС];
			
			ЗаполнитьРеквизитПоДаннымERP(новСтрТовар, "Номенклатура", структураСтрокаТовар, "Номенклатура", , ЗапрашиваемыеОбъекты);
			
			Если ЗначениеЗаполнено(структураСтрокаТовар.СчетУчета) Тогда
				ЗаполнитьРеквизитПоДаннымERP(новСтрТовар, "СчетУчета", структураСтрокаТовар, "СчетУчета", , ЗапрашиваемыеОбъекты);
			КонецЕсли;
			
 			ЗаполнитьНомерГТД(новСтрТовар, структураСтрокаТовар.НомерГТД, ЗапрашиваемыеОбъекты, структураДокумент.УИД);
			
		Иначе
			
			новСтрТовар = ДокументОбъект.Услуги.Добавить();
					
			ЗаполнитьЗначенияСвойств(новСтрТовар, структураСтрокаТовар,
				"Количество,
				|Цена,
				|Сумма,
				|СуммаНДС");      
			
			новСтрТовар.СтавкаНДС = Перечисления.СтавкиНДС[структураСтрокаТовар.СтавкаНДС];
			
			Если ЭтоУслугиАренды Тогда
				новСтрТовар.Номенклатура = Справочники.Номенклатура.НайтиПоНаименованию("ТипНачисления",Истина);
				
				
				новСтрТовар.ПодразделениеЗатрат = ДокументОбъект.ПодразделениеОрганизации;
				Если ЗначениеЗаполнено(структураСтрокаТовар.СчетУчета) Тогда
					ЗаполнитьРеквизитПоДаннымERP(новСтрТовар, "СчетЗатрат", структураСтрокаТовар, "СчетУчета", , ЗапрашиваемыеОбъекты); 
					ЗаполнитьРеквизитПоДаннымERP(новСтрТовар, "Субконто1", структураСтрокаТовар, "СтатьяРасходов", , ЗапрашиваемыеОбъекты, Справочники.СтатьиЗатрат.ПустаяСсылка());
				Иначе
					новСтрТовар.СчетЗатрат = ПланыСчетов.Хозрасчетный.АрендныеОбязательства;
					новСтрТовар.Субконто1 = ДокументОбъект.Контрагент;
					новСтрТовар.Субконто2 = ДокументОбъект.ДоговорКонтрагента;
				КонецЕсли;
				
				новСтрТовар.СчетЗатратНУ = новСтрТовар.СчетЗатрат;
				новСтрТовар.СубконтоНУ1 = новСтрТовар.Субконто1;
				новСтрТовар.СубконтоНУ2 = новСтрТовар.Субконто2;
				
				новСтрТовар.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымУслугам;
				
				новСтрТовар.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету;				
				
				Продолжить;
			КонецЕсли;
			
			Если ДокументОбъект.СуммаВключаетНДС Тогда
				новСтрТовар.Сумма = структураСтрокаТовар.СуммаСНДС;
			КонецЕсли; 			
						
			ЗаполнитьРеквизитПоДаннымERP(новСтрТовар, "Номенклатура", структураСтрокаТовар, "Номенклатура", , ЗапрашиваемыеОбъекты);
			
			Если ЗначениеЗаполнено(структураСтрокаТовар.СчетУчета) Тогда
				ЗаполнитьРеквизитПоДаннымERP(новСтрТовар, "СчетЗатрат", структураСтрокаТовар, "СчетУчета", , ЗапрашиваемыеОбъекты);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(структураСтрокаТовар.СчетУчетаНДС) Тогда
				ЗаполнитьРеквизитПоДаннымERP(новСтрТовар,"СчетУчетаНДС",структураСтрокаТовар,"СчетУчетаНДС",, ЗапрашиваемыеОбъекты);
			КонецЕсли;      
			
			ЗаполнитьРеквизитПоДаннымERP(новСтрТовар, "Субконто1", структураСтрокаТовар, "СтатьяРасходов", , ЗапрашиваемыеОбъекты, Справочники.СтатьиЗатрат.ПустаяСсылка());

			СтатьяРасходов = НайтиОбъектПоИдентификаторуНов(структураСтрокаТовар.СтатьяРасходов);
			Если СтатьяРасходов = Неопределено Тогда                  				
				СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураДокумент.УИД, структураСтрокаТовар.СтатьяРасходов, "СтатьяРасходов", XmlТипЗнч(Справочники.СтатьиЗатрат.ПустаяСсылка()).ИмяТипа);
				ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта); 
				Продолжить;
			КонецЕсли;
			
			новСтрТовар.Субконто1 = СтатьяРасходов;			
			
			Если структураСтрокаТовар.РаспределитьНаСебестоимость Тогда
				
				Сумма = новСтрТовар.Сумма;
				Если ДокументОбъект.СуммаВключаетНДС Тогда
					Сумма = Сумма - новСтрТовар.СуммаНДС;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(структураСтрокаТовар.ДокументДляРаспределенияРасходов) Тогда
					ДокументДляРаспределения = НайтиОбъектПоИдентификаторуНов(структураСтрокаТовар.ДокументДляРаспределенияРасходов,Тип("ДокументСсылка.ПоступлениеТоваровУслуг"));
					Если ДокументДляРаспределения = Неопределено Тогда                  				
						СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", "", структураСтрокаТовар.ДокументДляРаспределенияРасходов, "ДокументДляРаспределенияРасходов", XmlТипЗнч(Документы.ПоступлениеТоваровУслуг.ПустаяСсылка()).ИмяТипа);
						ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта); 
						Продолжить;
					КонецЕсли;  
				Иначе
					ДокументДляРаспределения = ДокументСсылка;
				КонецЕсли;
				
				строкиРаспределения = тзРаспределитьНаСебестоимость.НайтиСтроки(Новый Структура("СтатьяРасходов,ДокументДляРаспределения", СтатьяРасходов, ДокументДляРаспределения));
				
				Если строкиРаспределения.Количество() > 0 Тогда
					строкаРаспределения = строкиРаспределения[0];
				Иначе
					строкаРаспределения = тзРаспределитьНаСебестоимость.Добавить();
					строкаРаспределения.СтатьяРасходов = СтатьяРасходов;
					строкаРаспределения.ДокументДляРаспределения = ДокументДляРаспределения;
				КонецЕсли;
				
				строкаРаспределения.Сумма = строкаРаспределения.Сумма + Сумма;
				
			КонецЕсли;
						
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗапрашиваемыеОбъекты.Количество() > 0 Тогда
		Возврат;
	Иначе
		ДокументОбъект.ДополнительныеСвойства.Вставить("ЗаполнитьСчетаУчетаПередЗаписью", Истина);
		ЗаписатьДокумент(ДокументОбъект, структураДокумент, ОписаниеОшибок, "Полученный");
		СоздатьРаспределениеНаСебестоимость(ДокументОбъект.Ссылка,тзРаспределитьНаСебестоимость);
	КонецЕсли;
		
КонецПроцедуры 

Процедура СоздатьРаспределениеНаСебестоимость(ДокументПоступление,тзРаспределитьНаСебестоимость)
	
	ЗапросОперацияБух = Новый Запрос;
	ЗапросОперацияБух.Текст =
	"ВЫБРАТЬ
	|	ОперацияБух.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ОперацияБух КАК ОперацияБух
	|ГДЕ
	|	ОперацияБух.Содержание ПОДОБНО ""%"" + &Содержание + ""%""
	|";
	
	ЗапросОперацияБух.УстановитьПараметр("Содержание","{" + ДокументПоступление.УникальныйИдентификатор() + "}");
	
	ВыборкаОперацияБух = ЗапросОперацияБух.Выполнить().Выбрать();
	
	Если ВыборкаОперацияБух.Следующий() Тогда
		ОперацияБухСсылка = ВыборкаОперацияБух.Ссылка;
	Иначе
		ОперацияБухСсылка = Документы.ОперацияБух.ПустаяСсылка();
	КонецЕсли;
		
	Если тзРаспределитьНаСебестоимость.Количество() = 0 Тогда
		Если НЕ ОперацияБухСсылка.Пустая()
			И НЕ ОперацияБухСсылка.ПометкаУдаления Тогда
			ОперацияБух = ОперацияБухСсылка.ПолучитьОбъект();
			ОперацияБух.ПометкаУдаления = Истина;			
			ОперацияБух.Записать();
			ОперацияБух.Движения.Хозрасчетный.Записать(); 
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ОперацияБухСсылка.Пустая() Тогда
		ОперацияБух = Документы.ОперацияБух.СоздатьДокумент();
	Иначе
		ОперацияБух = ОперацияБухСсылка.ПолучитьОбъект();
		ОперацияБух.ПометкаУдаления = Ложь;	
	КонецЕсли;
	
	ОперацияБух.Дата = ДокументПоступление.Дата + 1;
	ОперацияБух.Организация = ДокументПоступление.Организация;
	ОперацияБух.Содержание = "Распределение стоимости услуг на себестоимость товаров по поступлению " + ДокументПоступление.Номер + " от " + Формат(ДокументПоступление.Дата,"ДФ=дд.ММ.гггг") 
		+ " {" + ДокументПоступление.УникальныйИдентификатор() + "}";
	ОперацияБух.Комментарий = "Создан автоматически загрузкой данных из ERP";
	
	Для Каждого стрРаспределить Из тзРаспределитьНаСебестоимость Цикл
		
		СтатьяЗатрат = стрРаспределить.СтатьяРасходов;
		ДокументДляРаспределения = стрРаспределить.ДокументДляРаспределения;
		СуммаКРаспределению = стрРаспределить.Сумма;
		
		СуммаПоТоварам = ДокументДляРаспределения.Товары.Итог("Сумма");
		Если ДокументДляРаспределения.СуммаВключаетНДС Тогда
			СуммаПоТоварам = СуммаПоТоварам - ДокументДляРаспределения.Товары.Итог("СуммаНДС");
		КонецЕсли;
		
		ОсталосьРаспределить = СуммаКРаспределению;
		
		Для Каждого стрТовар Из ДокументДляРаспределения.Товары Цикл
			
			новДвижение = ОперацияБух.Движения.Хозрасчетный.Добавить();
			
			новДвижение.Период = ОперацияБух.Дата;
			новДвижение.Организация = ДокументПоступление.Организация;
            //новДвижение.ПодразделениеДт = ДокументПоступление.ПодразделениеОрганизации;
			новДвижение.ПодразделениеКт = ДокументПоступление.ПодразделениеОрганизации;
			
			новДвижение.СчетДт = стрТовар.СчетУчета;
			новДвижение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура] = стрТовар.Номенклатура;
			новДвижение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады] = ДокументДляРаспределения.Склад;
			
			новДвижение.СчетКт = ПланыСчетов.Хозрасчетный.ИздержкиОбращения;
			новДвижение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат] = СтатьяЗатрат;
			
			СуммаТовар = стрТовар.Сумма;
			Если ДокументДляРаспределения.СуммаВключаетНДС Тогда
				СуммаТовар = СуммаТовар - стрТовар.СуммаНДС;
			КонецЕсли;
			
			новДвижение.Сумма = СуммаКРаспределению * СуммаТовар / СуммаПоТоварам;
			новДвижение.СуммаНУДт = новДвижение.Сумма;
			новДвижение.СуммаНУДт = новДвижение.Сумма;
			ОсталосьРаспределить = ОсталосьРаспределить - новДвижение.Сумма;			
			
		КонецЦикла;		
		
		Если ОсталосьРаспределить <> 0 Тогда
			новДвижение.Сумма =  новДвижение.Сумма + ОсталосьРаспределить;
			новДвижение.СуммаНУДт = новДвижение.Сумма;
			новДвижение.СуммаНУДт = новДвижение.Сумма;
		КонецЕсли;
		
	КонецЦикла;   
	
	ОперацияБух.Записать();
	ОперацияБух.Движения.Хозрасчетный.Записать();	
		
КонецПроцедуры

Процедура ЗагрузитьРеализацию(структураДокумент, ОписаниеОшибок, ЗапрашиваемыеОбъекты)
		
	ДокументОбъект = НайтиСоздатьОбъектДокумента(структураДокумент.УИД,"РеализацияТоваровУслуг");                                    

	Если НЕ ДокументОбъект.ЭтоНовый() Тогда
		СчетФактура = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруВыданныйНаРеализацию(ДокументОбъект.Ссылка);
		Если СчетФактура <> Неопределено И СчетФактура.Проведен Тогда
			СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
			СчетФактураОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли;
	КонецЕсли;
	
	ДокументОбъект.ПометкаУдаления = структураДокумент.ПометкаУдаления;
	
	ЗаполнитьЗначенияСвойств(ДокументОбъект,структураДокумент,
		"Номер,
		|Дата,
		|Комментарий");
	
	ДокументОбъект.КурсВзаиморасчетов = структураДокумент.КурсЧислитель;
	ДокументОбъект.КратностьВзаиморасчетов = структураДокумент.КурсЗнаменатель;
	ДокументОбъект.СуммаВключаетНДС = структураДокумент.ЦенаВключаетНДС; 
		
	Комиссия = ?(структураДокумент.ХозяйственнаяОперация = "ПередачаНаКомиссию", Истина, Ложь);
	ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
	
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "Организация",структураДокумент, "Организация", Тип("СправочникСсылка.Организации"), ЗапрашиваемыеОбъекты);
		
	Если УИДЗаполнен(структураДокумент.Подразделение) Тогда
		Подразделение = НайтиОбъектПоИдентификаторуНов(структураДокумент.Подразделение, Тип("СправочникСсылка.ПодразделенияОрганизаций"), Новый Структура("Владелец", ДокументОбъект.Организация)); 
		Если Подразделение <> Неопределено Тогда
			ДокументОбъект.ПодразделениеОрганизации = Подразделение;	
		Иначе
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураДокумент.УИД, структураДокумент.Подразделение, "Подразделение", XmlТипЗнч(ДокументОбъект.ПодразделениеОрганизации).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);
		КонецЕсли;
	Иначе
		ДокументОбъект.ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	КонецЕсли;	
		
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "Контрагент", структураДокумент,"Контрагент", Тип("СправочникСсылка.Контрагенты"), ЗапрашиваемыеОбъекты);
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "ВалютаДокумента", структураДокумент,"Валюта", , ЗапрашиваемыеОбъекты);
	
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "СчетУчетаРасчетовСКонтрагентом", структураДокумент, "СчетУчетаРасчетов", , ЗапрашиваемыеОбъекты);
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "СчетУчетаРасчетовПоАвансам", структураДокумент, "СчетУчетаАвансов", , ЗапрашиваемыеОбъекты);
	
	ПараметрыДоговора = Новый Структура;     
	ПараметрыДоговора.Вставить("ВидДоговора", ?(Комиссия, "СКомиссионером", "СПокупателем"));
	ПараметрыДоговора.Вставить("Валюта", ДокументОбъект.ВалютаДокумента); 
	
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "ДоговорКонтрагента", структураДокумент, "Договор", , ЗапрашиваемыеОбъекты);
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ДоговорКонтрагента) Тогда
		ДокументОбъект.ДоговорКонтрагента = НайтиСоздатьОсновнойДоговорКонтрагента(ДокументОбъект.Организация, ДокументОбъект.Контрагент, ПараметрыДоговора);
	КонецЕсли;
	
	ДокументОбъект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(ДокументОбъект.Организация, ДокументОбъект.Дата);
	
	Если ПлательщикНДС Тогда
		ДокументОбъект.ЭтоУниверсальныйДокумент = Истина;
		ДокументОбъект.ДокументБезНДС = Ложь;
	Иначе
		ДокументОбъект.ЭтоУниверсальныйДокумент = Ложь;
		ДокументОбъект.ДокументБезНДС = Истина;
	КонецЕсли;
	
	ДокументОбъект.Товары.Очистить();
	ДокументОбъект.Услуги.Очистить();    
	
	СкладДокумента = "";
	мсвСтрокиКПеремещениюНаСкладОтгрузки = Новый Массив; 
	
	Для Каждого структураСтрокаТовар Из структураДокумент.Товары Цикл
		
		Если НЕ УИДЗаполнен(СкладДокумента)
			И УИДЗаполнен(структураСтрокаТовар.Склад) Тогда
			СкладДокумента = структураСтрокаТовар.Склад;
		КонецЕсли;                                      
		
		Если УИДЗаполнен(СкладДокумента)
			И УИДЗаполнен(структураСтрокаТовар.Склад)
			И СкладДокумента <> структураСтрокаТовар.Склад Тогда
			мсвСтрокиКПеремещениюНаСкладОтгрузки.Добавить(структураСтрокаТовар);	
		КонецЕсли;
		
		Если НЕ структураСтрокаТовар.ЭтоУслуга Тогда
			 	
			новСтрТовар = ДокументОбъект.Товары.Добавить();
			
			ЗаполнитьЗначенияСвойств(новСтрТовар, структураСтрокаТовар,
				"Количество,
				|Цена,
				|Сумма,
				|СуммаНДС");
			
			Если ДокументОбъект.СуммаВключаетНДС Тогда
				новСтрТовар.Сумма = структураСтрокаТовар.СуммаСНДС;
			КонецЕсли;
			
			новСтрТовар.СтавкаНДС = Перечисления.СтавкиНДС[структураСтрокаТовар.СтавкаНДС];
			
			ЗаполнитьРеквизитПоДаннымERP(новСтрТовар, "Номенклатура", структураСтрокаТовар, "Номенклатура", , ЗапрашиваемыеОбъекты);
			
			Если ЗначениеЗаполнено(структураСтрокаТовар.СчетУчета) Тогда
				ЗаполнитьРеквизитПоДаннымERP(новСтрТовар, "СчетУчета", структураСтрокаТовар, "СчетУчета", , ЗапрашиваемыеОбъекты);
			КонецЕсли;			
			Если ЗначениеЗаполнено(структураСтрокаТовар.СчетУчетаНДСПоРеализации) Тогда
				ЗаполнитьРеквизитПоДаннымERP(новСтрТовар, "СчетУчетаНДСПоРеализации", структураСтрокаТовар, "СчетУчетаНДСПоРеализации", , ЗапрашиваемыеОбъекты);
			КонецЕсли;
			Если ЗначениеЗаполнено(структураСтрокаТовар.СчетДоходов) Тогда
				ЗаполнитьРеквизитПоДаннымERP(новСтрТовар, "СчетДоходов", структураСтрокаТовар, "СчетДоходов", , ЗапрашиваемыеОбъекты); 
				Если БухгалтерскийУчетВызовСервераПовтИсп.НаСчетеВедетсяУчетПоНоменклатурнымГруппам(новСтрТовар.СчетДоходов) Тогда
					новСтрТовар.Субконто = БухгалтерскийУчетВызовСервераПовтИсп.ОсновнаяНоменклатурнаяГруппа();
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(структураСтрокаТовар.СчетРасходов) Тогда
				ЗаполнитьРеквизитПоДаннымERP(новСтрТовар, "СчетРасходов", структураСтрокаТовар, "СчетРасходов", , ЗапрашиваемыеОбъекты);
			КонецЕсли;
			
 			ЗаполнитьНомерГТД(новСтрТовар, структураСтрокаТовар.НомерГТД, ЗапрашиваемыеОбъекты, структураДокумент.УИД);
			
		Иначе
			
			новСтрУслуга = ДокументОбъект.Услуги.Добавить();
					
			ЗаполнитьЗначенияСвойств(новСтрУслуга, структураСтрокаТовар,
				"Количество,
				|Цена,
				|Сумма,
				|СуммаНДС");
			
			Если ДокументОбъект.СуммаВключаетНДС Тогда
				новСтрУслуга.Сумма = структураСтрокаТовар.СуммаСНДС;
			КонецЕсли;
			
			новСтрУслуга.СтавкаНДС = Перечисления.СтавкиНДС[структураСтрокаТовар.СтавкаНДС];
						
			ЗаполнитьРеквизитПоДаннымERP(новСтрУслуга, "Номенклатура", структураСтрокаТовар, "Номенклатура", , ЗапрашиваемыеОбъекты);
			
			Если ЗначениеЗаполнено(структураСтрокаТовар.СчетУчетаНДСПоРеализации) Тогда
				ЗаполнитьРеквизитПоДаннымERP(новСтрТовар, "СчетУчетаНДСПоРеализации", структураСтрокаТовар, "СчетУчетаНДСПоРеализации", , ЗапрашиваемыеОбъекты);
			КонецЕсли;
			Если ЗначениеЗаполнено(структураСтрокаТовар.СчетДоходов) Тогда
				ЗаполнитьРеквизитПоДаннымERP(новСтрТовар, "СчетДоходов", структураСтрокаТовар, "СчетДоходов", , ЗапрашиваемыеОбъекты); 
				Если БухгалтерскийУчетВызовСервераПовтИсп.НаСчетеВедетсяУчетПоНоменклатурнымГруппам(новСтрТовар.СчетДоходов) Тогда
					новСтрТовар.Субконто = БухгалтерскийУчетВызовСервераПовтИсп.ОсновнаяНоменклатурнаяГруппа();
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(структураСтрокаТовар.СчетРасходов) Тогда
				ЗаполнитьРеквизитПоДаннымERP(новСтрТовар, "СчетРасходов", структураСтрокаТовар, "СчетРасходов", , ЗапрашиваемыеОбъекты);
			КонецЕсли; 
									
		КонецЕсли;		
		
	КонецЦикла;   
	
	Если УИДЗаполнен(СкладДокумента) Тогда
		ДокументОбъект.Склад = НайтиОбъектПоИдентификаторуНов(СкладДокумента);		
	КонецЕсли;  
	
	СформироватьПеремещенияНаСкладОтгузки(ДокументОбъект,структураДокумент.УИД,мсвСтрокиКПеремещениюНаСкладОтгрузки);
	
	Если ЗапрашиваемыеОбъекты.Количество() > 0 Тогда
		Возврат;
	Иначе
		ДокументОбъект.ДополнительныеСвойства.Вставить("ЗаполнитьСчетаУчетаПередЗаписью", Истина);
		ЗаписатьДокумент(ДокументОбъект, структураДокумент, ОписаниеОшибок, "Выданный");	
	КонецЕсли; 	
	
КонецПроцедуры

Процедура ЗагрузитьКорректировкуРеализации(структураДокумент, ОписаниеОшибок, ЗапрашиваемыеОбъекты)
	
	ДокументОбъект = НайтиСоздатьОбъектДокумента(структураДокумент.УИД,"КорректировкаРеализации");                                    

	Если УИДЗаполнен(структураДокумент.ДокументОснование) Тогда
		ДокументОснование = НайтиОбъектПоИдентификаторуНов(структураДокумент.ДокументОснование); 
		Если ДокументОснование = Неопределено Тогда
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураДокумент.УИД, структураДокумент.ДокументОснование, "ДокументОснование", "");
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;//Вообще это некорректная ситуация, но вроде как мы сюда никогда не попадём
	КонецЕсли;
	
	Если ДокументОснование.Дата >= '20210101' Тогда
		
		ДокументОбъект.Заполнить(ДокументОснование);
		ДокументОбъект.Номер = структураДокумент.Номер;
		ДокументОбъект.Дата = структураДокумент.Дата;
		
		Для Каждого стрРасхождения Из структураДокумент.Расхождения Цикл
			
			Номенклатура = НайтиОбъектПоИдентификаторуНов(стрРасхождения.Номенклатура);
			Если Номенклатура = Неопределено Тогда
				СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураДокумент.УИД, стрРасхождения.Номенклатура, "Номенклатура", "");
				ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);
				Продолжить;
			КонецЕсли; 
			
			структураНомерГТД = Новый Структура("НомерГТД,СтранаПроисхождения");			
			ЗаполнитьНомерГТД(структураНомерГТД,стрРасхождения.НомерГТД,ЗапрашиваемыеОбъекты,структураДокумент.УИД);
			
			Если ДокументОбъект.СуммаВключаетНДС Тогда
				Сумма = стрРасхождения.СуммаСНДС;
			Иначе
				Сумма = стрРасхождения.Сумма;	
			КонецЕсли;
			
			СтрокаТоваровНайдена = Ложь;
			Для Каждого стрТовары Из ДокументОбъект.Товары Цикл
				Если стрТовары.Номенклатура = Номенклатура
					И стрТовары.НомерГТД = структураНомерГТД.НомерГТД
					И стрТовары.КоличествоДоИзменения - стрРасхождения.Количество >= 0
					И стрТовары.СуммаДоИзменения - Сумма >= 0 Тогда
					
					СтрокаТоваровНайдена = Истина;				
					Прервать; 
				КонецЕсли;
			КонецЦикла; 
			
			Если НЕ СтрокаТоваровНайдена Тогда
				Для Каждого стрТовары Из ДокументОбъект.Услуги Цикл
					Если стрТовары.Номенклатура = Номенклатура
						И стрТовары.КоличествоДоИзменения - стрРасхождения.Количество >= 0
						И стрТовары.СуммаДоИзменения - Сумма >= 0 Тогда
						
						СтрокаТоваровНайдена = Истина;				
						Прервать; 
					КонецЕсли;
				КонецЦикла; 
			КонецЕсли;
			
			Если СтрокаТоваровНайдена Тогда 
			
				стрТовары.Количество = стрТовары.КоличествоДоИзменения - стрРасхождения.Количество;
				стрТовары.Сумма = стрТовары.СуммаДоИзменения - Сумма;
				стрТовары.СуммаНДС = стрТовары.СуммаНДСДоИзменения - стрРасхождения.СуммаНДС; 
				
			КонецЕсли;
				
		КонецЦикла;
		
	Иначе       
		
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение;
			
		ДокументОбъект.Номер = структураДокумент.Номер;
		ДокументОбъект.Дата = структураДокумент.Дата;
		
		ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "Организация",структураДокумент, "Организация", Тип("СправочникСсылка.Организации"), ЗапрашиваемыеОбъекты);
		
		ДокументОбъект.ДокументРеализации = ДокументОснование;
		ДокументОбъект.ИсправляемыйДокументРеализации = ДокументОснование;
		
		ДокументОбъект.Контрагент = ДокументОснование.Контрагент;
		ДокументОбъект.ДоговорКонтрагента = ДокументОснование.ДоговорКонтрагента;
		ДокументОбъект.ВалютаДокумента = ДокументОснование.ВалютаДокумента; 
		
		ДокументОбъект.СуммаВключаетНДС = Истина;
		ДокументОбъект.ПризнаватьЗачитыватьАванс = Истина;
		ДокументОбъект.НомерИсходногоДокумента = ДокументОснование.Номер;
		ДокументОбъект.ДатаИсходногоДокумента = ДокументОснование.Дата;
		
		ДокументОбъект.ИсходныйДокументРеализации = ДокументОснование;
		
		ДокументОбъект.КорректироватьНДС = Истина;
			
		ДокументОбъект.Товары.Очистить();
		
		Для Каждого стрРасхождения Из структураДокумент.Расхождения Цикл
			
			стрТовары = ДокументОбъект.Товары.Добавить();
			
			Номенклатура = НайтиОбъектПоИдентификаторуНов(стрРасхождения.Номенклатура);
			Если Номенклатура = Неопределено Тогда
				СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураДокумент.УИД, стрРасхождения.Номенклатура, "Номенклатура", "");
				ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);
				Продолжить;
			КонецЕсли;
			
			Если ДокументОбъект.СуммаВключаетНДС Тогда
				Сумма = стрРасхождения.СуммаСНДС;
			Иначе
				Сумма = стрРасхождения.Сумма;	
			КонецЕсли;
			
			стрТовары.Номенклатура = Номенклатура;
			стрТовары.КоличествоДоИзменения = стрРасхождения.Количество; 
			стрТовары.СуммаДоИзменения = Сумма;
			стрТовары.СуммаНДСДоИзменения = стрРасхождения.СуммаНДС;  
			
			стрТовары.СтавкаНДС = Перечисления.СтавкиНДС[стрРасхождения.СтавкаНДС]; 		
			
		КонецЦикла;		
		
	КонецЕсли;  
	
	Если ЗапрашиваемыеОбъекты.Количество() > 0 Тогда
		Возврат;
	Иначе
		ДокументОбъект.ДополнительныеСвойства.Вставить("ЗаполнитьСчетаУчетаПередЗаписью", Истина);
		Если ДокументОснование.Дата < '20210101' Тогда
			ДокументОбъект.РучнаяКорректировка = Истина; 
			ЗаписатьДокумент(ДокументОбъект, структураДокумент, ОписаниеОшибок); 
			ЗагрузитьПроводкиДокумента(ДокументОбъект, структураДокумент.Проводки, ЗапрашиваемыеОбъекты);
		Иначе                                                                     
			ЗаписатьДокумент(ДокументОбъект, структураДокумент, ОписаниеОшибок, "Выданный"); 
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьВозвратТоваровОтПокупателя(структураДокумент, ОписаниеОшибок, ЗапрашиваемыеОбъекты) 

	ДокументСсылка = НайтиОбъектПоИдентификаторуНов(структураДокумент.УИД,Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"));	

	ДокументОбъект = НайтиСоздатьОбъектДокумента(структураДокумент.УИД,"ВозвратТоваровОтПокупателя");                                    
	
	ДокументОбъект.ПометкаУдаления = структураДокумент.ПометкаУдаления;
	
	ЗаполнитьЗначенияСвойств(ДокументОбъект,структураДокумент,
		"Номер,
		|Дата,
		|Комментарий");
	
	ДокументОбъект.КурсВзаиморасчетов = 1;
	ДокументОбъект.КратностьВзаиморасчетов = 1;
	ДокументОбъект.СуммаВключаетНДС = структураДокумент.ЦенаВключаетНДС;
	
	Комиссия = ?(структураДокумент.ХозяйственнаяОперация = "ВозвратТоваровЧерезКомиссионера", Истина, Ложь);
	ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.Товары;
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "Организация",структураДокумент, "Организация", Тип("СправочникСсылка.Организации"), ЗапрашиваемыеОбъекты);
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "Склад",структураДокумент, "Склад", Тип("СправочникСсылка.Склады"), ЗапрашиваемыеОбъекты);
		
	Если УИДЗаполнен(структураДокумент.Подразделение) Тогда
		Подразделение = НайтиОбъектПоИдентификаторуНов(структураДокумент.Подразделение, Тип("СправочникСсылка.ПодразделенияОрганизаций"), Новый Структура("Владелец", ДокументОбъект.Организация)); 
		Если Подразделение <> Неопределено Тогда
			ДокументОбъект.ПодразделениеОрганизации = Подразделение;	
		Иначе
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураДокумент.УИД, структураДокумент.Подразделение, "Подразделение", XmlТипЗнч(ДокументОбъект.ПодразделениеОрганизации).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);
		КонецЕсли;
	Иначе
		ДокументОбъект.ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	КонецЕсли;	
		
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "Контрагент", структураДокумент,"Контрагент", Тип("СправочникСсылка.Контрагенты"), ЗапрашиваемыеОбъекты);
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "ВалютаДокумента", структураДокумент,"Валюта", , ЗапрашиваемыеОбъекты);
	
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "СчетУчетаРасчетовСКонтрагентом", структураДокумент, "СчетУчетаРасчетов", , ЗапрашиваемыеОбъекты);
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "СчетУчетаРасчетовПоАвансам", структураДокумент, "СчетУчетаАвансов", , ЗапрашиваемыеОбъекты);
	
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "Сделка", структураДокумент, "ДокументОснование", , ЗапрашиваемыеОбъекты);
	
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "ДоговорКонтрагента", структураДокумент, "Договор", , ЗапрашиваемыеОбъекты);
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ДоговорКонтрагента) Тогда
		ПараметрыДоговора = Новый Структура;
		ПараметрыДоговора.Вставить("ВидДоговора", ?(Комиссия, "СКомиссионером", "СПокупателем")); 
		ПараметрыДоговора.Вставить("Валюта", ДокументОбъект.ВалютаДокумента);  
		ДокументОбъект.ДоговорКонтрагента = НайтиСоздатьОсновнойДоговорКонтрагента(ДокументОбъект.Организация, ДокументОбъект.Контрагент, ПараметрыДоговора);
	КонецЕсли;
	//	
	//ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(ДокументОбъект.Организация, ДокументОбъект.Дата);
	//
	//Если НЕ ПлательщикНДС Тогда
	//	ДокументОбъект.НДСВключенВСтоимость	= Истина;
	//КонецЕсли; 
	
	ДокументОбъект.Товары.Очистить();
			
	Для Каждого структураСтрокаТовар Из структураДокумент.Товары Цикл
		
		новСтрТовар = ДокументОбъект.Товары.Добавить();
			
		ЗаполнитьЗначенияСвойств(новСтрТовар, структураСтрокаТовар,
			"Количество,
			|Цена,
			|Сумма,
			|СуммаНДС");
		
		Если ДокументОбъект.СуммаВключаетНДС Тогда
			новСтрТовар.Сумма = структураСтрокаТовар.СуммаСНДС;
		КонецЕсли;
		
		новСтрТовар.СтавкаНДС = Перечисления.СтавкиНДС[структураСтрокаТовар.СтавкаНДС];
		
		ЗаполнитьРеквизитПоДаннымERP(новСтрТовар, "Номенклатура", структураСтрокаТовар, "Номенклатура", , ЗапрашиваемыеОбъекты);
		
		Если ЗначениеЗаполнено(структураСтрокаТовар.СчетУчета) Тогда
			ЗаполнитьРеквизитПоДаннымERP(новСтрТовар, "СчетУчета", структураСтрокаТовар, "СчетУчета", , ЗапрашиваемыеОбъекты);
		КонецЕсли;			
		Если ЗначениеЗаполнено(структураСтрокаТовар.СчетУчетаНДСПоРеализации) Тогда
			ЗаполнитьРеквизитПоДаннымERP(новСтрТовар, "СчетУчетаНДСПоРеализации", структураСтрокаТовар, "СчетУчетаНДСПоРеализации", , ЗапрашиваемыеОбъекты);
		КонецЕсли;
		Если ЗначениеЗаполнено(структураСтрокаТовар.СчетДоходов) Тогда
			ЗаполнитьРеквизитПоДаннымERP(новСтрТовар, "СчетДоходов", структураСтрокаТовар, "СчетДоходов", , ЗапрашиваемыеОбъекты); 
			Если БухгалтерскийУчетВызовСервераПовтИсп.НаСчетеВедетсяУчетПоНоменклатурнымГруппам(новСтрТовар.СчетДоходов) Тогда
				новСтрТовар.Субконто = БухгалтерскийУчетВызовСервераПовтИсп.ОсновнаяНоменклатурнаяГруппа();
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(структураСтрокаТовар.СчетРасходов) Тогда
			ЗаполнитьРеквизитПоДаннымERP(новСтрТовар, "СчетРасходов", структураСтрокаТовар, "СчетРасходов", , ЗапрашиваемыеОбъекты);
		КонецЕсли;
		
 		ЗаполнитьНомерГТД(новСтрТовар, структураСтрокаТовар.НомерГТД, ЗапрашиваемыеОбъекты, структураДокумент.УИД);
											
	КонецЦикла;
	
	Если ЗапрашиваемыеОбъекты.Количество() > 0 Тогда
		Возврат;
	Иначе
		Если ДокументОбъект.Сделка.Дата < '20210101' Тогда
			ДокументОбъект.РучнаяКорректировка = Истина;
		КонецЕсли;
		ДокументОбъект.ДополнительныеСвойства.Вставить("ЗаполнитьСчетаУчетаПередЗаписью", Истина);
		ЗаписатьДокумент(ДокументОбъект, структураДокумент, ОписаниеОшибок); 
		Если ДокументОбъект.Сделка.Дата < '20210101' Тогда
			ЗагрузитьПроводкиДокумента(ДокументОбъект, структураДокумент.Проводки, ЗапрашиваемыеОбъекты);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

Процедура СформироватьПеремещенияНаСкладОтгузки(ДокументРеализация,УИДРеализации,мсвСтрокиДляПеремещения)
	
	КомментарийПеремещения = "{Перемещение на склад отгрузки по реализации: " + УИДРеализации + "}";
	
	ЗапросПеремещения = Новый Запрос;
	ЗапросПеремещения.Текст =
	"ВЫБРАТЬ
	|	ПеремещениеТоваров.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|ГДЕ
	|	ПеремещениеТоваров.Комментарий ПОДОБНО ""%"" + &Комментарий + ""%""
	|";
	
	ЗапросПеремещения.УстановитьПараметр("Комментарий",КомментарийПеремещения);
	
	мсвСуществующиеПеремещения = ЗапросПеремещения.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Для Каждого Перемещение Из мсвСуществующиеПеремещения Цикл
		
		Если НЕ Перемещение.ПометкаУдаления Тогда
			ПеремещениеОбъект = Перемещение.ПолучитьОбъект();
			ПеремещениеОбъект.ПометкаУдаления = Истина;    
			ПеремещениеОбъект.Товары.Очистить();
			ПеремещениеОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли;
		
	КонецЦикла;  
	
	Если мсвСтрокиДляПеремещения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	тзТоварыКПеремещению = Новый ТаблицаЗначений;
	тзТоварыКПеремещению.Колонки.Добавить("Склад");
	тзТоварыКПеремещению.Колонки.Добавить("Номенклатура");
	тзТоварыКПеремещению.Колонки.Добавить("Количество");
	
	мсвСкладыДляПеремещений = Новый Массив;
	
	Для Каждого структураСтрокаКПеремещению Из мсвСтрокиДляПеремещения Цикл
		Если мсвСкладыДляПеремещений.Найти(структураСтрокаКПеремещению.Склад) = Неопределено Тогда
			мсвСкладыДляПеремещений.Добавить(структураСтрокаКПеремещению.Склад);
		КонецЕсли;
		новСтр = тзТоварыКПеремещению.Добавить();
		ЗаполнитьЗначенияСвойств(новСтр,структураСтрокаКПеремещению);      	
	КонецЦикла;
	
	ИспользованоСуществующихПеремещений = 0;
	
	Для Каждого СкладИзУТ Из мсвСкладыДляПеремещений Цикл
		
		Если ИспользованоСуществующихПеремещений < мсвСуществующиеПеремещения.Количество() Тогда
			ПеремещениеОбъект = мсвСуществующиеПеремещения[ИспользованоСуществующихПеремещений].ПолучитьОбъект();
			ИспользованоСуществующихПеремещений = ИспользованоСуществующихПеремещений + 1;
		Иначе
			ПеремещениеОбъект = Документы.ПеремещениеТоваров.СоздатьДокумент(); 			
		КонецЕсли;                                                             
		
		ПеремещениеОбъект.ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ПередачаМеждуСкладами;
		ПеремещениеОбъект.Дата = ДокументРеализация.Дата - 1;
		ПеремещениеОбъект.ПометкаУдаления = Ложь;
		ПеремещениеОбъект.Комментарий = КомментарийПеремещения;
		ПеремещениеОбъект.Организация = ДокументРеализация.Организация;                    
		ПеремещениеОбъект.ПодразделениеОтправитель = ДокументРеализация.ПодразделениеОрганизации;
		ПеремещениеОбъект.ПодразделениеПолучатель = ДокументРеализация.ПодразделениеОрганизации;
		ПеремещениеОбъект.СкладПолучатель = ДокументРеализация.Склад;
		
		ПеремещениеОбъект.СкладОтправитель = НайтиОбъектПоИдентификаторуНов(СкладИзУТ,Тип("СправочникСсылка.Склады"));
			
		строкиТЗТоваровКПеремещению = тзТоварыКПеремещению.НайтиСтроки(Новый Структура("Склад",СкладИзУТ));
		
		Для Каждого строкаТзТоваровКПеремещению Из строкиТЗТоваровКПеремещению Цикл
			
			новСтрТовары = ПеремещениеОбъект.Товары.Добавить();
			новСтрТовары.Номенклатура = НайтиОбъектПоИдентификаторуНов(строкаТзТоваровКПеремещению.Номенклатура,Тип("СправочникСсылка.Номенклатура"));
			новСтрТовары.Количество = строкаТзТоваровКПеремещению.Количество;
			новСтрТовары.КоличествоМест = строкаТзТоваровКПеремещению.Количество; 
			новСтрТовары.Коэффициент = 1;	
			
		КонецЦикла;
		
		Если ПеремещениеОбъект.ЭтоНовый() Тогда
			ПеремещениеОбъект.УстановитьНовыйНомер("Р");
		КонецЕсли;
		ПеремещениеОбъект.ДополнительныеСвойства.Вставить("ЗаполнитьСчетаУчетаПередЗаписью", Истина);
		ПеремещениеОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
	КонецЦикла; 	
	
КонецПроцедуры

Процедура ЗагрузитьПеремещениеТоваров(структураДокумент, ОписаниеОшибок, ЗапрашиваемыеОбъекты)
		
	ДокументОбъект = НайтиСоздатьОбъектДокумента(структураДокумент.УИД,"ПеремещениеТоваров");                                    
	
	ДокументОбъект.ПометкаУдаления = структураДокумент.ПометкаУдаления;
	
	ЗаполнитьЗначенияСвойств(ДокументОбъект,структураДокумент,
		"Номер,
		|Дата,
		|Комментарий");
	
	ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ПередачаМеждуСкладами;
	
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "Организация",структураДокумент, "Организация", Тип("СправочникСсылка.Организации"), ЗапрашиваемыеОбъекты);
		
	Если УИДЗаполнен(структураДокумент.Подразделение) Тогда
		Подразделение = НайтиОбъектПоИдентификаторуНов(структураДокумент.Подразделение, Тип("СправочникСсылка.ПодразделенияОрганизаций"), Новый Структура("Владелец", ДокументОбъект.Организация)); 
		Если Подразделение <> Неопределено Тогда
			ДокументОбъект.ПодразделениеОтправитель = Подразделение;
			ДокументОбъект.ПодразделениеПолучатель = Подразделение;
		Иначе
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураДокумент.УИД, структураДокумент.Подразделение, "Подразделение", XmlТипЗнч(ДокументОбъект.ПодразделениеОрганизации).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);
		КонецЕсли;
	Иначе
		ДокументОбъект.ПодразделениеОтправитель = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		ДокументОбъект.ПодразделениеПолучатель = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	КонецЕсли;	
	
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "СкладОтправитель",структураДокумент, "СкладОтправитель", Тип("СправочникСсылка.Склады"), ЗапрашиваемыеОбъекты);
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "СкладПолучатель",структураДокумент, "СкладПолучатель", Тип("СправочникСсылка.Склады"), ЗапрашиваемыеОбъекты);
		
	ДокументОбъект.Товары.Очистить();
		
	Для Каждого структураСтрокаТовар Из структураДокумент.Товары Цикл
		
		новСтрТовары = ДокументОбъект.Товары.Добавить();
			
		ЗаполнитьРеквизитПоДаннымERP(новСтрТовары, "Номенклатура", структураСтрокаТовар, "Номенклатура", , ЗапрашиваемыеОбъекты);
		
		Если ЗначениеЗаполнено(структураСтрокаТовар.СчетУчета) Тогда
			ЗаполнитьРеквизитПоДаннымERP(новСтрТовары, "СчетУчета", структураСтрокаТовар, "СчетУчета", , ЗапрашиваемыеОбъекты);
			ЗаполнитьРеквизитПоДаннымERP(новСтрТовары, "НовыйСчетУчета", структураСтрокаТовар, "СчетУчета", , ЗапрашиваемыеОбъекты);
		КонецЕсли;
		
		новСтрТовары.Количество = структураСтрокаТовар.Количество;
		новСтрТовары.КоличествоМест = структураСтрокаТовар.Количество; 
		новСтрТовары.Коэффициент = 1;
			
	КонецЦикла;   
		
	Если ЗапрашиваемыеОбъекты.Количество() > 0 Тогда
		Возврат;
	Иначе
		ДокументОбъект.ДополнительныеСвойства.Вставить("ЗаполнитьСчетаУчетаПередЗаписью", Истина);
		ЗаписатьДокумент(ДокументОбъект, структураДокумент, ОписаниеОшибок);	
	КонецЕсли; 	
	
КонецПроцедуры

Процедура ЗагрузитьТребованиеНакладную(структураДокумент, ОписаниеОшибок, ЗапрашиваемыеОбъекты)
	
	ДокументОбъект = НайтиСоздатьОбъектДокумента(структураДокумент.УИД,"ТребованиеНакладная");                                    
	
	ДокументОбъект.ПометкаУдаления = структураДокумент.ПометкаУдаления;
	
	ЗаполнитьЗначенияСвойств(ДокументОбъект,структураДокумент,
		"Номер,
		|Дата,
		|Комментарий");
	
	ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийРасходМатериалов.ИспользованиеМатериалов;
	ДокументОбъект.СчетаУчетаЗатратВТаблице = структураДокумент.СчетаУчетаЗатратВТаблице;
	
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "Организация",структураДокумент, "Организация", Тип("СправочникСсылка.Организации"), ЗапрашиваемыеОбъекты);
		
	Если УИДЗаполнен(структураДокумент.Подразделение) Тогда
		Подразделение = НайтиОбъектПоИдентификаторуНов(структураДокумент.Подразделение, Тип("СправочникСсылка.ПодразделенияОрганизаций"), Новый Структура("Владелец", ДокументОбъект.Организация)); 
		Если Подразделение <> Неопределено Тогда
			ДокументОбъект.ПодразделениеОрганизации = Подразделение;
		Иначе
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураДокумент.УИД, структураДокумент.Подразделение, "Подразделение", XmlТипЗнч(ДокументОбъект.ПодразделениеОрганизации).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);
		КонецЕсли;
	Иначе
		ДокументОбъект.ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	КонецЕсли;	
	
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "Склад",структураДокумент, "Склад", Тип("СправочникСсылка.Склады"), ЗапрашиваемыеОбъекты);
	    
	Если НЕ структураДокумент.СчетаУчетаЗатратВТаблице Тогда 
		
		ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "СчетЗатрат", структураДокумент, "СчетУчета", , ЗапрашиваемыеОбъекты);	
		
		ДокументОбъект.ПодразделениеЗатрат = ДокументОбъект.ПодразделениеОрганизации;
		
		Если ЗначениеЗаполнено(структураДокумент.Субконто1) Тогда
			ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "Субконто1", структураДокумент, "Субконто1", , ЗапрашиваемыеОбъекты);	
		КонецЕсли;  
		
	КонецЕсли;
	
	ДокументОбъект.НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
	ДокументОбъект.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету;
		
	ДокументОбъект.Материалы.Очистить();
		
	Для Каждого структураСтрокаТовар Из структураДокумент.Материалы Цикл
		
		новСтрТовары = ДокументОбъект.Материалы.Добавить();
			
		ЗаполнитьРеквизитПоДаннымERP(новСтрТовары, "Номенклатура", структураСтрокаТовар, "Номенклатура", , ЗапрашиваемыеОбъекты);
		
		Если ЗначениеЗаполнено(структураСтрокаТовар.СчетУчета) Тогда
			ЗаполнитьРеквизитПоДаннымERP(новСтрТовары, "Счет", структураСтрокаТовар, "СчетУчета", , ЗапрашиваемыеОбъекты);
		КонецЕсли;
		
		новСтрТовары.Количество = структураСтрокаТовар.Количество;
		новСтрТовары.КоличествоМест = структураСтрокаТовар.Количество; 
		новСтрТовары.Коэффициент = 1;  
		
		ЗаполнитьНомерГТД(новСтрТовары, структураСтрокаТовар.НомерГТД, ЗапрашиваемыеОбъекты, структураДокумент.УИД);  
		
		Если структураДокумент.СчетаУчетаЗатратВТаблице Тогда
			
			ЗаполнитьРеквизитПоДаннымERP(новСтрТовары, "СчетЗатрат", структураСтрокаТовар, "СчетЗатрат", , ЗапрашиваемыеОбъекты);
			ЗаполнитьРеквизитПоДаннымERP(новСтрТовары, "СтатьяЗатрат", структураСтрокаТовар, "СтатьяЗатрат", , ЗапрашиваемыеОбъекты); 
			новСтрТовары.ПодразделениеЗатрат = ДокументОбъект.ПодразделениеОрганизации;
			
		КонецЕсли;
			
	КонецЦикла;   
			
	Если ЗапрашиваемыеОбъекты.Количество() > 0 Тогда
		Возврат;
	Иначе
		ДокументОбъект.ДополнительныеСвойства.Вставить("ЗаполнитьСчетаУчетаПередЗаписью", Истина);
		ЗаписатьДокумент(ДокументОбъект, структураДокумент, ОписаниеОшибок);	
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗагрузитьОтчетКомиссионераОПродажах(структураДокумент, ОписаниеОшибок, ЗапрашиваемыеОбъекты)
		
	ДокументОбъект = НайтиСоздатьОбъектДокумента(структураДокумент.УИД,"ОтчетКомиссионераОПродажах");                                    

	ДокументОбъект.ПометкаУдаления = структураДокумент.ПометкаУдаления;
	
	ЗаполнитьЗначенияСвойств(ДокументОбъект,структураДокумент,
		"Номер,
		|Дата,
		|Комментарий");
	
	ДокументОбъект.КурсВзаиморасчетов = 1;
	ДокументОбъект.КратностьВзаиморасчетов = 1;
	ДокументОбъект.СуммаВключаетНДС = структураДокумент.ЦенаВключаетНДС; 
		
	ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийОтчетКомиссионера.ОтчетОПродажах;
	
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "Организация",структураДокумент, "Организация", Тип("СправочникСсылка.Организации"), ЗапрашиваемыеОбъекты);
		
	Если УИДЗаполнен(структураДокумент.Подразделение) Тогда
		Подразделение = НайтиОбъектПоИдентификаторуНов(структураДокумент.Подразделение, Тип("СправочникСсылка.ПодразделенияОрганизаций"), Новый Структура("Владелец", ДокументОбъект.Организация)); 
		Если Подразделение <> Неопределено Тогда
			ДокументОбъект.ПодразделениеОрганизации = Подразделение;	
		Иначе
			СтруктураЗапрашиваемогоОбъекта = Новый Структура("УИДВладельца, УИДОбъекта, КлючВСтруктуре, ТипПриемника", структураДокумент.УИД, структураДокумент.Подразделение, "Подразделение", XmlТипЗнч(ДокументОбъект.ПодразделениеОрганизации).ИмяТипа);
			ЗапрашиваемыеОбъекты.Добавить(СтруктураЗапрашиваемогоОбъекта);
		КонецЕсли;
	Иначе
		ДокументОбъект.ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	КонецЕсли;	
		
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "Контрагент", структураДокумент,"Контрагент", Тип("СправочникСсылка.Контрагенты"), ЗапрашиваемыеОбъекты);
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "ВалютаДокумента", структураДокумент,"Валюта", , ЗапрашиваемыеОбъекты);
	
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "СчетУчетаРасчетовСКонтрагентом", структураДокумент, "СчетУчетаРасчетовСКонтрагентом", , ЗапрашиваемыеОбъекты);
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "СчетУчетаРасчетовПоАвансамПолученным", структураДокумент, "СчетУчетаРасчетовПоАвансамПолученным", , ЗапрашиваемыеОбъекты);     
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "СчетУчетаРасчетовПоАвансамВыданным", структураДокумент, "СчетУчетаРасчетовПоАвансамВыданным", , ЗапрашиваемыеОбъекты);
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "СчетУчетаЗатрат", структураДокумент, "СчетУчетаЗатрат", , ЗапрашиваемыеОбъекты);
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "Субконто1", структураДокумент, "Субконто1", , ЗапрашиваемыеОбъекты);
	
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "СчетУчетаРасчетовЗаПосредническиеУслуги", структураДокумент, "СчетУчетаРасчетовЗаПосредническиеУслуги", , ЗапрашиваемыеОбъекты);
	
	ДокументОбъект.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымУслугам;
	
	ПараметрыДоговора = Новый Структура;     
	ПараметрыДоговора.Вставить("ВидДоговора", "СКомиссионером");
	ПараметрыДоговора.Вставить("Валюта", ДокументОбъект.ВалютаДокумента); 
	
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "ДоговорКонтрагента", структураДокумент, "Договор", , ЗапрашиваемыеОбъекты);
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ДоговорКонтрагента) Тогда
		ДокументОбъект.ДоговорКонтрагента = НайтиСоздатьОсновнойДоговорКонтрагента(ДокументОбъект.Организация, ДокументОбъект.Контрагент, ПараметрыДоговора);
	КонецЕсли;
	
	ДокументОбъект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;   
	
	//ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "СпособРасчетаКомиссионногоВознаграждения", структураДокумент, "СпособРасчетаКомиссионногоВознаграждения", Тип("ПеречислениеСсылка.СпособыРасчетаКомиссионногоВознаграждения") , ЗапрашиваемыеОбъекты, "СпособыРасчетаКомиссионногоВознаграждения" );
	ДокументОбъект.СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтРазностиСуммПродажиИПоступления;
	ДокументОбъект.ПроцентКомиссионногоВознаграждения = структураДокумент.ПроцентКомиссионногоВознаграждения;
	ДокументОбъект.УдержатьВознаграждение = структураДокумент.УдержатьВознаграждение;
	ДокументОбъект.СуммаВознаграждения = структураДокумент.СуммаВознаграждения;   
	ЗаполнитьРеквизитПоДаннымERP(ДокументОбъект, "СтавкаНДСВознаграждения", структураДокумент, "СтавкаНДСВознаграждения", Тип("ПеречислениеСсылка.СтавкиНДС") , ЗапрашиваемыеОбъекты, "СтавкиНДС");
	
	ДокументОбъект.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.Распределяется; 
	ДокументОбъект.НаВозвратыВыставляетсяКорректировочныйСчетФактура = Истина;
	ДокументОбъект.ВыписыватьСчетаФактурыСводно = Истина;
	ДокументОбъект.ПодразделениеЗатрат = ДокументОбъект.ПодразделениеОрганизации;
	
	
	ДокументОбъект.Товары.Очистить();
	ДокументОбъект.Покупатели.Очистить(); 
	
	новПокупатель = ДокументОбъект.Покупатели.Добавить();
	новПокупатель.Покупатель = ДокументОбъект.Контрагент;
	новПокупатель.КлючСтроки = 1;
	
	Для Каждого структураСтрокаТовар Из структураДокумент.Товары Цикл
		
		новСтрТовар = ДокументОбъект.Товары.Добавить();
		новСтрТовар.КлючСтроки = 1;
		
		ЗаполнитьЗначенияСвойств(новСтрТовар, структураСтрокаТовар,
			"Количество,
			|Цена,
			|Сумма,
			|ЦенаПередачи,
			|СуммаПередачи, 
			|СуммаВознаграждения,
			|СуммаНДС");
		
		
		новСтрТовар.Коэффициент = 1;
		новСтрТовар.СтавкаНДС = Перечисления.СтавкиНДС[структураСтрокаТовар.СтавкаНДС];
		
		ЗаполнитьРеквизитПоДаннымERP(новСтрТовар, "Номенклатура", структураСтрокаТовар, "Номенклатура", , ЗапрашиваемыеОбъекты);
		
		Если ЗначениеЗаполнено(структураСтрокаТовар.СчетУчета) Тогда
			ЗаполнитьРеквизитПоДаннымERP(новСтрТовар, "СчетУчета", структураСтрокаТовар, "СчетУчета", , ЗапрашиваемыеОбъекты);
		КонецЕсли;			
		Если ЗначениеЗаполнено(структураСтрокаТовар.СчетУчетаНДСПоРеализации) Тогда
			ЗаполнитьРеквизитПоДаннымERP(новСтрТовар, "СчетУчетаНДСПоРеализации", структураСтрокаТовар, "СчетУчетаНДСПоРеализации", , ЗапрашиваемыеОбъекты);
		КонецЕсли;
		Если ЗначениеЗаполнено(структураСтрокаТовар.СчетДоходов) Тогда
			ЗаполнитьРеквизитПоДаннымERP(новСтрТовар, "СчетДоходов", структураСтрокаТовар, "СчетДоходов", , ЗапрашиваемыеОбъекты); 
			Если БухгалтерскийУчетВызовСервераПовтИсп.НаСчетеВедетсяУчетПоНоменклатурнымГруппам(новСтрТовар.СчетДоходов) Тогда
				новСтрТовар.Субконто = БухгалтерскийУчетВызовСервераПовтИсп.ОсновнаяНоменклатурнаяГруппа();
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(структураСтрокаТовар.СчетРасходов) Тогда
			ЗаполнитьРеквизитПоДаннымERP(новСтрТовар, "СчетРасходов", структураСтрокаТовар, "СчетРасходов", , ЗапрашиваемыеОбъекты);
		КонецЕсли;
		
 		ЗаполнитьНомерГТД(новСтрТовар, структураСтрокаТовар.НомерГТД, ЗапрашиваемыеОбъекты, структураДокумент.УИД);
		
		СоответствиеСчетовУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(
			ДокументОбъект.Организация, новСтрТовар.Номенклатура, Справочники.Склады.ПустаяСсылка(), ДокументОбъект.Дата, Ложь);
			
		Если ТипЗнч(СоответствиеСчетовУчета) = Тип("Структура") Тогда
			Если НЕ ЗначениеЗаполнено(новСтрТовар.СчетУчета) Тогда
				новСтрТовар.СчетУчета = СоответствиеСчетовУчета.СчетПередачи;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(новСтрТовар.СчетДоходов) Тогда
				новСтрТовар.СчетДоходов = СоответствиеСчетовУчета.СчетДоходов;
				Если БухгалтерскийУчетВызовСервераПовтИсп.НаСчетеВедетсяУчетПоНоменклатурнымГруппам(новСтрТовар.СчетДоходов) Тогда
					новСтрТовар.Субконто = БухгалтерскийУчетВызовСервераПовтИсп.ОсновнаяНоменклатурнаяГруппа();
				КонецЕсли; 
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(новСтрТовар.СчетРасходов) Тогда
				новСтрТовар.СчетРасходов = СоответствиеСчетовУчета.СчетРасходов;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(новСтрТовар.СчетУчетаНДСПоРеализации) Тогда
				новСтрТовар.СчетУчетаНДСПоРеализации = СоответствиеСчетовУчета.СчетУчетаНДСПродажи;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;   
	
	Если ЗапрашиваемыеОбъекты.Количество() > 0 Тогда
		Возврат;
	Иначе
		ДокументОбъект.ДополнительныеСвойства.Вставить("ЗаполнитьСчетаУчетаПередЗаписью", Истина);
		ЗаписатьДокумент(ДокументОбъект, структураДокумент, ОписаниеОшибок, "Выданный");	
	КонецЕсли; 	
	
КонецПроцедуры
//Самойлов А.С. Конец  2022-09-19

#КонецОбласти

#Область ЗагрузкаОстатков
Процедура ЗагрузитьВводОстатков(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты)
	
	ВводОбъект = Документы.ВводНачальныхОстатков.СоздатьДокумент();
	ВводОбъект.Дата = Дата(2020,12,31,23,59,59);
	ВводОбъект.ОтражатьВБухгалтерскомУчете = Истина;
	ВводОбъект.ОтражатьВНалоговомУчете = Истина;
	ВводОбъект.ОтражатьПоСпециальнымРегистрам = Истина;

	СчетОстатков = ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора", структураОбъект.Счет);
	ВспомогательныйСчет = ПланыСчетов.Хозрасчетный.Вспомогательный;
	
	НайденныеОбъекты = НайтиОбъектПоИдентификатору(структураОбъект.Организация);
  	ВводОбъект.Организация = НайтиОрганизацию(НайденныеОбъекты); 
	
	ЭтоИП = СтрНайти(ВводОбъект.Организация.Наименование, "ИП") > 0;
	
	Если УИДЗаполнен(структураОбъект.Подразделение) Тогда
		НайденныеОбъекты = НайтиОбъектПоИдентификатору(структураОбъект.Подразделение);
		Для Каждого Стр Из НайденныеОбъекты Цикл
			Если Стр.Ссылка.Владелец = ВводОбъект.Организация Тогда
				ВводОбъект.ПодразделениеОрганизации = Стр.Ссылка;
				Прервать;
			КонецЕсли;	
        КонецЦикла;
	КонецЕсли;	
	ВводОбъект.Комментарий = "Ввод остатков по счету " + СчетОстатков + " по " + ВводОбъект.Организация + ?(ЗначениеЗаполнено(ВводОбъект.ПодразделениеОрганизации)," (" + ВводОбъект.ПодразделениеОрганизации +")","");	
	ВводОбъект.РазделУчета = ОпределитьРазделУчета(СчетОстатков);
		
	Табчасть = Неопределено;	
	ИмяТЧ = "";
	
	Если ВводОбъект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НезавершенноеПроизводство
			ИЛИ ВводОбъект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ДенежныеСредства
			ИЛИ ВводОбъект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСУчредителями
			ИЛИ ВводОбъект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Капитал
			ИЛИ ВводОбъект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ОтложенныеНалоговыеАктивыОбязательства
			ИЛИ ВводОбъект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ПрочиеСчетаБухгалтерскогоУчета
			ИЛИ ВводОбъект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.СпецоснасткаВЭксплуатации Тогда

		Табчасть = ВводОбъект.БухСправка;
		ИмяТЧ = "БухСправка";
		
	ИначеЕсли ВводОбъект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПоставщикамиИПодрядчиками
			ИЛИ ВводОбъект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПокупателямиИЗаказчиками
			ИЛИ ВводОбъект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПрочимиДебиторамиИКредиторами Тогда
			
		Табчасть = ВводОбъект.РасчетыСКонтрагентами;
		ИмяТЧ = "РасчетыСКонтрагентами";
		
	ИначеЕсли ВводОбъект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям
			ИЛИ ВводОбъект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным
			ИЛИ ВводОбъект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСНачисленный Тогда
	
		Табчасть = ВводОбъект.ДанныеПоНДС;
		ИмяТЧ = "ДанныеПоНДС";
		
	ИначеЕсли ВводОбъект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ОсновныеСредства Тогда
		
		Табчасть = ВводОбъект.ОС;
		ИмяТЧ = "ОС";
		
	ИначеЕсли ВводОбъект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НематериальныеАктивыИНИОКР Тогда
		
		Табчасть = ВводОбъект.НМА;
		ИмяТЧ = "НМА";
		
	ИначеЕсли ВводОбъект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ТоварыОтгруженные Тогда
		
		Табчасть = ВводОбъект.МПЗОтгруженные;
		ИмяТЧ = "МПЗОтгруженные";
		
	ИначеЕсли ВводОбъект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасходыБудущихПериодов Тогда
		
		Табчасть = ВводОбъект.РасходыБудущихПериодов;
		ИмяТЧ = "РасходыБудущихПериодов";
		
	ИначеЕсли ВводОбъект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыПоНалогамИСборам Тогда
		
		Табчасть = ВводОбъект.РасчетыПоНалогамИСборам;	
		ИмяТЧ = "РасчетыПоНалогамИСборам";
		
	ИначеЕсли ВводОбъект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПодотчетнымиЛицами Тогда
		
		Табчасть = ВводОбъект.РасчетыСПодотчетнымиЛицами;
		ИмяТЧ = "РасчетыСПодотчетнымиЛицами";
		
	ИначеЕсли ВводОбъект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПерсоналомПоОплатеТрудаИДепонентам Тогда
		
		Табчасть = ВводОбъект.РасчетыПоЗаработнойПлате;
		ИмяТЧ = "РасчетыПоЗаработнойПлате";
		
	ИначеЕсли ВводОбъект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ПрочиеРасходыНалоговогоУчетаУСНиИП Тогда
		
		Табчасть = ВводОбъект.ДопРасходыУСН;
		ИмяТЧ = "ДопРасходыУСН";
		
	ИначеЕсли ВводОбъект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеВложения 
		ИЛИ ВводОбъект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Материалы Тогда
		
		Табчасть = ВводОбъект.НоменклатураНаСкладе;
		ИмяТЧ = "НоменклатураНаСкладе";
		
	ИначеЕсли ВводОбъект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Товары
		ИЛИ ВводОбъект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ГотоваяПродукцияИПолуфабрикаты Тогда
		
		//!!??
		//НоменклатураНаСкладе
		//Топливо
		//МатериалыПереданныеВПереработку
		//СпецодеждаИСпецоснасткаВЭксплуатации
		//ТоварыВРозничнойТорговлеАТТ
		//ТоварыВРозничнойТорговлеНТТ
		
		Если СчетОстатков.КодБыстрогоВыбора = "41К" ИЛИ СчетОстатков.КодБыстрогоВыбора = "4101" Тогда

			Табчасть = ВводОбъект.НоменклатураНаСкладе;
			ИмяТЧ = "НоменклатураНаСкладе"	
			
		КонецЕсли;	
		
	КонецЕсли;	
		
	//ДвиженияХоз = ВводОбъект.Движения.Хозрасчетный;
	//Нстр = ДвиженияХоз.Добавить();
	//Нстр.СчетДт = СчетОстатков;
	Сообщить(ИмяТЧ);

	Для Каждого Стр Из структураОбъект.Остатки Цикл
		
		//Нстр = ДвиженияХоз.Добавить();
		//Нстр.Активность = Истина;
		//Нстр.Период = ВводОбъект.Дата;
		//ЗаполнитьЗначенияСвойств(Нстр, Стр);
		//Нстр.Организация = ВводОбъект.Организация;
		//Нстр.ПодразделениеДт = ВводОбъект.ПодразделениеОрганизации;
		//Нстр.СчетДт = СчетОстатков;
		//Если Не СчетОстатков.Забалансовый Тогда
		//	Нстр.СчетКт = ВспомогательныйСчет;
		//КонецЕсли;	
				
		НСтр = Табчасть.Добавить();
		Попытка
			НСтр.СчетУчета = СчетОстатков;			
		Исключение
		КонецПопытки;
		ЗаполнитьЗначенияСвойств(НСтр, Стр); 
		
		Если Стр.Свойство("Валюта") И УИДЗаполнен(Стр.Валюта) Тогда
			НайденныеОбъекты = НайтиОбъектПоИдентификатору(Стр.Валюта);
			//Нстр.ВалютаДт = НайденныеОбъекты[0].Ссылка;
			НСтр.Валюта = НайденныеОбъекты[0].Ссылка;
		КонецЕсли;
		
		Контрагент = Неопределено;
		Договор = Неопределено;
		
		Если ИмяТЧ = "РасходыБудущихПериодов" ИЛИ ИмяТЧ = "БухСправка" Тогда

			НомерСубконто = 1;
			Для Каждого СК из СчетОстатков.ВидыСубконто Цикл
				
				Если СтрНайти(Стр["ТипСубконто" + НомерСубконто], "Enum") > 0 Тогда
					НСтр["Субконто" + НомерСубконто] = Перечисления[Сред(Стр["ТипСубконто" + НомерСубконто], 9, СтрДлина(Стр["ТипСубконто" + НомерСубконто]))][Стр["ПредставлениеСубконто" + НомерСубконто]];			
					НомерСубконто = НомерСубконто + 1;  
					Продолжить;
				КонецЕсли;				
				
				Если Не Стр.Свойство("Субконто" + НомерСубконто) Тогда
					Прервать;
				КонецЕсли;	
				УИДСубконто = Стр["Субконто" + НомерСубконто];
				Если УИДЗаполнен(УИДСубконто) Тогда
					Если СтрНайти(Стр["ТипСубконто" + НомерСубконто], "DocumentRef") > 0 Тогда
						НСтр["Субконто" + НомерСубконто] = НайтиСоздатьДокументРасчетовСКонтрагентом(ВводОбъект.Организация, Контрагент, Договор, Стр["ПредставлениеСубконто"+НомерСубконто]);	
					Иначе		
						НайденныеОбъекты = НайтиОбъектПоИдентификатору(УИДСубконто);			
						//Нстр.СубконтоДт[Ск.Ключ] = НайденныеОбъекты[0].Ссылка;
						Если Стр["ТипСубконто" + НомерСубконто] = "CatalogRef.Организации" ИЛИ Стр["ТипСубконто" + НомерСубконто] = "CatalogRef.Контрагенты" Тогда     
							НСтр["Субконто" + НомерСубконто] = НайтиКонтрагента(НайденныеОбъекты);
							Контрагент = НСтр["Субконто" + НомерСубконто]; 
						Иначе	
							НСтр["Субконто" + НомерСубконто] = НайденныеОбъекты[0].Ссылка; 
						КонецЕсли;	                                                        
						Если ТипЗнч(НСтр["Субконто" + НомерСубконто]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
							Договор = НСтр["Субконто" + НомерСубконто]; 
						КонецЕсли;	
					КонецЕсли;	
				КонецЕсли;
				НомерСубконто = НомерСубконто + 1;
			КонецЦикла;	
			
		КонецЕсли;
		
		Если ИмяТЧ = "РасходыБудущихПериодов" Тогда
			НСтр.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписано;
		КонецЕсли;	
		
		Если ИмяТЧ = "РасходыБудущихПериодов" ИЛИ ИмяТЧ = "БухСправка" Тогда
            //!!
			Если ЭтоИП Тогда
				НСтр.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются; //!!
			Иначе
				НСтр.ОтражениеВУСН = Перечисления.ОтражениеВУСН.НеПринимаются; //!!
			КонецЕсли;	
		КонецЕсли;		
		
		Если ИмяТЧ = "РасчетыСКонтрагентами" Тогда
			
			Если Нстр.СуммаКт <> 0 Тогда
				Нстр.Сумма = 0;
			КонецЕсли;	
			
			Если УИДЗаполнен(Стр.Субконто1) Тогда
				НайденныеОбъекты = НайтиОбъектПоИдентификатору(Стр.Субконто1);			
			    НСтр.Контрагент = НайтиКонтрагента(НайденныеОбъекты);
				Контрагент = НСтр.Контрагент;
			КонецЕсли;
			
			Если Стр.Свойство("Субконто2") И УИДЗаполнен(Стр.Субконто2) Тогда
				Если СтрНайти(Стр.ТипСубконто2, "DocumentRef") > 0 Тогда
					НСтр.Документ = НайтиСоздатьДокументРасчетовСКонтрагентом(ВводОбъект.Организация, Контрагент, Договор);	
				ИначеЕсли СтрНайти(Стр.ТипСубконто2, "Договор") > 0 Тогда
					НайденныеОбъекты = НайтиОбъектПоИдентификатору(Стр.Субконто2);			
				    НСтр.ДоговорКонтрагента = НайденныеОбъекты[0].Ссылка;
					Договор = НСтр.ДоговорКонтрагента;					
				КонецЕсли;	
			КонецЕсли;
			
			Если Стр.Свойство("Субконто3") И УИДЗаполнен(Стр.Субконто3) Тогда
				Если СтрНайти(Стр.ТипСубконто3, "DocumentRef") > 0 Тогда
					НСтр.Документ = НайтиСоздатьДокументРасчетовСКонтрагентом(ВводОбъект.Организация, Контрагент, Договор);
				КонецЕсли;	
			КонецЕсли;
						
		КонецЕсли;
		
		Если ИмяТЧ = "ДанныеПоНДС" Тогда
			
			Если УИДЗаполнен(Стр.Субконто1) Тогда
				НайденныеОбъекты = НайтиОбъектПоИдентификатору(Стр.Субконто1);			
			    НСтр.Контрагент = НайтиКонтрагента(НайденныеОбъекты);
				Контрагент = НСтр.Контрагент;
			КонецЕсли;
			
			Комментарий = "";
			Если Стр.Субконто2 <> "" И (СчетОстатков.КодБыстрогоВыбора = "76АВ" ИЛИ СчетОстатков.КодБыстрогоВыбора = "1903" ИЛИ СчетОстатков.КодБыстрогоВыбора = "1904") Тогда
				Комментарий = Стр.ПредставлениеСубконто2;
			КонецЕсли;			
			
			Если СчетОстатков.КодБыстрогоВыбора = "76АВ" Тогда
				Если Стр.Сумма <> Стр.НДС Тогда
					НСтр.НДС = Стр.Сумма;
					НСтр.СуммаБезНДС = Стр.Сумма / Стр.НДС * Стр.СуммаБезНДС;
				КонецЕсли;	
			КонецЕсли;		
			
			НСтр.НомерСФ = СокрЛП(НСтр.НомерСФ);
			
			Пока СтрДлина(НСтр.НомерСФ) < 12 Цикл //!!
				НСтр.НомерСФ = НСтр.НомерСФ + "_";
			КонецЦикла;	
			
			НСтр.СчетФактура = НайтиСоздатьДокументРасчетовСКонтрагентом(ВводОбъект.Организация, Контрагент, Договор, Комментарий);			
			Если Стр.Свойство("СтавкаНДС") Тогда
				НСтр.СтавкаНДС = Перечисления.СтавкиНДС[Стр.СтавкаНДС];
			КонецЕсли;
			НСтр.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные;
			НСтр.КодВидаОперации = "02"; 
			
		КонецЕсли;	
		
		Если ИмяТЧ = "ОС" Тогда
			
			Если УИДЗаполнен(Стр.Субконто1) Тогда //Основное средство
				НайденныеОбъекты = НайтиОбъектПоИдентификатору(Стр.Субконто1);
				Нстр.ОсновноеСредство = НайденныеОбъекты[0].Ссылка; 
				Нстр.ИнвентарныйНомерРегл = НайденныеОбъекты[0].Ссылка.Код; 
				
				Нстр.ПервоначальнаяСтоимостьБУ = Стр.Сумма;
				Нстр.ПервоначальнаяСтоимостьНУ = Стр.Сумма; 
				//     
				Если ЗначениеЗаполнено(Стр.НомерДокументаПринятияКУчету) Тогда
					Нстр.НомерДокументаПринятияКУчетуРегл = Стр.НомерДокументаПринятияКУчету; 
					Нстр.ДатаПринятияКУчетуРегл = Дата(Лев(Стр.ДатаДокументаПринятияКУчету, 4), Сред(Стр.ДатаДокументаПринятияКУчету, 6, 2), Сред(Стр.ДатаДокументаПринятияКУчету, 9, 2));
					Нстр.НазваниеДокументаПринятияКУчетуРегл = Стр.ВидДокументаПринятияКУчету;
				КонецЕсли;
				//
				Нстр.НакопленнаяАмортизацияБУ = -Стр.СуммаАмортизация;
				Нстр.НакопленнаяАмортизацияНУ = -Стр.СуммаНУАмортизация;
				
				Нстр.НачислятьАмортизациюБУ = Истина;
				Нстр.НачислятьАмортизациюНУ = Истина;
				
				АмортизацияСчет2001 = Справочники.СпособыОтраженияРасходовПоАмортизации.НайтиПоНаименованию("Амортизация (счет 20.01)", Истина); 
				Нстр.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.Линейный;    
				Нстр.СпособОтраженияРасходовПоАмортизации = АмортизацияСчет2001; 
				
				Нстр.СпособПоступленияРегл = Перечисления.СпособыПоступленияАктивов[Стр.СпособПоступления];
				//
				Нстр.СрокИспользованияДляВычисленияАмортизацииБУ = Стр.СрокИспользованияБУ;
				Нстр.СрокПолезногоИспользованияБУ = Стр.СрокИспользованияБУ;
				Нстр.СрокПолезногоИспользованияНУ = Стр.СрокИспользованияНУ;
				
				Нстр.СчетАмортизацииБУ = ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора", Стр.КодБыстрогоДоступаСчетАмортизации);
				Нстр.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора", Стр.КодБыстрогоДоступаСчетУчета);
				
				Нстр.ТекущаяСтоимостьБУ = Стр.Сумма;
				Нстр.ТекущаяСтоимостьНУ = Стр.Сумма; 
				
				Нстр.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС[Стр.ПорядокУчетаБУ];
				Нстр.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации;
				
				Нстр.СостояниеПринятияКУчетуРегл = Справочники.СобытияОС.НайтиПоНаименованию("Принятие к учету с вводом в эксплуатацию", Истина);	
				
				Если УИДЗаполнен(Стр.ДокументЛизингаКонтрагент) Тогда
					КонтрагентЛизинга = НайтиОбъектПоИдентификатору(Стр.ДокументЛизингаКонтрагент);
					Нстр.Контрагент = КонтрагентЛизинга[0].Ссылка; 
					//
					ДоговорЛизинга = НайтиОбъектПоИдентификатору(Стр.ДокументЛизингаДоговор);
					Нстр.ДоговорКонтрагента = ДоговорЛизинга[0].Ссылка;
					
					Нстр.СпособОтраженияРасходовПоАренднымПлатежам = АмортизацияСчет2001;
					Нстр.КорректировкаСтоимостиНУ = Стр.СуммаНУКорректировка; 
				КонецЕсли;
				Нстр.СпециальныйКоэффициентНУ = Стр.СпециальныйКоэффициентНУ;
				
			КонецЕсли;
			
		КонецЕсли;	
		
		Если ИмяТЧ = "РасчетыПоЗаработнойПлате" Тогда
			НайденныеОбъекты = НайтиОбъектПоИдентификатору(Стр.Субконто1);
			Нстр.РаботникОрганизации = НайденныеОбъекты[0].Ссылка;
			Нстр.ПериодРегистрации = Дата(2020, 12, 01, 0,0,0);
			Нстр.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк;
			
			НайденныеОбъекты = НайтиОбъектПоИдентификатору(Стр.Сотрудник);
			Нстр.Сотрудник = НайденныеОбъекты[0].Ссылка;
		КонецЕсли;	
		
		Если ИмяТЧ = "РасчетыПоНалогамИСборам" Тогда
			
			Если Нстр.СуммаКт <> 0 Тогда
				Нстр.Сумма = 0;
			КонецЕсли;	

			Если ЭтоИП Тогда
				НСтр.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются; //!!
			Иначе
				НСтр.ОтражениеВУСН = Перечисления.ОтражениеВУСН.НеПринимаются; //!!
			КонецЕсли;	
			
			Если СчетОстатков.КодБыстрогоВыбора = "6911" 
					ИЛИ СчетОстатков.КодБыстрогоВыбора = "69065"
					ИЛИ СчетОстатков.КодБыстрогоВыбора = "69031"
					ИЛИ СчетОстатков.КодБыстрогоВыбора = "69027"
					ИЛИ СчетОстатков.КодБыстрогоВыбора = "69021"
					ИЛИ СчетОстатков.КодБыстрогоВыбора = "6901"
					ИЛИ СчетОстатков.КодБыстрогоВыбора = "6811"
					ИЛИ СчетОстатков.КодБыстрогоВыбора = "6807"
					ИЛИ СчетОстатков.КодБыстрогоВыбора = "68041"
					ИЛИ СчетОстатков.КодБыстрогоВыбора = "6802"
					ИЛИ СчетОстатков.КодБыстрогоВыбора = "68011" Тогда
				Нстр.ВидПлатежаВБюджет = Перечисления.ВидыПлатежейВГосБюджет[Стр.ПредставлениеСубконто1];
			КонецЕсли;	
			
			Если СчетОстатков.КодБыстрогоВыбора = "69065" И ЗначениеЗаполнено(Стр.ПредставлениеСубконто2) Тогда
				Нстр.УдалитьВидСтраховогоВзносаИП = Перечисления.УдалитьВидыСтраховыхВзносовИП[Стр.ПредставлениеСубконто2];
			КонецЕсли;	
			
			Если (СчетОстатков.КодБыстрогоВыбора = "6811" 
					ИЛИ СчетОстатков.КодБыстрогоВыбора = "6807"
					ИЛИ СчетОстатков.КодБыстрогоВыбора = "68011")				
					И УИДЗаполнен(Стр.Субконто2) Тогда
				НайденныеОбъекты = НайтиОбъектПоИдентификатору(Стр.Субконто2);					
				Нстр.РегистрацияВНалоговомОргане = НайденныеОбъекты[0].Ссылка;
			КонецЕсли;	
			
			Если СчетОстатков.КодБыстрогоВыбора = "68041" Тогда
				Если ЗначениеЗаполнено(Стр.ПредставлениеСубконто2) Тогда
					Нстр.УровеньБюджета = Перечисления.УровниБюджетов[Стр.ПредставлениеСубконто2];
				КонецЕсли;
				Если ЗначениеЗаполнено(Стр.Субконто3) Тогда
					НайденныеОбъекты = НайтиОбъектПоИдентификатору(Стр.Субконто3);					
					Нстр.РегистрацияВНалоговомОргане = НайденныеОбъекты[0].Ссылка;
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
		
		Если ИмяТЧ = "МПЗОтгруженные" Тогда
			
			Если СчетОстатков.КодБыстрогоВыбора = "4501" Тогда
				Если УИДЗаполнен(Стр.Субконто1) Тогда
					НайденныеОбъекты = НайтиОбъектПоИдентификатору(Стр.Субконто1);
					Нстр.Покупатель = НайтиКонтрагента(НайденныеОбъекты);
					Нстр.ДокументОтгрузки = НайтиСоздатьДокументРасчетовСКонтрагентом(ВводОбъект.Организация, Нстр.Покупатель, Договор, "Передача на комиссию");//!!не уверен, нужно ли это
				КонецЕсли;
				
				Если УИДЗаполнен(Стр.Субконто2) Тогда
					НайденныеОбъекты = НайтиОбъектПоИдентификатору(Стр.Субконто2);
					Нстр.Номенклатура = НайденныеОбъекты[0].Ссылка;
				КонецЕсли;	
				
			КонецЕсли;	
		КонецЕсли;	
		
		Если ИмяТЧ = "НоменклатураНаСкладе" Тогда
			
			Если структураОбъект.Счет = "0803" Тогда
				Нстр.Номенклатура = НайтиОбъектСтроительства(НайтиОбъектПоИдентификатору(Стр.Субконто1));
				Нстр.СпособСтроительства = Перечисления.СпособыСтроительства.Подрядный;
			Иначе
				НайденныеОбъекты = НайтиОбъектПоИдентификатору(Стр.Субконто1);
				Нстр.Номенклатура = НайденныеОбъекты[0].Ссылка;
			КонецЕсли;	
			
			Если СтрНайти(Стр.ТипСубконто2, "Склад") > 0 Тогда
				НайденныеОбъекты = НайтиОбъектПоИдентификатору(Стр.Субконто2);			
				НСтр.Склад = НайденныеОбъекты[0].Ссылка;
			КонецЕсли;
			
			Если СчетОстатков.КодБыстрогоВыбора = "41К" ИЛИ СчетОстатков.КодБыстрогоВыбора = "4101" Тогда
				Если УИДЗаполнен(Стр.Субконто1) Тогда
					НайденныеОбъекты = НайтиОбъектПоИдентификатору(Стр.Субконто1);
					Нстр.Номенклатура = НайденныеОбъекты[0].Ссылка;
				КонецЕсли;
				
				Если УИДЗаполнен(Стр.Субконто2) Тогда
					НайденныеОбъекты = НайтиОбъектПоИдентификатору(Стр.Субконто2);
					Нстр.Склад = НайденныеОбъекты[0].Ссылка;
				КонецЕсли;	
				
				Если ЭтоИП Тогда
					НСтр.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются; //!!
                	НСтр.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписано;
					Если Стр.ДанныеПартий.Количество() = 0 Тогда
						
						НСтр.Партия = НайтиСоздатьДокументРасчетовСКонтрагентом(ВводОбъект.Организация, Справочники.Контрагенты.ПустаяСсылка(), Неопределено, "Неопределенная партия");
						НСтр.НДС = НСтр.Сумма / 120 * 20;
						
					Иначе
						
						КоличествоВсего = НСтр.Количество;
						СуммаВсего = НСтр.Сумма;
						
						Для Каждого СтрПартии из Стр.ДанныеПартий Цикл
							КА = Неопределено;
							Дог = Неопределено;							
							Если УИДЗаполнен(СтрПартии.Контрагент) Тогда
								НайденныеОбъекты = НайтиОбъектПоИдентификатору(СтрПартии.Контрагент);
								КА = НайтиКонтрагента(НайденныеОбъекты);	
							КонецЕсли;	                        
							Если КА = Неопределено Тогда
								КА = Справочники.Контрагенты.ПустаяСсылка();
							КонецЕсли;	
							
							Если УИДЗаполнен(СтрПартии.Договор) Тогда
								НайденныеОбъекты = НайтиОбъектПоИдентификатору(СтрПартии.Договор);
								Дог = НайденныеОбъекты[0].Ссылка;	
							КонецЕсли;	                        
							
							Если КоличествоВсего <> СтрПартии.ОстатокПартии Тогда
								ДопСтрока = Табчасть.Добавить();
								ЗаполнитьЗначенияСвойств(ДопСтрока, НСтр);
							КонецЕсли;
							
							НСтр.Количество = СтрПартии.ОстатокПартии;
							НСтр.Сумма = СтрПартии.СтоимостьРегл;
							НСтр.НДС = СтрПартии.НДС;
							НСтр.Партия = НайтиСоздатьДокументРасчетовСКонтрагентом(ВводОбъект.Организация, КА, Дог, СтрПартии.Партия);
							
							//уменьшить общее количество и сумму, проставить количество и партию в НСТР, приравнять ДопСтроку к НСтр
							КоличествоВсего = КоличествоВсего - НСтр.Количество;
							СуммаВсего = СуммаВсего - НСтр.Сумма;
							
							Если КоличествоВсего <> 0 Тогда

								ДопСтрока.Количество = КоличествоВсего;
								ДопСтрока.Сумма = СуммаВсего;
								НСтр = ДопСтрока;
								
							КонецЕсли;	
							
						КонецЦикла;	
						
						Если Не ЗначениеЗаполнено(НСтр.Партия) Тогда
							НСтр.Партия = НайтиСоздатьДокументРасчетовСКонтрагентом(ВводОбъект.Организация, Справочники.Контрагенты.ПустаяСсылка(), Неопределено, "Неопределенная партия");
							НСтр.НДС = НСтр.Сумма / 120 * 20;
						КонецЕсли;	
						
					КонецЕсли;	
				КонецЕсли;	
					
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЦикла;
	//ВводОбъект.ОбменДанными.Загрузка = Истина;
	//ВводОбъект.Записать(РежимЗаписиДокумента.Запись);
	//ВводОбъект.ОбменДанными.Загрузка = Ложь;
	ВводОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры

Функция НайтиСоздатьДокументРасчетовСКонтрагентом(Организация, Контрагент, Договор = Неопределено, Комментарий = "")

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДокументРасчетовСКонтрагентом.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом
		|ГДЕ
		|	ДокументРасчетовСКонтрагентом.Организация = &Организация
		|	И ДокументРасчетовСКонтрагентом.Контрагент = &Контрагент
		|	И ДокументРасчетовСКонтрагентом.Комментарий Подобно """" + &Комментарий + ""%""
		|	И ВЫБОР
		|			КОГДА &ДоговорКонтрагента = НЕОПРЕДЕЛЕНО
		|				ТОГДА ДокументРасчетовСКонтрагентом.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|			ИНАЧЕ ДокументРасчетовСКонтрагентом.ДоговорКонтрагента = &ДоговорКонтрагента
		|		КОНЕЦ";
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", Договор);
	ЗАпрос.УстановитьПараметр("Комментарий", Комментарий);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() ТОгда
		Возврат Выборка.Ссылка;
	Иначе     
		
		ДокРасчетов = Документы.ДокументРасчетовСКонтрагентом.СоздатьДокумент();
		ДокРасчетов.Организация = Организация;
		ДокРасчетов.Контрагент = Контрагент;
		ДокРасчетов.ДоговорКонтрагента = Договор;
		ДокРасчетов.ВалютаДокумента = ДокРасчетов.ДоговорКонтрагента.ВалютаВзаиморасчетов;//??
		ДокРасчетов.Дата = Дата(2020,12,31,23,59,59);
		ДокРасчетов.Комментарий = Комментарий;
		ДокРасчетов.Записать(РежимЗаписиДокумента.Проведение);
		
		Возврат ДокРасчетов.Ссылка;
		
	КонецЕсли;	
	
КонецФункции	

Процедура ЗаполнитьСписокРазделов(СписокРазделов)

	СписокРазделов.Очистить();

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ГотоваяПродукцияИПолуфабрикаты;
	СтрокаРаздела.КодыГрупп   = ",43,21,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ДенежныеСредства;
	СтрокаРаздела.КодыГрупп   = ",50,51,52,53,54,55,56,57,58,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Капитал;
	СтрокаРаздела.КодыГрупп   = ",80,81,82,83,84,85,86,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеВложения;
	СтрокаРаздела.КодыГрупп   = ",07,08,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Материалы;
	СтрокаРаздела.КодыГрупп   = ",10,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным;
	СтрокаРаздела.КодыСчетов     = ",76.АВ,76.ВА,";
	СтрокаРаздела.КодыИсключений = ",76,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям;
	СтрокаРаздела.КодыГрупп      = ",19,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.НезавершенноеПроизводство;
	СтрокаРаздела.КодыГрупп      = ",20,23,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.НематериальныеАктивыИНИОКР;
	СтрокаРаздела.КодыГрупп      = ",04,05,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.ОтложенныеНалоговыеАктивыОбязательства;
	СтрокаРаздела.КодыГрупп      = ",09,77,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.ОсновныеСредства;
	СтрокаРаздела.КодыГрупп      = ",01,02,03,";
	СтрокаРаздела.КодыСчетов     = ",010,";
	СтрокаРаздела.КодыИсключений = ",10,11,001,011,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.РасходыБудущихПериодов;
	СтрокаРаздела.КодыГрупп      = ",97,";
	СтрокаРаздела.КодыСчетов     = ",76.01.2,76.01.9,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыПоНалогамИСборам;
	СтрокаРаздела.КодыГрупп      = ",68,69,";
	СтрокаРаздела.КодыИсключений = ",68.22,68.32,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПерсоналомПоОплатеТрудаИДепонентам;
	СтрокаРаздела.КодыГрупп      = ",70,";
	СтрокаРаздела.КодыСчетов     = ",76.04,";
	СтрокаРаздела.КодыИсключений = ",76,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПодотчетнымиЛицами;
	СтрокаРаздела.КодыГрупп      = ",71,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПокупателямиИЗаказчиками;
	СтрокаРаздела.КодыГрупп      = ",62,";
	СтрокаРаздела.КодыИсключений = ",62.03,62.Р,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПоставщикамиИПодрядчиками;
	СтрокаРаздела.КодыГрупп      = ",60,";
	СтрокаРаздела.КодыИсключений = ",60.03,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПрочимиДебиторамиИКредиторами;
	СтрокаРаздела.КодыГрупп      = ",76,";
	СтрокаРаздела.КодыИсключений = ",76.03,76.04,76.01.2,76.01.9,76.01.1,76.07.1,76.07.9,76.10,76.14,76.27.1,76.37.1,76.37.9,76.21,76.41,76.АВ,76.ВА,76.Н,76.ОТ,76.51,76.52,76.ОК,76.К,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСУчредителями;
	СтрокаРаздела.КодыГрупп      = ",75,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.Товары;
	СтрокаРаздела.КодыГрупп      = ",41,42,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.ТоварыОтгруженные;
	СтрокаРаздела.КодыГрупп      = ",45,";
	
	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.СпецоснасткаВЭксплуатации;
	СтрокаРаздела.КодыГрупп      = "";
	СтрокаРаздела.КодыСчетов     = ",МЦ.03,";
	СтрокаРаздела.КодыИсключений = ",МЦ,";

КонецПроцедуры

Функция ОпределитьРазделУчета(Счет)
	
	СписокРазделов = Новый ТаблицаЗначений;
	СписокРазделов.Колонки.Добавить("КодыГрупп");
	СписокРазделов.Колонки.Добавить("КодыСчетов");
	СписокРазделов.Колонки.Добавить("КодыИсключений");
	СписокРазделов.Колонки.Добавить("РазделУчета");
	
	ЗаполнитьСписокРазделов(СписокРазделов);
	
	КодСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет).Код;
	ПозицияТочки = СтрНайти(КодСчета, ".");
	КодРодителя = ?(ПозицияТочки = 0, КодСчета, Лев(КодСчета, ПозицияТочки - 1));

	Для Каждого СтрокаРаздела Из СписокРазделов Цикл

		Если СтрНайти(СтрокаРаздела.КодыСчетов, "," + КодСчета + ",") > 0 Тогда
			Если СтрНайти(СтрокаРаздела.КодыИсключений, "," + КодСчета + ",") = 0 Тогда
				Возврат СтрокаРаздела.РазделУчета;
			КонецЕсли;
		КонецЕсли;

		Если СтрНайти(СтрокаРаздела.КодыГрупп, "," + КодРодителя + ",") > 0 Тогда
			Если СтрНайти(СтрокаРаздела.КодыИсключений, "," + КодСчета + ",") = 0 Тогда
				Возврат СтрокаРаздела.РазделУчета;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.ПрочиеСчетаБухгалтерскогоУчета");

КонецФункции
#КонецОбласти

//!!
Функция ПолучитьВидОплаты(Параметры = Неопределено)
	
	Если Параметры = Неопределено Тогда
		Выборка = Справочники.ВидыОплатОрганизаций.Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		//Притула Р.В. Начало 28.01.2021 #18705
		Запрос = Новый Запрос;
		Запрос.Текст =  "ВЫБРАТЬ Первые 1
			|    ВидыОплатОрганизаций.Ссылка КАК Ссылка
			|ИЗ
			|    Справочник.ВидыОплатОрганизаций КАК ВидыОплатОрганизаций
			|ГДЕ
			|    ВидыОплатОрганизаций.ДоговорКонтрагента.Номер = &Номер";
		
		Запрос.УстановитьПараметр("Номер", Параметры.НомерТерминала);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		Иначе
			Возврат Неопределено;
		КонецЕсли;	
		//Притула Р.В. Конец  28.01.2021		
	КонецЕсли;	
	
КонецФункции	
//!!
Функция ПолучитьОснованиеПлатежа(Основание)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Первые 1
			|    ДополнительныеСведения.Объект КАК Объект
			|ИЗ
			|    РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
			|ГДЕ
			|    ДополнительныеСведения.Свойство.Заголовок = ""ОснованиеПлатежа""
			|    И ДополнительныеСведения.Объект ССЫЛКА Документ.РеализацияТоваровУслуг
			|    И ДополнительныеСведения.Значение = &Основание"; 
	
	Запрос.УстановитьПараметр("Основание", Основание);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Объект;
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
	
КонецФункции	
//!!
Процедура ПривязатьПлатежиПоОснованию(Реализация, Основание)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
			|    ДополнительныеСведения.Объект КАК Объект
			|ИЗ
			|    РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
			|ГДЕ
			|    ДополнительныеСведения.Свойство.Заголовок = ""ОснованиеПлатежа""
			|    И ДополнительныеСведения.Значение = &Основание
			|    И (ДополнительныеСведения.Объект ССЫЛКА Документ.ОплатаПлатежнойКартой
			|            ИЛИ ДополнительныеСведения.Объект ССЫЛКА Документ.ПриходныйКассовыйОрдер)
			|    И (ДополнительныеСведения.Объект.ДокументОснование = НЕОПРЕДЕЛЕНО
			|            ИЛИ ДополнительныеСведения.Объект.ДокументОснование = ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка))";
	
	Запрос.УстановитьПараметр("Основание", Основание);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Документ = Выборка.Объект.ПолучитьОбъект();
		Документ.ДокументОснование = Реализация;
		Документ.РасшифровкаПлатежа[0].СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.ПоДокументу;
		Документ.РасшифровкаПлатежа[0].Сделка = Реализация;

		Попытка
			Если Документ.Проведен Тогда
				Документ.Записать(РежимЗаписиДокумента.Проведение);
			Иначе
				Документ.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;				
		Исключение		
		КонецПопытки;		
		
	КонецЦикла;	
	
КонецПроцедуры	

//!! оставляем так? или добавляем комментарий из erp? или не фиксируем комментарий в БП?
Функция СформироватьКомментарий(Комментарий, Представление)
	Если СтрНайти(Комментарий, Представление) = 0 Тогда
		Возврат Комментарий + Представление;
	Иначе
		Возврат Комментарий;
	КонецЕсли;	
КонецФункции	

Процедура ЗагрузитьОбъектПоСтруктуре(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты)
	
	Если структураОбъект.Свойство("УИД") И НЕ УИДЗаполнен(структураОбъект.УИД) Тогда 
		Если структураОбъект.ТипОбъекта <> "ВводОстатков" Тогда 
			ОписаниеОшибок.errorCodeObj = "405";
			ОписаниеОшибок.errorObj = "";
			ОписаниеОшибок.errorDescriptionObj = "В структуре выгрузке не указан УИД объекта!";
			Возврат;
		КонецЕсли;
	КонецЕсли;	                       

	Если структураОбъект.ТипОбъекта = "Номенклатура" Тогда
		ЗагрузитьНоменклатуру(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	ИначеЕсли структураОбъект.ТипОбъекта = "ЕдиницаИзмерения" Тогда 
		ЗагрузитьЕдиницуИзмерения(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	ИначеЕсли структураОбъект.ТипОбъекта = "Валюта" Тогда
		ЗагрузитьВалюту(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	ИначеЕсли структураОбъект.ТипОбъекта = "Организация" Тогда
		ЗагрузитьОрганизацию(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	ИначеЕсли структураОбъект.ТипОбъекта = "Подразделение" Тогда
		ЗагрузитьПодразделение(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	ИначеЕсли структураОбъект.ТипОбъекта = "РегистрацияВНалоговомОргане" Тогда
		ЗагрузитьРегистрациюВНалоговомОргане(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	ИначеЕсли структураОбъект.ТипОбъекта = "УчетнаяЗаписьДокументооборота" Тогда
		ЗагрузитьУчетнуюЗаписьДокументооборота(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	ИначеЕсли структураОбъект.ТипОбъекта = "СерверДокументооборота" Тогда
		ЗагрузитьСерверДокументооборота(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	ИначеЕсли структураОбъект.ТипОбъекта = "НалоговыйОрган" Тогда
		ЗагрузитьНалоговыйОрган(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	ИначеЕсли структураОбъект.ТипОбъекта = "Контрагент" Тогда
		ЗагрузитьКонтрагента(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	ИначеЕсли структураОбъект.ТипОбъекта = "Договор" Тогда
		ЗагрузитьДоговор(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	ИначеЕсли структураОбъект.ТипОбъекта = "Страна" Тогда
		ЗагрузитьСтрану(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	ИначеЕсли структураОбъект.ТипОбъекта = "Склад" Тогда
		ЗагрузитьСклад(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты); 
	ИначеЕсли структураОбъект.ТипОбъекта = "РасходыБудущихПериодов" Тогда
		ЗагрузитьРасходыБудущихПериодов(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	ИначеЕсли структураОбъект.ТипОбъекта = "ПрочиеДоходыИРасходы" Тогда
		ЗагрузитьПрочиеДоходыИРасходы(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	ИначеЕсли структураОбъект.ТипОбъекта = "ФизическоеЛицо" Тогда
		ЗагрузитьФизЛицо(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	ИначеЕсли структураОбъект.ТипОбъекта = "Резервы" Тогда
		ЗагрузитьРезервыОценочныеОбязательства(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	ИначеЕсли структураОбъект.ТипОбъекта = "ОбъектЭксплуатации" Тогда 
		ЗагрузитьОсновноеСредство(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	ИначеЕсли структураОбъект.ТипОбъекта = "ОбъектСтроительства" Тогда 
		ЗагрузитьОбъектСтроительства(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты); 
	ИначеЕсли структураОбъект.ТипОбъекта = "НематериальныйАктив" Тогда 
		ЗагрузитьНематериальныйАктив(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	ИначеЕсли структураОбъект.ТипОбъекта = "Сотрудник" Тогда 
		ЗагрузитьСотрудника(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	ИначеЕсли структураОбъект.ТипОбъекта = "СтатьяДДС" Тогда 
		ЗагрузитьСтатьюДДС(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	ИначеЕсли структураОбъект.ТипОбъекта = "Банк" Тогда 
		ЗагрузитьБанк(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);	
	ИначеЕсли структураОбъект.ТипОбъекта = "КлассификаторБанка" Тогда 
		ЗагрузитьКлассификаторБанка(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);	
	ИначеЕсли структураОбъект.ТипОбъекта = "БанковскийСчет" Тогда 
		ЗагрузитьБанковскийСчет(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);	
	ИначеЕсли структураОбъект.ТипОбъекта = "ЗарплатныйПроект" Тогда 
		ЗагрузитьЗарплатныйПроект(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	ИначеЕсли структураОбъект.ТипОбъекта = "СпособВыплатыЗарплаты" Тогда 
		ЗагрузитьСпособВыплатыЗарплаты(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	ИначеЕсли структураОбъект.ТипОбъекта = "СпособОкругленияПриРасчетеЗарплаты" Тогда 
		ЗагрузитьСпособОкругленияПриРасчетеЗарплаты(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	ИначеЕсли структураОбъект.ТипОбъекта = "СтатьяРасходовЗарплата" Тогда 
		ЗагрузитьСтатьюРасходовЗарплата(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	ИначеЕсли структураОбъект.ТипОбъекта = "Должность" Тогда 
		ЗагрузитьДолжность(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	ИначеЕсли структураОбъект.ТипОбъекта = "ВидДоходовНДФЛ" Тогда 
		ЗагрузитьВидДоходовНДФЛ(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	//Самойлов А.С. Начало 2022-09-28 #
	ИначеЕсли структураОбъект.ТипОбъекта = "СтатьяЗатрат" Тогда
		ЗагрузитьСтатьюЗатрат(структураОбъект,ОписаниеОшибок,ЗапрашиваемыеОбъекты);		
	ИначеЕсли структураОбъект.ТипОбъекта = "ПриобретениеТоваровУслуг" Тогда
		ЗагрузитьПриобретениеТоваровУслуг(структураОбъект,ОписаниеОшибок,ЗапрашиваемыеОбъекты); 
	ИначеЕсли структураОбъект.ТипОбъекта = "ПеремещениеТоваров" Тогда
		ЗагрузитьПеремещениеТоваров(структураОбъект,ОписаниеОшибок,ЗапрашиваемыеОбъекты);
	ИначеЕсли структураОбъект.ТипОбъекта = "ОтчетКомиссионераОПродажах" Тогда
		ЗагрузитьОтчетКомиссионераОПродажах(структураОбъект,ОписаниеОшибок,ЗапрашиваемыеОбъекты);
	//Самойлов А.С. Конец  2022-09-28
	ИначеЕсли структураОбъект.ТипОбъекта = "АвансовыйОтчет" Тогда
		ЗагрузитьАвансовыйОтчет(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	ИначеЕсли структураОбъект.ТипОбъекта = "РеализацияТоваровУслуг" Тогда
		ЗагрузитьРеализацию(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	ИначеЕсли структураОбъект.ТипОбъекта = "КорректировкаРеализации" Тогда
		ЗагрузитьКорректировкуРеализации(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	ИначеЕсли структураОбъект.ТипОбъекта = "ВозвратТоваровОтПокупателя" Тогда	
		ЗагрузитьВозвратТоваровОтПокупателя(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты); 
	ИначеЕсли структураОбъект.ТипОбъекта = "ВозвратТоваровПоставщику" Тогда	
		ЗагрузитьВозвратТоваровПоставщику(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	ИначеЕсли структураОбъект.ТипОбъекта = "ВозвратТоваровПоставщикуКакКорректировкаПриобретения" 
		ИЛИ структураОбъект.ТипОбъекта = "КорректировкаПриобретения" Тогда	
		ЗагрузитьКорректировкуПоступления(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	ИначеЕсли структураОбъект.ТипОбъекта = "ВзаимозачетЗадолженности" 
		ИЛИ структураОбъект.ТипОбъекта = "КорректировкаЗадолженности" Тогда
		ЗагрузитьКорректировкуДолга(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	ИначеЕсли структураОбъект.ТипОбъекта = "ОприходованиеИзлишковТоваров" Тогда
		ЗагрузитьОприходованиеТоваров(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	ИначеЕсли структураОбъект.ТипОбъекта = "ТребованиеНакладная" Тогда
		ЗагрузитьТребованиеНакладную(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	ИначеЕсли структураОбъект.ТипОбъекта = "ОперацияПоПлатежнойКарте" Тогда
		ЗагрузитьОплатуПлатежнойКартой(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	ИначеЕсли структураОбъект.ТипОбъекта = "ПриходныйКассовыйОрдер" Тогда
		ЗагрузитьПриходныйКассовыйОрдер(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты); 
	ИначеЕсли структураОбъект.ТипОбъекта = "ПоступлениеБезналичныхДенежныхСредств" Тогда
		ЗагрузитьПоступлениеНаРасчетныйСчет(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	ИначеЕсли структураОбъект.ТипОбъекта = "РасходныйКассовыйОрдер" Тогда
		ЗагрузитьРасходныйКассовыйОрдер(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	ИначеЕсли структураОбъект.ТипОбъекта = "СписаниеБезналичныхДенежныхСредств" Тогда
		ЗагрузитьСписаниеСРасчетногоСчета(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	ИначеЕсли структураОбъект.ТипОбъекта = "ВедомостьНаВыплатуЗарплатыВБанк" Тогда
		ЗагрузитьВедомостьНаВыплатуЗарплатыВБанк(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	ИначеЕсли структураОбъект.ТипОбъекта = "КомплектацииНоменклатуры" Тогда
		ЗагрузитьКомплектацииНоменклатуры(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	ИначеЕсли структураОбъект.ТипОбъекта = "КомплектацияНоменклатуры" Тогда
		ЗагрузитьКомплектациюНоменклатуры(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);		
	ИначеЕсли структураОбъект.ТипОбъекта = "РазукомплектацииНоменклатуры" Тогда
		ЗагрузитьРазукомплектацииНоменклатуры(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);	
	ИначеЕсли структураОбъект.ТипОбъекта = "ОперацияБух" Тогда
		ЗагрузитьОперациюБух(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);   
	ИначеЕсли структураОбъект.ТипОбъекта = "ОтражениеЗарплатыВФинансовомУчете" Тогда
		ЗагрузитьОтражениеЗарплатыВБухучете(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);   
	ИначеЕсли структураОбъект.ТипОбъекта = "ДокументРасчетовСКонтрагентами" Тогда
		ЗагрузитьДокументРасчетовСКонтрагентами(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	ИначеЕсли структураОбъект.ТипОбъекта = "ВводОстатков" Тогда
		ЗагрузитьВводОстатков(структураОбъект, ОписаниеОшибок, ЗапрашиваемыеОбъекты);
	Иначе
		ОписаниеОшибок.errorCodeObj = "404";
		ОписаниеОшибок.errorObj = структураОбъект.УИД;
		ОписаниеОшибок.errorDescriptionObj = "Для типа выгружаемого объекта " + структураОбъект.ТипОбъекта + " не задан алгоритм загрузки";  //!!+ добавить представление объекта
	КонецЕсли;	

КонецПроцедуры	

Функция UploadObjectsPOST(Запрос)
		
	МассивОшибокЗагрузки = Новый Массив; //Массив структур ошибок по объектам
	МассивЗапрашиваемыхОбъектов = Новый Массив;
	
	СтруктураОтвет = Новый Структура("errorCode, errorDescription, errorObj, requestedObj", 0, "", МассивОшибокЗагрузки, МассивЗапрашиваемыхОбъектов);
	СтруктураЗапрос = ПолучитьТелоЗапросаКакСтруктуру(Запрос);	
	Если СтруктураЗапрос = Неопределено Тогда
		СтруктураОтвет.errorCode = 601;
		СтруктураОтвет.errorDescription = "Ошибка парсинга JSON тела запроса";
		Возврат ПреобразоватьСтруктуруВHTTPОтвет(структураОтвет).ПолучитьТелоКакСтроку();
	КонецЕсли;
	
	СтруктураОбязательныхПараметров = Новый Структура("Объекты", Новый Структура("УИД, ТипОбъекта", "Строка", "Строка"));
	ОписаниеОшибок = "";
	ПроверитьЗаполненностьОбязательныхПараметров(СтруктураЗапрос, СтруктураОбязательныхПараметров, ОписаниеОшибок);
	
	Если ЗначениеЗаполнено(ОписаниеОшибок) Тогда
		СтруктураОтвет.errorCode = 602;
		СтруктураОтвет.errorDescription = ОписаниеОшибок;
		Возврат ПреобразоватьСтруктуруВHTTPОтвет(СтруктураОтвет);
	КонецЕсли;
	
	//ОписаниеОшибок = ""; //новый структура код, описание, уид и представление в erp, представление в БП
	
	НачатьТранзакцию();

	Для Каждого СтруктураОбъект Из СтруктураЗапрос.Объекты Цикл 
		//Савина Н. #1 Начало 29.09.2022
		Если ТипЗнч(ОписаниеОшибок) = Тип("Структура") И ЗначениеЗаполнено(ОписаниеОшибок.errorCodeObj) Тогда //уже объявлено ранее
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			СтруктураОтвет.errorCode = ОписаниеОшибок.errorCodeObj; 
			СтруктураОтвет.errorDescription = ОписаниеОшибок.errorDescriptionObj;
			Возврат ПреобразоватьСтруктуруВHTTPОтвет(СтруктураОтвет);
		КонецЕсли;
		//Савина Н. Конец 29.09.2022
		ОписаниеОшибок = Новый Структура("errorCodeObj, errorObj, errorDescriptionObj", 0, СтруктураОбъект.УИД, "");  
		ЗагрузитьОбъектПоСтруктуре(СтруктураОбъект, ОписаниеОшибок, МассивЗапрашиваемыхОбъектов); 
		
		Если ОписаниеОшибок.errorCodeObj <> 0 Тогда
			СтруктураОтвет.errorObj.Добавить(ОписаниеОшибок);
		КонецЕсли;
	КонецЦикла;		

	Если ТранзакцияАктивна() Тогда
	
		Если МассивЗапрашиваемыхОбъектов.Количество() > 0 ИЛИ СтруктураОтвет.errorObj.Количество() > 0 Тогда
			СтруктураОтвет.requestedObj = МассивЗапрашиваемыхОбъектов;
			ОтменитьТранзакцию();
		Иначе
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	КонецЕсли;	
	
	Если СтруктураОтвет.errorObj.Количество() > 0 Тогда
		СтруктураОтвет.errorCode = 600;
		СтруктураОтвет.errorDescription = "Объекты загрузки содержат ошибки!";	

		Возврат ПреобразоватьСтруктуруВHTTPОтвет(СтруктураОтвет);
	КонецЕсли;	
	
	Возврат ПреобразоватьСтруктуруВHTTPОтвет(СтруктураОтвет);
		
КонецФункции

Функция VersionGET(Запрос)
	
	структураОтвет = Новый Структура;
	структураОтвет.Вставить("ErrorCode", 0);
	структураОтвет.Вставить("ErrorDescription", "");
	
	УстановитьПривилегированныйРежим(Истина);
	мсвРасширений = РасширенияКонфигурации.Получить(Новый Структура("Имя", "ОбменСУТ"));
	
	Если мсвРасширений.Количество() = 0 Тогда
		Версия = "Не установлено";
	Иначе
		Версия = мсвРасширений[0].Версия;
	КонецЕсли;	
	
	структураОтвет.Вставить("Version", Версия);
	структураОтвет.Вставить("ConfigurationVersion", Метаданные.Версия); 
	
	СисИнфо = Новый СистемнаяИнформация;	
	структураОтвет.Вставить("PlatformVersion", СисИнфо.ВерсияПриложения); 
	
	Возврат ПреобразоватьСтруктуруВHTTPОтвет(структураОтвет);
	
КонецФункции

#Область Пользователи
Процедура ДобавитьДанныеПользователяВСтруктуру(структураСДанными,Пользователь)
	
	структураСДанными.Вставить("Name",Пользователь.Имя);
	структураСДанными.Вставить("Active",Пользователь.АутентификацияСтандартная);
	
КонецПроцедуры

Функция UserСоздать(Запрос)
	
	структураОтвет = Новый Структура;
	структураОтвет.Вставить("ErrorCode",0);
	структураОтвет.Вставить("ErrorDescription","");
	
	структураЗапрос = ПолучитьТелоЗапросаКакСтруктуру(Запрос);
	
	Если структураЗапрос = Неопределено Тогда
		
		структураОтвет.errorCode = 602;
		структураОтвет.errorDescription = "Ошибка парсинга JSON тела запроса";
		Возврат ПреобразоватьСтруктуруВHTTPОтвет(структураОтвет);
		
	КонецЕсли;
	
	структураОбязательныхПараметров = Новый Структура("Name,Password,Active","Строка","Строка","Булево");
	ОписаниеОшибок = "";
	ПроверитьЗаполненностьОбязательныхПараметров(структураЗапрос,структураОбязательныхПараметров,ОписаниеОшибок);
	
	Если ЗначениеЗаполнено(ОписаниеОшибок) Тогда
		
		структураОтвет.errorCode = 101;
		структураОтвет.errorDescription = ОписаниеОшибок;
		Возврат ПреобразоватьСтруктуруВHTTPОтвет(структураОтвет);
		
	КонецЕсли;
	
	новыйПользователь = ПользователиИнформационнойБазы.СоздатьПользователя();
	новыйПользователь.Имя = структураЗапрос.Name;
	новыйПользователь.ПолноеИмя = структураЗапрос.Name;
	новыйПользователь.СохраняемоеЗначениеПароля = структураЗапрос.Password;
	новыйПользователь.АутентификацияСтандартная = структураЗапрос.Active; //!!??
	//новыйПользователь.АутентификацияОС = Истина;
	новыйПользователь.АутентификацияОС = Ложь;
	//новыйПользователь.ПользовательОС = "\\jira\" + структураЗапрос.Name;  //!! переносим из ERP, там эти данные есть
	новыйПользователь.ЗапрещеноИзменятьПароль = Истина;
	новыйПользователь.ПоказыватьВСпискеВыбора = Ложь;
	
	Попытка
		новыйПользователь.Записать();
	Исключение
		структураОтвет.errorCode = 102;
		структураОтвет.errorDescription = "Ошибка при записи нового пользователя:" + Символы.ПС + ОписаниеОшибки();
		Возврат ПреобразоватьСтруктуруВHTTPОтвет(структураОтвет);
	КонецПопытки;
	
	ПользовательИзСправочника = Справочники.Пользователи.НайтиПоНаименованию(новыйПользователь.Имя);
	
	Если НЕ ПользовательИзСправочника.Пустая() Тогда		
		ПользовательОбъект = ПользовательИзСправочника.ПолучитьОбъект();		
	Иначе		
		ПользовательОбъект = Справочники.Пользователи.СоздатьЭлемент();		
	КонецЕсли;
	
	ПользовательОбъект.Наименование = структураЗапрос.Name;
	ПользовательОбъект.Недействителен = НЕ структураЗапрос.Active; //!!??
	ПользовательОбъект.ИдентификаторПользователяИБ = новыйПользователь.УникальныйИдентификатор;
	ПользовательОбъект.ПометкаУдаления = Ложь;
	ПользовательОбъект.ОбменДанными.Загрузка = Истина;
	
	ПользовательОбъект.Записать(); 
	ПользовательИзСправочника = ПользовательОбъект.Ссылка;
	новыйПользователь.Записать();
	
	ДобавитьДанныеПользователяВСтруктуру(структураОтвет,новыйПользователь);	
	Возврат ПреобразоватьСтруктуруВHTTPОтвет(структураОтвет);	
	
КонецФункции

Функция UserПолучить(Запрос)
	
	структураОтвет = Новый Структура;
	структураОтвет.Вставить("ErrorCode",0);
	структураОтвет.Вставить("ErrorDescription","");
	
	Попытка		
		структураПараметры = Новый Структура;		
		Для Каждого Параметр Из Запрос.ПараметрыЗапроса Цикл			
			Если ТипЗнч(Параметр.Ключ) = Тип("Строка") Тогда				
				структураПараметры.Вставить(Параметр.Ключ,Параметр.Значение);						
			КонецЕсли;				
		КонецЦикла;		
	Исключение		
		структураОтвет.errorCode = 601;
		структураОтвет.errorDescription = "Не удалось разобрать строку с параметрами";
		Возврат ПреобразоватьСтруктуруВHTTPОтвет(структураОтвет);		
	КонецПопытки;
	
	структураОбязательныхПараметров = Новый Структура("Name","Строка");
	ОписаниеОшибок = "";
	ПроверитьЗаполненностьОбязательныхПараметров(структураПараметры,структураОбязательныхПараметров,ОписаниеОшибок);
	
	Если ЗначениеЗаполнено(ОписаниеОшибок) Тогда
		
		структураОтвет.errorCode = 101;
		структураОтвет.errorDescription = ОписаниеОшибок;
		Возврат ПреобразоватьСтруктуруВHTTPОтвет(структураОтвет);
		
	КонецЕсли;
	
	Пользователь = ПользователиИнформационнойБазы.НайтиПоИмени(структураПараметры.Name);
	
	Если Пользователь = Неопределено Тогда
		структураОтвет.errorCode = 103;
		структураОтвет.errorDescription = "Не найден пользователь с именем " + структураПараметры.Name;		
		Возврат ПреобразоватьСтруктуруВHTTPОтвет(структураОтвет);
	КонецЕсли;
	
	ДобавитьДанныеПользователяВСтруктуру(структураОтвет,Пользователь);
	Возврат ПреобразоватьСтруктуруВHTTPОтвет(структураОтвет);	
	
КонецФункции

#КонецОбласти

Функция НайтиОбъектПоИдентификатору(П1 = Неопределено,П2 = Неопределено,П3 = Неопределено,П4 = Неопределено)
	Возврат Неопределено;
КонецФункции

Функция НайтиОрганизацию(П1 = Неопределено,П2 = Неопределено,П3 = Неопределено,П4 = Неопределено)
	Возврат Неопределено;
КонецФункции

Функция НайтиКонтрагента(П1 = Неопределено,П2 = Неопределено,П3 = Неопределено,П4 = Неопределено)
	Возврат Неопределено;
КонецФункции

Функция НайтиОбъектСтроительства(П1 = Неопределено,П2 = Неопределено,П3 = Неопределено,П4 = Неопределено)
	Возврат Неопределено;
КонецФункции
